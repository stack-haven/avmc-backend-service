// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"backend-service/app/avmc/admin/internal/biz"
	"backend-service/app/avmc/admin/internal/conf"
	"backend-service/app/avmc/admin/internal/data"
	"backend-service/app/avmc/admin/internal/server"
	"backend-service/app/avmc/admin/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	authUsecase := biz.NewAuthUsecase(logger)
	client := data.NewEntClient(confData, logger)
	redisClient := data.NewRedisClient(confData, logger)
	node := data.NewSnowflake(logger)
	dataData, cleanup, err := data.NewData(confData, client, redisClient, node, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepo, logger)
	authServiceService := service.NewAuthServiceService(authUsecase, userUsecase, logger)
	userServiceService := service.NewUserServiceService(userUsecase, logger)
	deptRepo := data.NewDeptRepo(dataData, logger)
	deptUsecase := biz.NewDeptUsecase(deptRepo, logger)
	deptServiceService := service.NewDeptServiceService(deptUsecase, logger)
	menuRepo := data.NewMenuRepo(dataData, logger)
	menuUsecase := biz.NewMenuUsecase(menuRepo, logger)
	menuServiceService := service.NewMenuServiceService(menuUsecase, logger)
	roleRepo := data.NewRoleRepo(dataData, logger)
	roleUsecase := biz.NewRoleUsecase(roleRepo, logger)
	roleServiceService := service.NewRoleServiceService(roleUsecase, logger)
	grpcServer := server.NewGRPCServer(confServer, authServiceService, userServiceService, deptServiceService, menuServiceService, roleServiceService, logger)
	authenticator := data.NewAuthenticator(confServer, logger)
	authorizer := data.NewAuthorizer(confData, logger)
	postRepo := data.NewPostRepo(dataData, logger)
	postUsecase := biz.NewPostUsecase(postRepo, logger)
	postServiceService := service.NewPostServiceService(postUsecase, logger)
	httpServer := server.NewHTTPServer(confServer, logger, authenticator, authorizer, authServiceService, userServiceService, deptServiceService, menuServiceService, roleServiceService, postServiceService)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
