// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend-service/app/avmc/admin/internal/data/ent/menu"
	"backend-service/app/avmc/admin/internal/data/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// MenuUpdate is the builder for updating Menu entities.
type MenuUpdate struct {
	config
	hooks     []Hook
	mutation  *MenuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MenuUpdate builder.
func (_u *MenuUpdate) Where(ps ...predicate.Menu) *MenuUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MenuUpdate) SetUpdatedAt(v time.Time) *MenuUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *MenuUpdate) SetDeletedAt(v time.Time) *MenuUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableDeletedAt(v *time.Time) *MenuUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *MenuUpdate) ClearDeletedAt() *MenuUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MenuUpdate) SetStatus(v int32) *MenuUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableStatus(v *int32) *MenuUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *MenuUpdate) AddStatus(v int32) *MenuUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// SetDomainID sets the "domain_id" field.
func (_u *MenuUpdate) SetDomainID(v uint32) *MenuUpdate {
	_u.mutation.ResetDomainID()
	_u.mutation.SetDomainID(v)
	return _u
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableDomainID(v *uint32) *MenuUpdate {
	if v != nil {
		_u.SetDomainID(*v)
	}
	return _u
}

// AddDomainID adds value to the "domain_id" field.
func (_u *MenuUpdate) AddDomainID(v int32) *MenuUpdate {
	_u.mutation.AddDomainID(v)
	return _u
}

// SetName sets the "name" field.
func (_u *MenuUpdate) SetName(v string) *MenuUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableName(v *string) *MenuUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *MenuUpdate) SetTitle(v string) *MenuUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableTitle(v *string) *MenuUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *MenuUpdate) SetParentID(v uint32) *MenuUpdate {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableParentID(v *uint32) *MenuUpdate {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *MenuUpdate) ClearParentID() *MenuUpdate {
	_u.mutation.ClearParentID()
	return _u
}

// SetType sets the "type" field.
func (_u *MenuUpdate) SetType(v int32) *MenuUpdate {
	_u.mutation.ResetType()
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableType(v *int32) *MenuUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// AddType adds value to the "type" field.
func (_u *MenuUpdate) AddType(v int32) *MenuUpdate {
	_u.mutation.AddType(v)
	return _u
}

// SetPath sets the "path" field.
func (_u *MenuUpdate) SetPath(v string) *MenuUpdate {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *MenuUpdate) SetNillablePath(v *string) *MenuUpdate {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// SetComponent sets the "component" field.
func (_u *MenuUpdate) SetComponent(v string) *MenuUpdate {
	_u.mutation.SetComponent(v)
	return _u
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableComponent(v *string) *MenuUpdate {
	if v != nil {
		_u.SetComponent(*v)
	}
	return _u
}

// SetIcon sets the "icon" field.
func (_u *MenuUpdate) SetIcon(v string) *MenuUpdate {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableIcon(v *string) *MenuUpdate {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// SetIsExt sets the "is_ext" field.
func (_u *MenuUpdate) SetIsExt(v bool) *MenuUpdate {
	_u.mutation.SetIsExt(v)
	return _u
}

// SetNillableIsExt sets the "is_ext" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableIsExt(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetIsExt(*v)
	}
	return _u
}

// SetExtURL sets the "ext_url" field.
func (_u *MenuUpdate) SetExtURL(v string) *MenuUpdate {
	_u.mutation.SetExtURL(v)
	return _u
}

// SetNillableExtURL sets the "ext_url" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableExtURL(v *string) *MenuUpdate {
	if v != nil {
		_u.SetExtURL(*v)
	}
	return _u
}

// SetPermissions sets the "permissions" field.
func (_u *MenuUpdate) SetPermissions(v []string) *MenuUpdate {
	_u.mutation.SetPermissions(v)
	return _u
}

// AppendPermissions appends value to the "permissions" field.
func (_u *MenuUpdate) AppendPermissions(v []string) *MenuUpdate {
	_u.mutation.AppendPermissions(v)
	return _u
}

// ClearPermissions clears the value of the "permissions" field.
func (_u *MenuUpdate) ClearPermissions() *MenuUpdate {
	_u.mutation.ClearPermissions()
	return _u
}

// SetRedirect sets the "redirect" field.
func (_u *MenuUpdate) SetRedirect(v string) *MenuUpdate {
	_u.mutation.SetRedirect(v)
	return _u
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableRedirect(v *string) *MenuUpdate {
	if v != nil {
		_u.SetRedirect(*v)
	}
	return _u
}

// SetCurrentActiveMenu sets the "current_active_menu" field.
func (_u *MenuUpdate) SetCurrentActiveMenu(v string) *MenuUpdate {
	_u.mutation.SetCurrentActiveMenu(v)
	return _u
}

// SetNillableCurrentActiveMenu sets the "current_active_menu" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableCurrentActiveMenu(v *string) *MenuUpdate {
	if v != nil {
		_u.SetCurrentActiveMenu(*v)
	}
	return _u
}

// SetKeepAlive sets the "keep_alive" field.
func (_u *MenuUpdate) SetKeepAlive(v bool) *MenuUpdate {
	_u.mutation.SetKeepAlive(v)
	return _u
}

// SetNillableKeepAlive sets the "keep_alive" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableKeepAlive(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetKeepAlive(*v)
	}
	return _u
}

// SetVisible sets the "visible" field.
func (_u *MenuUpdate) SetVisible(v bool) *MenuUpdate {
	_u.mutation.SetVisible(v)
	return _u
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableVisible(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetVisible(*v)
	}
	return _u
}

// SetHideTab sets the "hide_tab" field.
func (_u *MenuUpdate) SetHideTab(v bool) *MenuUpdate {
	_u.mutation.SetHideTab(v)
	return _u
}

// SetNillableHideTab sets the "hide_tab" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableHideTab(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetHideTab(*v)
	}
	return _u
}

// SetHideMenu sets the "hide_menu" field.
func (_u *MenuUpdate) SetHideMenu(v bool) *MenuUpdate {
	_u.mutation.SetHideMenu(v)
	return _u
}

// SetNillableHideMenu sets the "hide_menu" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableHideMenu(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetHideMenu(*v)
	}
	return _u
}

// SetHideBreadcrumb sets the "hide_breadcrumb" field.
func (_u *MenuUpdate) SetHideBreadcrumb(v bool) *MenuUpdate {
	_u.mutation.SetHideBreadcrumb(v)
	return _u
}

// SetNillableHideBreadcrumb sets the "hide_breadcrumb" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableHideBreadcrumb(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetHideBreadcrumb(*v)
	}
	return _u
}

// SetParent sets the "parent" edge to the Menu entity.
func (_u *MenuUpdate) SetParent(v *Menu) *MenuUpdate {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (_u *MenuUpdate) AddChildIDs(ids ...uint32) *MenuUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Menu entity.
func (_u *MenuUpdate) AddChildren(v ...*Menu) *MenuUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (_u *MenuUpdate) Mutation() *MenuMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the Menu entity.
func (_u *MenuUpdate) ClearParent() *MenuUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Menu entity.
func (_u *MenuUpdate) ClearChildren() *MenuUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Menu entities by IDs.
func (_u *MenuUpdate) RemoveChildIDs(ids ...uint32) *MenuUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Menu entities.
func (_u *MenuUpdate) RemoveChildren(v ...*Menu) *MenuUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MenuUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MenuUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MenuUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MenuUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MenuUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := menu.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MenuUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := menu.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Menu.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DomainID(); ok {
		if err := menu.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`ent: validator failed for field "Menu.domain_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := menu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Menu.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Title(); ok {
		if err := menu.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Menu.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Icon(); ok {
		if err := menu.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "Menu.icon": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ExtURL(); ok {
		if err := menu.ExtURLValidator(v); err != nil {
			return &ValidationError{Name: "ext_url", err: fmt.Errorf(`ent: validator failed for field "Menu.ext_url": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *MenuUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MenuUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *MenuUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(menu.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(menu.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(menu.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.DomainID(); ok {
		_spec.SetField(menu.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDomainID(); ok {
		_spec.AddField(menu.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(menu.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedType(); ok {
		_spec.AddField(menu.FieldType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsExt(); ok {
		_spec.SetField(menu.FieldIsExt, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ExtURL(); ok {
		_spec.SetField(menu.FieldExtURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Permissions(); ok {
		_spec.SetField(menu.FieldPermissions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedPermissions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, menu.FieldPermissions, value)
		})
	}
	if _u.mutation.PermissionsCleared() {
		_spec.ClearField(menu.FieldPermissions, field.TypeJSON)
	}
	if value, ok := _u.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
	}
	if value, ok := _u.mutation.CurrentActiveMenu(); ok {
		_spec.SetField(menu.FieldCurrentActiveMenu, field.TypeString, value)
	}
	if value, ok := _u.mutation.KeepAlive(); ok {
		_spec.SetField(menu.FieldKeepAlive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Visible(); ok {
		_spec.SetField(menu.FieldVisible, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideTab(); ok {
		_spec.SetField(menu.FieldHideTab, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideMenu(); ok {
		_spec.SetField(menu.FieldHideMenu, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideBreadcrumb(); ok {
		_spec.SetField(menu.FieldHideBreadcrumb, field.TypeBool, value)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MenuUpdateOne is the builder for updating a single Menu entity.
type MenuUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MenuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MenuUpdateOne) SetUpdatedAt(v time.Time) *MenuUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *MenuUpdateOne) SetDeletedAt(v time.Time) *MenuUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableDeletedAt(v *time.Time) *MenuUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *MenuUpdateOne) ClearDeletedAt() *MenuUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *MenuUpdateOne) SetStatus(v int32) *MenuUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableStatus(v *int32) *MenuUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *MenuUpdateOne) AddStatus(v int32) *MenuUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// SetDomainID sets the "domain_id" field.
func (_u *MenuUpdateOne) SetDomainID(v uint32) *MenuUpdateOne {
	_u.mutation.ResetDomainID()
	_u.mutation.SetDomainID(v)
	return _u
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableDomainID(v *uint32) *MenuUpdateOne {
	if v != nil {
		_u.SetDomainID(*v)
	}
	return _u
}

// AddDomainID adds value to the "domain_id" field.
func (_u *MenuUpdateOne) AddDomainID(v int32) *MenuUpdateOne {
	_u.mutation.AddDomainID(v)
	return _u
}

// SetName sets the "name" field.
func (_u *MenuUpdateOne) SetName(v string) *MenuUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableName(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *MenuUpdateOne) SetTitle(v string) *MenuUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableTitle(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *MenuUpdateOne) SetParentID(v uint32) *MenuUpdateOne {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableParentID(v *uint32) *MenuUpdateOne {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *MenuUpdateOne) ClearParentID() *MenuUpdateOne {
	_u.mutation.ClearParentID()
	return _u
}

// SetType sets the "type" field.
func (_u *MenuUpdateOne) SetType(v int32) *MenuUpdateOne {
	_u.mutation.ResetType()
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableType(v *int32) *MenuUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// AddType adds value to the "type" field.
func (_u *MenuUpdateOne) AddType(v int32) *MenuUpdateOne {
	_u.mutation.AddType(v)
	return _u
}

// SetPath sets the "path" field.
func (_u *MenuUpdateOne) SetPath(v string) *MenuUpdateOne {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillablePath(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// SetComponent sets the "component" field.
func (_u *MenuUpdateOne) SetComponent(v string) *MenuUpdateOne {
	_u.mutation.SetComponent(v)
	return _u
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableComponent(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetComponent(*v)
	}
	return _u
}

// SetIcon sets the "icon" field.
func (_u *MenuUpdateOne) SetIcon(v string) *MenuUpdateOne {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableIcon(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// SetIsExt sets the "is_ext" field.
func (_u *MenuUpdateOne) SetIsExt(v bool) *MenuUpdateOne {
	_u.mutation.SetIsExt(v)
	return _u
}

// SetNillableIsExt sets the "is_ext" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableIsExt(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetIsExt(*v)
	}
	return _u
}

// SetExtURL sets the "ext_url" field.
func (_u *MenuUpdateOne) SetExtURL(v string) *MenuUpdateOne {
	_u.mutation.SetExtURL(v)
	return _u
}

// SetNillableExtURL sets the "ext_url" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableExtURL(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetExtURL(*v)
	}
	return _u
}

// SetPermissions sets the "permissions" field.
func (_u *MenuUpdateOne) SetPermissions(v []string) *MenuUpdateOne {
	_u.mutation.SetPermissions(v)
	return _u
}

// AppendPermissions appends value to the "permissions" field.
func (_u *MenuUpdateOne) AppendPermissions(v []string) *MenuUpdateOne {
	_u.mutation.AppendPermissions(v)
	return _u
}

// ClearPermissions clears the value of the "permissions" field.
func (_u *MenuUpdateOne) ClearPermissions() *MenuUpdateOne {
	_u.mutation.ClearPermissions()
	return _u
}

// SetRedirect sets the "redirect" field.
func (_u *MenuUpdateOne) SetRedirect(v string) *MenuUpdateOne {
	_u.mutation.SetRedirect(v)
	return _u
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableRedirect(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetRedirect(*v)
	}
	return _u
}

// SetCurrentActiveMenu sets the "current_active_menu" field.
func (_u *MenuUpdateOne) SetCurrentActiveMenu(v string) *MenuUpdateOne {
	_u.mutation.SetCurrentActiveMenu(v)
	return _u
}

// SetNillableCurrentActiveMenu sets the "current_active_menu" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableCurrentActiveMenu(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetCurrentActiveMenu(*v)
	}
	return _u
}

// SetKeepAlive sets the "keep_alive" field.
func (_u *MenuUpdateOne) SetKeepAlive(v bool) *MenuUpdateOne {
	_u.mutation.SetKeepAlive(v)
	return _u
}

// SetNillableKeepAlive sets the "keep_alive" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableKeepAlive(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetKeepAlive(*v)
	}
	return _u
}

// SetVisible sets the "visible" field.
func (_u *MenuUpdateOne) SetVisible(v bool) *MenuUpdateOne {
	_u.mutation.SetVisible(v)
	return _u
}

// SetNillableVisible sets the "visible" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableVisible(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetVisible(*v)
	}
	return _u
}

// SetHideTab sets the "hide_tab" field.
func (_u *MenuUpdateOne) SetHideTab(v bool) *MenuUpdateOne {
	_u.mutation.SetHideTab(v)
	return _u
}

// SetNillableHideTab sets the "hide_tab" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableHideTab(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetHideTab(*v)
	}
	return _u
}

// SetHideMenu sets the "hide_menu" field.
func (_u *MenuUpdateOne) SetHideMenu(v bool) *MenuUpdateOne {
	_u.mutation.SetHideMenu(v)
	return _u
}

// SetNillableHideMenu sets the "hide_menu" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableHideMenu(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetHideMenu(*v)
	}
	return _u
}

// SetHideBreadcrumb sets the "hide_breadcrumb" field.
func (_u *MenuUpdateOne) SetHideBreadcrumb(v bool) *MenuUpdateOne {
	_u.mutation.SetHideBreadcrumb(v)
	return _u
}

// SetNillableHideBreadcrumb sets the "hide_breadcrumb" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableHideBreadcrumb(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetHideBreadcrumb(*v)
	}
	return _u
}

// SetParent sets the "parent" edge to the Menu entity.
func (_u *MenuUpdateOne) SetParent(v *Menu) *MenuUpdateOne {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (_u *MenuUpdateOne) AddChildIDs(ids ...uint32) *MenuUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Menu entity.
func (_u *MenuUpdateOne) AddChildren(v ...*Menu) *MenuUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (_u *MenuUpdateOne) Mutation() *MenuMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the Menu entity.
func (_u *MenuUpdateOne) ClearParent() *MenuUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Menu entity.
func (_u *MenuUpdateOne) ClearChildren() *MenuUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Menu entities by IDs.
func (_u *MenuUpdateOne) RemoveChildIDs(ids ...uint32) *MenuUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Menu entities.
func (_u *MenuUpdateOne) RemoveChildren(v ...*Menu) *MenuUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the MenuUpdate builder.
func (_u *MenuUpdateOne) Where(ps ...predicate.Menu) *MenuUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MenuUpdateOne) Select(field string, fields ...string) *MenuUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Menu entity.
func (_u *MenuUpdateOne) Save(ctx context.Context) (*Menu, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MenuUpdateOne) SaveX(ctx context.Context) *Menu {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MenuUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MenuUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MenuUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := menu.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MenuUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := menu.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Menu.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DomainID(); ok {
		if err := menu.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`ent: validator failed for field "Menu.domain_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := menu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Menu.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Title(); ok {
		if err := menu.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Menu.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Icon(); ok {
		if err := menu.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "Menu.icon": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ExtURL(); ok {
		if err := menu.ExtURLValidator(v); err != nil {
			return &ValidationError{Name: "ext_url", err: fmt.Errorf(`ent: validator failed for field "Menu.ext_url": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *MenuUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MenuUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *MenuUpdateOne) sqlSave(ctx context.Context) (_node *Menu, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Menu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menu.FieldID)
		for _, f := range fields {
			if !menu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(menu.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(menu.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(menu.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.DomainID(); ok {
		_spec.SetField(menu.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDomainID(); ok {
		_spec.AddField(menu.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(menu.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedType(); ok {
		_spec.AddField(menu.FieldType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsExt(); ok {
		_spec.SetField(menu.FieldIsExt, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ExtURL(); ok {
		_spec.SetField(menu.FieldExtURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Permissions(); ok {
		_spec.SetField(menu.FieldPermissions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedPermissions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, menu.FieldPermissions, value)
		})
	}
	if _u.mutation.PermissionsCleared() {
		_spec.ClearField(menu.FieldPermissions, field.TypeJSON)
	}
	if value, ok := _u.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
	}
	if value, ok := _u.mutation.CurrentActiveMenu(); ok {
		_spec.SetField(menu.FieldCurrentActiveMenu, field.TypeString, value)
	}
	if value, ok := _u.mutation.KeepAlive(); ok {
		_spec.SetField(menu.FieldKeepAlive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Visible(); ok {
		_spec.SetField(menu.FieldVisible, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideTab(); ok {
		_spec.SetField(menu.FieldHideTab, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideMenu(); ok {
		_spec.SetField(menu.FieldHideMenu, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideBreadcrumb(); ok {
		_spec.SetField(menu.FieldHideBreadcrumb, field.TypeBool, value)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Menu{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
