// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend-service/app/avmc/admin/internal/data/ent/dept"
	"backend-service/app/avmc/admin/internal/data/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// DeptUpdate is the builder for updating Dept entities.
type DeptUpdate struct {
	config
	hooks     []Hook
	mutation  *DeptMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DeptUpdate builder.
func (_u *DeptUpdate) Where(ps ...predicate.Dept) *DeptUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DeptUpdate) SetUpdatedAt(v time.Time) *DeptUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *DeptUpdate) SetDeletedAt(v time.Time) *DeptUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *DeptUpdate) SetNillableDeletedAt(v *time.Time) *DeptUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *DeptUpdate) ClearDeletedAt() *DeptUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *DeptUpdate) SetStatus(v int32) *DeptUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DeptUpdate) SetNillableStatus(v *int32) *DeptUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *DeptUpdate) AddStatus(v int32) *DeptUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// SetDomainID sets the "domain_id" field.
func (_u *DeptUpdate) SetDomainID(v uint32) *DeptUpdate {
	_u.mutation.ResetDomainID()
	_u.mutation.SetDomainID(v)
	return _u
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (_u *DeptUpdate) SetNillableDomainID(v *uint32) *DeptUpdate {
	if v != nil {
		_u.SetDomainID(*v)
	}
	return _u
}

// AddDomainID adds value to the "domain_id" field.
func (_u *DeptUpdate) AddDomainID(v int32) *DeptUpdate {
	_u.mutation.AddDomainID(v)
	return _u
}

// SetName sets the "name" field.
func (_u *DeptUpdate) SetName(v string) *DeptUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *DeptUpdate) SetNillableName(v *string) *DeptUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *DeptUpdate) SetParentID(v uint32) *DeptUpdate {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *DeptUpdate) SetNillableParentID(v *uint32) *DeptUpdate {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *DeptUpdate) ClearParentID() *DeptUpdate {
	_u.mutation.ClearParentID()
	return _u
}

// SetAncestors sets the "ancestors" field.
func (_u *DeptUpdate) SetAncestors(v []int) *DeptUpdate {
	_u.mutation.SetAncestors(v)
	return _u
}

// AppendAncestors appends value to the "ancestors" field.
func (_u *DeptUpdate) AppendAncestors(v []int) *DeptUpdate {
	_u.mutation.AppendAncestors(v)
	return _u
}

// ClearAncestors clears the value of the "ancestors" field.
func (_u *DeptUpdate) ClearAncestors() *DeptUpdate {
	_u.mutation.ClearAncestors()
	return _u
}

// SetParent sets the "parent" edge to the Dept entity.
func (_u *DeptUpdate) SetParent(v *Dept) *DeptUpdate {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Dept entity by IDs.
func (_u *DeptUpdate) AddChildIDs(ids ...uint32) *DeptUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Dept entity.
func (_u *DeptUpdate) AddChildren(v ...*Dept) *DeptUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the DeptMutation object of the builder.
func (_u *DeptUpdate) Mutation() *DeptMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the Dept entity.
func (_u *DeptUpdate) ClearParent() *DeptUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Dept entity.
func (_u *DeptUpdate) ClearChildren() *DeptUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Dept entities by IDs.
func (_u *DeptUpdate) RemoveChildIDs(ids ...uint32) *DeptUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Dept entities.
func (_u *DeptUpdate) RemoveChildren(v ...*Dept) *DeptUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DeptUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DeptUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DeptUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DeptUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DeptUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := dept.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DeptUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := dept.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Dept.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DomainID(); ok {
		if err := dept.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`ent: validator failed for field "Dept.domain_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := dept.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Dept.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *DeptUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeptUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *DeptUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dept.Table, dept.Columns, sqlgraph.NewFieldSpec(dept.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dept.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(dept.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(dept.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(dept.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(dept.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.DomainID(); ok {
		_spec.SetField(dept.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDomainID(); ok {
		_spec.AddField(dept.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(dept.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Ancestors(); ok {
		_spec.SetField(dept.FieldAncestors, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAncestors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dept.FieldAncestors, value)
		})
	}
	if _u.mutation.AncestorsCleared() {
		_spec.ClearField(dept.FieldAncestors, field.TypeJSON)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dept.ParentTable,
			Columns: []string{dept.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dept.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dept.ParentTable,
			Columns: []string{dept.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dept.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dept.ChildrenTable,
			Columns: []string{dept.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dept.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dept.ChildrenTable,
			Columns: []string{dept.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dept.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dept.ChildrenTable,
			Columns: []string{dept.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dept.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dept.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DeptUpdateOne is the builder for updating a single Dept entity.
type DeptUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DeptMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DeptUpdateOne) SetUpdatedAt(v time.Time) *DeptUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *DeptUpdateOne) SetDeletedAt(v time.Time) *DeptUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *DeptUpdateOne) SetNillableDeletedAt(v *time.Time) *DeptUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *DeptUpdateOne) ClearDeletedAt() *DeptUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *DeptUpdateOne) SetStatus(v int32) *DeptUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *DeptUpdateOne) SetNillableStatus(v *int32) *DeptUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *DeptUpdateOne) AddStatus(v int32) *DeptUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// SetDomainID sets the "domain_id" field.
func (_u *DeptUpdateOne) SetDomainID(v uint32) *DeptUpdateOne {
	_u.mutation.ResetDomainID()
	_u.mutation.SetDomainID(v)
	return _u
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (_u *DeptUpdateOne) SetNillableDomainID(v *uint32) *DeptUpdateOne {
	if v != nil {
		_u.SetDomainID(*v)
	}
	return _u
}

// AddDomainID adds value to the "domain_id" field.
func (_u *DeptUpdateOne) AddDomainID(v int32) *DeptUpdateOne {
	_u.mutation.AddDomainID(v)
	return _u
}

// SetName sets the "name" field.
func (_u *DeptUpdateOne) SetName(v string) *DeptUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *DeptUpdateOne) SetNillableName(v *string) *DeptUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *DeptUpdateOne) SetParentID(v uint32) *DeptUpdateOne {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *DeptUpdateOne) SetNillableParentID(v *uint32) *DeptUpdateOne {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *DeptUpdateOne) ClearParentID() *DeptUpdateOne {
	_u.mutation.ClearParentID()
	return _u
}

// SetAncestors sets the "ancestors" field.
func (_u *DeptUpdateOne) SetAncestors(v []int) *DeptUpdateOne {
	_u.mutation.SetAncestors(v)
	return _u
}

// AppendAncestors appends value to the "ancestors" field.
func (_u *DeptUpdateOne) AppendAncestors(v []int) *DeptUpdateOne {
	_u.mutation.AppendAncestors(v)
	return _u
}

// ClearAncestors clears the value of the "ancestors" field.
func (_u *DeptUpdateOne) ClearAncestors() *DeptUpdateOne {
	_u.mutation.ClearAncestors()
	return _u
}

// SetParent sets the "parent" edge to the Dept entity.
func (_u *DeptUpdateOne) SetParent(v *Dept) *DeptUpdateOne {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Dept entity by IDs.
func (_u *DeptUpdateOne) AddChildIDs(ids ...uint32) *DeptUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Dept entity.
func (_u *DeptUpdateOne) AddChildren(v ...*Dept) *DeptUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the DeptMutation object of the builder.
func (_u *DeptUpdateOne) Mutation() *DeptMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the Dept entity.
func (_u *DeptUpdateOne) ClearParent() *DeptUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Dept entity.
func (_u *DeptUpdateOne) ClearChildren() *DeptUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Dept entities by IDs.
func (_u *DeptUpdateOne) RemoveChildIDs(ids ...uint32) *DeptUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Dept entities.
func (_u *DeptUpdateOne) RemoveChildren(v ...*Dept) *DeptUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the DeptUpdate builder.
func (_u *DeptUpdateOne) Where(ps ...predicate.Dept) *DeptUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DeptUpdateOne) Select(field string, fields ...string) *DeptUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Dept entity.
func (_u *DeptUpdateOne) Save(ctx context.Context) (*Dept, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DeptUpdateOne) SaveX(ctx context.Context) *Dept {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DeptUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DeptUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DeptUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := dept.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DeptUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := dept.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Dept.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DomainID(); ok {
		if err := dept.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`ent: validator failed for field "Dept.domain_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := dept.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Dept.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *DeptUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeptUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *DeptUpdateOne) sqlSave(ctx context.Context) (_node *Dept, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dept.Table, dept.Columns, sqlgraph.NewFieldSpec(dept.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dept.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dept.FieldID)
		for _, f := range fields {
			if !dept.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dept.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(dept.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(dept.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(dept.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(dept.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(dept.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.DomainID(); ok {
		_spec.SetField(dept.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDomainID(); ok {
		_spec.AddField(dept.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(dept.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Ancestors(); ok {
		_spec.SetField(dept.FieldAncestors, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAncestors(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, dept.FieldAncestors, value)
		})
	}
	if _u.mutation.AncestorsCleared() {
		_spec.ClearField(dept.FieldAncestors, field.TypeJSON)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dept.ParentTable,
			Columns: []string{dept.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dept.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dept.ParentTable,
			Columns: []string{dept.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dept.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dept.ChildrenTable,
			Columns: []string{dept.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dept.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dept.ChildrenTable,
			Columns: []string{dept.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dept.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dept.ChildrenTable,
			Columns: []string{dept.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dept.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Dept{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dept.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
