// Code generated by ent, DO NOT EDIT.

package menu

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the menu type in the database.
	Label = "menu"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldComponent holds the string denoting the component field in the database.
	FieldComponent = "component"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldRedirect holds the string denoting the redirect field in the database.
	FieldRedirect = "redirect"
	// FieldAuthCode holds the string denoting the auth_code field in the database.
	FieldAuthCode = "auth_code"
	// FieldActiveIcon holds the string denoting the active_icon field in the database.
	FieldActiveIcon = "active_icon"
	// FieldActivePath holds the string denoting the active_path field in the database.
	FieldActivePath = "active_path"
	// FieldAffixTab holds the string denoting the affix_tab field in the database.
	FieldAffixTab = "affix_tab"
	// FieldAffixTabOrder holds the string denoting the affix_tab_order field in the database.
	FieldAffixTabOrder = "affix_tab_order"
	// FieldBadge holds the string denoting the badge field in the database.
	FieldBadge = "badge"
	// FieldBadgeType holds the string denoting the badge_type field in the database.
	FieldBadgeType = "badge_type"
	// FieldBadgeVariants holds the string denoting the badge_variants field in the database.
	FieldBadgeVariants = "badge_variants"
	// FieldHideChildrenInMenu holds the string denoting the hide_children_in_menu field in the database.
	FieldHideChildrenInMenu = "hide_children_in_menu"
	// FieldHideInBreadcrumb holds the string denoting the hide_in_breadcrumb field in the database.
	FieldHideInBreadcrumb = "hide_in_breadcrumb"
	// FieldHideInMenu holds the string denoting the hide_in_menu field in the database.
	FieldHideInMenu = "hide_in_menu"
	// FieldHideInTab holds the string denoting the hide_in_tab field in the database.
	FieldHideInTab = "hide_in_tab"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// FieldIframeSrc holds the string denoting the iframe_src field in the database.
	FieldIframeSrc = "iframe_src"
	// FieldKeepAlive holds the string denoting the keep_alive field in the database.
	FieldKeepAlive = "keep_alive"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// FieldMaxNumOfOpenTab holds the string denoting the max_num_of_open_tab field in the database.
	FieldMaxNumOfOpenTab = "max_num_of_open_tab"
	// FieldNoBasicLayout holds the string denoting the no_basic_layout field in the database.
	FieldNoBasicLayout = "no_basic_layout"
	// FieldOpenInNewWindow holds the string denoting the open_in_new_window field in the database.
	FieldOpenInNewWindow = "open_in_new_window"
	// FieldSort holds the string denoting the sort field in the database.
	FieldSort = "sort"
	// FieldQuery holds the string denoting the query field in the database.
	FieldQuery = "query"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// Table holds the table name of the menu in the database.
	Table = "menus"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "menus"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_id"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "menus"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "parent_id"
)

// Columns holds all SQL columns for menu fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldPath,
	FieldType,
	FieldComponent,
	FieldParentID,
	FieldRedirect,
	FieldAuthCode,
	FieldActiveIcon,
	FieldActivePath,
	FieldAffixTab,
	FieldAffixTabOrder,
	FieldBadge,
	FieldBadgeType,
	FieldBadgeVariants,
	FieldHideChildrenInMenu,
	FieldHideInBreadcrumb,
	FieldHideInMenu,
	FieldHideInTab,
	FieldIcon,
	FieldIframeSrc,
	FieldKeepAlive,
	FieldLink,
	FieldMaxNumOfOpenTab,
	FieldNoBasicLayout,
	FieldOpenInNewWindow,
	FieldSort,
	FieldQuery,
	FieldTitle,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "backend-service/app/avmc/admin/internal/data/ent/gen/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int32
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(int32) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultPath holds the default value on creation for the "path" field.
	DefaultPath string
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType int32
	// DefaultComponent holds the default value on creation for the "component" field.
	DefaultComponent string
	// DefaultParentID holds the default value on creation for the "parent_id" field.
	DefaultParentID uint32
	// DefaultRedirect holds the default value on creation for the "redirect" field.
	DefaultRedirect string
	// DefaultAuthCode holds the default value on creation for the "auth_code" field.
	DefaultAuthCode string
	// DefaultActiveIcon holds the default value on creation for the "active_icon" field.
	DefaultActiveIcon string
	// DefaultActivePath holds the default value on creation for the "active_path" field.
	DefaultActivePath string
	// DefaultAffixTab holds the default value on creation for the "affix_tab" field.
	DefaultAffixTab bool
	// DefaultAffixTabOrder holds the default value on creation for the "affix_tab_order" field.
	DefaultAffixTabOrder int32
	// DefaultBadge holds the default value on creation for the "badge" field.
	DefaultBadge string
	// DefaultBadgeType holds the default value on creation for the "badge_type" field.
	DefaultBadgeType int32
	// DefaultBadgeVariants holds the default value on creation for the "badge_variants" field.
	DefaultBadgeVariants int32
	// DefaultHideChildrenInMenu holds the default value on creation for the "hide_children_in_menu" field.
	DefaultHideChildrenInMenu bool
	// DefaultHideInBreadcrumb holds the default value on creation for the "hide_in_breadcrumb" field.
	DefaultHideInBreadcrumb bool
	// DefaultHideInMenu holds the default value on creation for the "hide_in_menu" field.
	DefaultHideInMenu bool
	// DefaultHideInTab holds the default value on creation for the "hide_in_tab" field.
	DefaultHideInTab bool
	// DefaultIcon holds the default value on creation for the "icon" field.
	DefaultIcon string
	// IconValidator is a validator for the "icon" field. It is called by the builders before save.
	IconValidator func(string) error
	// DefaultIframeSrc holds the default value on creation for the "iframe_src" field.
	DefaultIframeSrc string
	// DefaultKeepAlive holds the default value on creation for the "keep_alive" field.
	DefaultKeepAlive bool
	// DefaultLink holds the default value on creation for the "link" field.
	DefaultLink string
	// DefaultMaxNumOfOpenTab holds the default value on creation for the "max_num_of_open_tab" field.
	DefaultMaxNumOfOpenTab int32
	// DefaultNoBasicLayout holds the default value on creation for the "no_basic_layout" field.
	DefaultNoBasicLayout bool
	// DefaultOpenInNewWindow holds the default value on creation for the "open_in_new_window" field.
	DefaultOpenInNewWindow bool
	// DefaultSort holds the default value on creation for the "sort" field.
	DefaultSort int32
	// DefaultQuery holds the default value on creation for the "query" field.
	DefaultQuery string
	// DefaultTitle holds the default value on creation for the "title" field.
	DefaultTitle string
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(uint32) error
)

// OrderOption defines the ordering options for the Menu queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByComponent orders the results by the component field.
func ByComponent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComponent, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByRedirect orders the results by the redirect field.
func ByRedirect(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRedirect, opts...).ToFunc()
}

// ByAuthCode orders the results by the auth_code field.
func ByAuthCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthCode, opts...).ToFunc()
}

// ByActiveIcon orders the results by the active_icon field.
func ByActiveIcon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActiveIcon, opts...).ToFunc()
}

// ByActivePath orders the results by the active_path field.
func ByActivePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivePath, opts...).ToFunc()
}

// ByAffixTab orders the results by the affix_tab field.
func ByAffixTab(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAffixTab, opts...).ToFunc()
}

// ByAffixTabOrder orders the results by the affix_tab_order field.
func ByAffixTabOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAffixTabOrder, opts...).ToFunc()
}

// ByBadge orders the results by the badge field.
func ByBadge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBadge, opts...).ToFunc()
}

// ByBadgeType orders the results by the badge_type field.
func ByBadgeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBadgeType, opts...).ToFunc()
}

// ByBadgeVariants orders the results by the badge_variants field.
func ByBadgeVariants(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBadgeVariants, opts...).ToFunc()
}

// ByHideChildrenInMenu orders the results by the hide_children_in_menu field.
func ByHideChildrenInMenu(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHideChildrenInMenu, opts...).ToFunc()
}

// ByHideInBreadcrumb orders the results by the hide_in_breadcrumb field.
func ByHideInBreadcrumb(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHideInBreadcrumb, opts...).ToFunc()
}

// ByHideInMenu orders the results by the hide_in_menu field.
func ByHideInMenu(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHideInMenu, opts...).ToFunc()
}

// ByHideInTab orders the results by the hide_in_tab field.
func ByHideInTab(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHideInTab, opts...).ToFunc()
}

// ByIcon orders the results by the icon field.
func ByIcon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIcon, opts...).ToFunc()
}

// ByIframeSrc orders the results by the iframe_src field.
func ByIframeSrc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIframeSrc, opts...).ToFunc()
}

// ByKeepAlive orders the results by the keep_alive field.
func ByKeepAlive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeepAlive, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// ByMaxNumOfOpenTab orders the results by the max_num_of_open_tab field.
func ByMaxNumOfOpenTab(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxNumOfOpenTab, opts...).ToFunc()
}

// ByNoBasicLayout orders the results by the no_basic_layout field.
func ByNoBasicLayout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNoBasicLayout, opts...).ToFunc()
}

// ByOpenInNewWindow orders the results by the open_in_new_window field.
func ByOpenInNewWindow(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpenInNewWindow, opts...).ToFunc()
}

// BySort orders the results by the sort field.
func BySort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSort, opts...).ToFunc()
}

// ByQuery orders the results by the query field.
func ByQuery(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuery, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildrenCount orders the results by children count.
func ByChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildrenStep(), opts...)
	}
}

// ByChildren orders the results by children terms.
func ByChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
	)
}
