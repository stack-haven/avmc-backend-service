// Code generated by ent, DO NOT EDIT.

package gen

import (
	"backend-service/app/avmc/admin/internal/data/ent/gen/post"
	"backend-service/app/avmc/admin/internal/data/ent/gen/predicate"
	"backend-service/app/avmc/admin/internal/data/ent/gen/role"
	"backend-service/app/avmc/admin/internal/data/ent/gen/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdate) SetUpdatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *UserUpdate) SetDeletedAt(v time.Time) *UserUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableDeletedAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *UserUpdate) ClearDeletedAt() *UserUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *UserUpdate) SetStatus(v int32) *UserUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *UserUpdate) SetNillableStatus(v *int32) *UserUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *UserUpdate) AddStatus(v int32) *UserUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// SetDomainID sets the "domain_id" field.
func (_u *UserUpdate) SetDomainID(v uint32) *UserUpdate {
	_u.mutation.ResetDomainID()
	_u.mutation.SetDomainID(v)
	return _u
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (_u *UserUpdate) SetNillableDomainID(v *uint32) *UserUpdate {
	if v != nil {
		_u.SetDomainID(*v)
	}
	return _u
}

// AddDomainID adds value to the "domain_id" field.
func (_u *UserUpdate) AddDomainID(v int32) *UserUpdate {
	_u.mutation.AddDomainID(v)
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdate) SetName(v string) *UserUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableName(v *string) *UserUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *UserUpdate) SetPassword(v string) *UserUpdate {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePassword(v *string) *UserUpdate {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// SetRealname sets the "realname" field.
func (_u *UserUpdate) SetRealname(v string) *UserUpdate {
	_u.mutation.SetRealname(v)
	return _u
}

// SetNillableRealname sets the "realname" field if the given value is not nil.
func (_u *UserUpdate) SetNillableRealname(v *string) *UserUpdate {
	if v != nil {
		_u.SetRealname(*v)
	}
	return _u
}

// ClearRealname clears the value of the "realname" field.
func (_u *UserUpdate) ClearRealname() *UserUpdate {
	_u.mutation.ClearRealname()
	return _u
}

// SetNickname sets the "nickname" field.
func (_u *UserUpdate) SetNickname(v string) *UserUpdate {
	_u.mutation.SetNickname(v)
	return _u
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (_u *UserUpdate) SetNillableNickname(v *string) *UserUpdate {
	if v != nil {
		_u.SetNickname(*v)
	}
	return _u
}

// ClearNickname clears the value of the "nickname" field.
func (_u *UserUpdate) ClearNickname() *UserUpdate {
	_u.mutation.ClearNickname()
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *UserUpdate) ClearEmail() *UserUpdate {
	_u.mutation.ClearEmail()
	return _u
}

// SetPhone sets the "phone" field.
func (_u *UserUpdate) SetPhone(v string) *UserUpdate {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *UserUpdate) SetNillablePhone(v *string) *UserUpdate {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// ClearPhone clears the value of the "phone" field.
func (_u *UserUpdate) ClearPhone() *UserUpdate {
	_u.mutation.ClearPhone()
	return _u
}

// SetAvatar sets the "avatar" field.
func (_u *UserUpdate) SetAvatar(v string) *UserUpdate {
	_u.mutation.SetAvatar(v)
	return _u
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAvatar(v *string) *UserUpdate {
	if v != nil {
		_u.SetAvatar(*v)
	}
	return _u
}

// ClearAvatar clears the value of the "avatar" field.
func (_u *UserUpdate) ClearAvatar() *UserUpdate {
	_u.mutation.ClearAvatar()
	return _u
}

// SetBirthday sets the "birthday" field.
func (_u *UserUpdate) SetBirthday(v time.Time) *UserUpdate {
	_u.mutation.SetBirthday(v)
	return _u
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (_u *UserUpdate) SetNillableBirthday(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetBirthday(*v)
	}
	return _u
}

// ClearBirthday clears the value of the "birthday" field.
func (_u *UserUpdate) ClearBirthday() *UserUpdate {
	_u.mutation.ClearBirthday()
	return _u
}

// SetGender sets the "gender" field.
func (_u *UserUpdate) SetGender(v int32) *UserUpdate {
	_u.mutation.ResetGender()
	_u.mutation.SetGender(v)
	return _u
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (_u *UserUpdate) SetNillableGender(v *int32) *UserUpdate {
	if v != nil {
		_u.SetGender(*v)
	}
	return _u
}

// AddGender adds value to the "gender" field.
func (_u *UserUpdate) AddGender(v int32) *UserUpdate {
	_u.mutation.AddGender(v)
	return _u
}

// SetAge sets the "age" field.
func (_u *UserUpdate) SetAge(v int) *UserUpdate {
	_u.mutation.ResetAge()
	_u.mutation.SetAge(v)
	return _u
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAge(v *int) *UserUpdate {
	if v != nil {
		_u.SetAge(*v)
	}
	return _u
}

// AddAge adds value to the "age" field.
func (_u *UserUpdate) AddAge(v int) *UserUpdate {
	_u.mutation.AddAge(v)
	return _u
}

// ClearAge clears the value of the "age" field.
func (_u *UserUpdate) ClearAge() *UserUpdate {
	_u.mutation.ClearAge()
	return _u
}

// SetLastLoginAt sets the "last_login_at" field.
func (_u *UserUpdate) SetLastLoginAt(v time.Time) *UserUpdate {
	_u.mutation.SetLastLoginAt(v)
	return _u
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastLoginAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetLastLoginAt(*v)
	}
	return _u
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (_u *UserUpdate) ClearLastLoginAt() *UserUpdate {
	_u.mutation.ClearLastLoginAt()
	return _u
}

// SetLastLoginIP sets the "last_login_ip" field.
func (_u *UserUpdate) SetLastLoginIP(v string) *UserUpdate {
	_u.mutation.SetLastLoginIP(v)
	return _u
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastLoginIP(v *string) *UserUpdate {
	if v != nil {
		_u.SetLastLoginIP(*v)
	}
	return _u
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (_u *UserUpdate) ClearLastLoginIP() *UserUpdate {
	_u.mutation.ClearLastLoginIP()
	return _u
}

// SetLoginCount sets the "login_count" field.
func (_u *UserUpdate) SetLoginCount(v int) *UserUpdate {
	_u.mutation.ResetLoginCount()
	_u.mutation.SetLoginCount(v)
	return _u
}

// SetNillableLoginCount sets the "login_count" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLoginCount(v *int) *UserUpdate {
	if v != nil {
		_u.SetLoginCount(*v)
	}
	return _u
}

// AddLoginCount adds value to the "login_count" field.
func (_u *UserUpdate) AddLoginCount(v int) *UserUpdate {
	_u.mutation.AddLoginCount(v)
	return _u
}

// SetSettings sets the "settings" field.
func (_u *UserUpdate) SetSettings(v []string) *UserUpdate {
	_u.mutation.SetSettings(v)
	return _u
}

// AppendSettings appends value to the "settings" field.
func (_u *UserUpdate) AppendSettings(v []string) *UserUpdate {
	_u.mutation.AppendSettings(v)
	return _u
}

// ClearSettings clears the value of the "settings" field.
func (_u *UserUpdate) ClearSettings() *UserUpdate {
	_u.mutation.ClearSettings()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *UserUpdate) SetMetadata(v []string) *UserUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// AppendMetadata appends value to the "metadata" field.
func (_u *UserUpdate) AppendMetadata(v []string) *UserUpdate {
	_u.mutation.AppendMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *UserUpdate) ClearMetadata() *UserUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetDescription sets the "description" field.
func (_u *UserUpdate) SetDescription(v string) *UserUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *UserUpdate) SetNillableDescription(v *string) *UserUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *UserUpdate) ClearDescription() *UserUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (_u *UserUpdate) AddRoleIDs(ids ...uint32) *UserUpdate {
	_u.mutation.AddRoleIDs(ids...)
	return _u
}

// AddRoles adds the "roles" edges to the Role entity.
func (_u *UserUpdate) AddRoles(v ...*Role) *UserUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRoleIDs(ids...)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (_u *UserUpdate) AddPostIDs(ids ...uint32) *UserUpdate {
	_u.mutation.AddPostIDs(ids...)
	return _u
}

// AddPosts adds the "posts" edges to the Post entity.
func (_u *UserUpdate) AddPosts(v ...*Post) *UserUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPostIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (_u *UserUpdate) ClearRoles() *UserUpdate {
	_u.mutation.ClearRoles()
	return _u
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (_u *UserUpdate) RemoveRoleIDs(ids ...uint32) *UserUpdate {
	_u.mutation.RemoveRoleIDs(ids...)
	return _u
}

// RemoveRoles removes "roles" edges to Role entities.
func (_u *UserUpdate) RemoveRoles(v ...*Role) *UserUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRoleIDs(ids...)
}

// ClearPosts clears all "posts" edges to the Post entity.
func (_u *UserUpdate) ClearPosts() *UserUpdate {
	_u.mutation.ClearPosts()
	return _u
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (_u *UserUpdate) RemovePostIDs(ids ...uint32) *UserUpdate {
	_u.mutation.RemovePostIDs(ids...)
	return _u
}

// RemovePosts removes "posts" edges to Post entities.
func (_u *UserUpdate) RemovePosts(v ...*Post) *UserUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`gen: validator failed for field "User.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DomainID(); ok {
		if err := user.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`gen: validator failed for field "User.domain_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`gen: validator failed for field "User.password": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Realname(); ok {
		if err := user.RealnameValidator(v); err != nil {
			return &ValidationError{Name: "realname", err: fmt.Errorf(`gen: validator failed for field "User.realname": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Nickname(); ok {
		if err := user.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`gen: validator failed for field "User.nickname": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`gen: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`gen: validator failed for field "User.phone": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Avatar(); ok {
		if err := user.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`gen: validator failed for field "User.avatar": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`gen: validator failed for field "User.gender": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Age(); ok {
		if err := user.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`gen: validator failed for field "User.age": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LastLoginIP(); ok {
		if err := user.LastLoginIPValidator(v); err != nil {
			return &ValidationError{Name: "last_login_ip", err: fmt.Errorf(`gen: validator failed for field "User.last_login_ip": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := user.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`gen: validator failed for field "User.description": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(user.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.DomainID(); ok {
		_spec.SetField(user.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDomainID(); ok {
		_spec.AddField(user.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.Realname(); ok {
		_spec.SetField(user.FieldRealname, field.TypeString, value)
	}
	if _u.mutation.RealnameCleared() {
		_spec.ClearField(user.FieldRealname, field.TypeString)
	}
	if value, ok := _u.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if _u.mutation.NicknameCleared() {
		_spec.ClearField(user.FieldNickname, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if _u.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := _u.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if _u.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeString)
	}
	if value, ok := _u.mutation.Birthday(); ok {
		_spec.SetField(user.FieldBirthday, field.TypeTime, value)
	}
	if _u.mutation.BirthdayCleared() {
		_spec.ClearField(user.FieldBirthday, field.TypeTime)
	}
	if value, ok := _u.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedGender(); ok {
		_spec.AddField(user.FieldGender, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAge(); ok {
		_spec.AddField(user.FieldAge, field.TypeInt, value)
	}
	if _u.mutation.AgeCleared() {
		_spec.ClearField(user.FieldAge, field.TypeInt)
	}
	if value, ok := _u.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if _u.mutation.LastLoginAtCleared() {
		_spec.ClearField(user.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
	}
	if _u.mutation.LastLoginIPCleared() {
		_spec.ClearField(user.FieldLastLoginIP, field.TypeString)
	}
	if value, ok := _u.mutation.LoginCount(); ok {
		_spec.SetField(user.FieldLoginCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLoginCount(); ok {
		_spec.AddField(user.FieldLoginCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Settings(); ok {
		_spec.SetField(user.FieldSettings, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedSettings(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldSettings, value)
		})
	}
	if _u.mutation.SettingsCleared() {
		_spec.ClearField(user.FieldSettings, field.TypeJSON)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(user.FieldMetadata, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMetadata(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldMetadata, value)
		})
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(user.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(user.FieldDescription, field.TypeString)
	}
	if _u.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRolesIDs(); len(nodes) > 0 && !_u.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPostsIDs(); len(nodes) > 0 && !_u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdateOne) SetUpdatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *UserUpdateOne) SetDeletedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableDeletedAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *UserUpdateOne) SetStatus(v int32) *UserUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableStatus(v *int32) *UserUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *UserUpdateOne) AddStatus(v int32) *UserUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// SetDomainID sets the "domain_id" field.
func (_u *UserUpdateOne) SetDomainID(v uint32) *UserUpdateOne {
	_u.mutation.ResetDomainID()
	_u.mutation.SetDomainID(v)
	return _u
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableDomainID(v *uint32) *UserUpdateOne {
	if v != nil {
		_u.SetDomainID(*v)
	}
	return _u
}

// AddDomainID adds value to the "domain_id" field.
func (_u *UserUpdateOne) AddDomainID(v int32) *UserUpdateOne {
	_u.mutation.AddDomainID(v)
	return _u
}

// SetName sets the "name" field.
func (_u *UserUpdateOne) SetName(v string) *UserUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetPassword sets the "password" field.
func (_u *UserUpdateOne) SetPassword(v string) *UserUpdateOne {
	_u.mutation.SetPassword(v)
	return _u
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePassword(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPassword(*v)
	}
	return _u
}

// SetRealname sets the "realname" field.
func (_u *UserUpdateOne) SetRealname(v string) *UserUpdateOne {
	_u.mutation.SetRealname(v)
	return _u
}

// SetNillableRealname sets the "realname" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableRealname(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetRealname(*v)
	}
	return _u
}

// ClearRealname clears the value of the "realname" field.
func (_u *UserUpdateOne) ClearRealname() *UserUpdateOne {
	_u.mutation.ClearRealname()
	return _u
}

// SetNickname sets the "nickname" field.
func (_u *UserUpdateOne) SetNickname(v string) *UserUpdateOne {
	_u.mutation.SetNickname(v)
	return _u
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableNickname(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetNickname(*v)
	}
	return _u
}

// ClearNickname clears the value of the "nickname" field.
func (_u *UserUpdateOne) ClearNickname() *UserUpdateOne {
	_u.mutation.ClearNickname()
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *UserUpdateOne) ClearEmail() *UserUpdateOne {
	_u.mutation.ClearEmail()
	return _u
}

// SetPhone sets the "phone" field.
func (_u *UserUpdateOne) SetPhone(v string) *UserUpdateOne {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillablePhone(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// ClearPhone clears the value of the "phone" field.
func (_u *UserUpdateOne) ClearPhone() *UserUpdateOne {
	_u.mutation.ClearPhone()
	return _u
}

// SetAvatar sets the "avatar" field.
func (_u *UserUpdateOne) SetAvatar(v string) *UserUpdateOne {
	_u.mutation.SetAvatar(v)
	return _u
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAvatar(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetAvatar(*v)
	}
	return _u
}

// ClearAvatar clears the value of the "avatar" field.
func (_u *UserUpdateOne) ClearAvatar() *UserUpdateOne {
	_u.mutation.ClearAvatar()
	return _u
}

// SetBirthday sets the "birthday" field.
func (_u *UserUpdateOne) SetBirthday(v time.Time) *UserUpdateOne {
	_u.mutation.SetBirthday(v)
	return _u
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableBirthday(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetBirthday(*v)
	}
	return _u
}

// ClearBirthday clears the value of the "birthday" field.
func (_u *UserUpdateOne) ClearBirthday() *UserUpdateOne {
	_u.mutation.ClearBirthday()
	return _u
}

// SetGender sets the "gender" field.
func (_u *UserUpdateOne) SetGender(v int32) *UserUpdateOne {
	_u.mutation.ResetGender()
	_u.mutation.SetGender(v)
	return _u
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableGender(v *int32) *UserUpdateOne {
	if v != nil {
		_u.SetGender(*v)
	}
	return _u
}

// AddGender adds value to the "gender" field.
func (_u *UserUpdateOne) AddGender(v int32) *UserUpdateOne {
	_u.mutation.AddGender(v)
	return _u
}

// SetAge sets the "age" field.
func (_u *UserUpdateOne) SetAge(v int) *UserUpdateOne {
	_u.mutation.ResetAge()
	_u.mutation.SetAge(v)
	return _u
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAge(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetAge(*v)
	}
	return _u
}

// AddAge adds value to the "age" field.
func (_u *UserUpdateOne) AddAge(v int) *UserUpdateOne {
	_u.mutation.AddAge(v)
	return _u
}

// ClearAge clears the value of the "age" field.
func (_u *UserUpdateOne) ClearAge() *UserUpdateOne {
	_u.mutation.ClearAge()
	return _u
}

// SetLastLoginAt sets the "last_login_at" field.
func (_u *UserUpdateOne) SetLastLoginAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetLastLoginAt(v)
	return _u
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastLoginAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetLastLoginAt(*v)
	}
	return _u
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (_u *UserUpdateOne) ClearLastLoginAt() *UserUpdateOne {
	_u.mutation.ClearLastLoginAt()
	return _u
}

// SetLastLoginIP sets the "last_login_ip" field.
func (_u *UserUpdateOne) SetLastLoginIP(v string) *UserUpdateOne {
	_u.mutation.SetLastLoginIP(v)
	return _u
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastLoginIP(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetLastLoginIP(*v)
	}
	return _u
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (_u *UserUpdateOne) ClearLastLoginIP() *UserUpdateOne {
	_u.mutation.ClearLastLoginIP()
	return _u
}

// SetLoginCount sets the "login_count" field.
func (_u *UserUpdateOne) SetLoginCount(v int) *UserUpdateOne {
	_u.mutation.ResetLoginCount()
	_u.mutation.SetLoginCount(v)
	return _u
}

// SetNillableLoginCount sets the "login_count" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLoginCount(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetLoginCount(*v)
	}
	return _u
}

// AddLoginCount adds value to the "login_count" field.
func (_u *UserUpdateOne) AddLoginCount(v int) *UserUpdateOne {
	_u.mutation.AddLoginCount(v)
	return _u
}

// SetSettings sets the "settings" field.
func (_u *UserUpdateOne) SetSettings(v []string) *UserUpdateOne {
	_u.mutation.SetSettings(v)
	return _u
}

// AppendSettings appends value to the "settings" field.
func (_u *UserUpdateOne) AppendSettings(v []string) *UserUpdateOne {
	_u.mutation.AppendSettings(v)
	return _u
}

// ClearSettings clears the value of the "settings" field.
func (_u *UserUpdateOne) ClearSettings() *UserUpdateOne {
	_u.mutation.ClearSettings()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *UserUpdateOne) SetMetadata(v []string) *UserUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// AppendMetadata appends value to the "metadata" field.
func (_u *UserUpdateOne) AppendMetadata(v []string) *UserUpdateOne {
	_u.mutation.AppendMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *UserUpdateOne) ClearMetadata() *UserUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetDescription sets the "description" field.
func (_u *UserUpdateOne) SetDescription(v string) *UserUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableDescription(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *UserUpdateOne) ClearDescription() *UserUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (_u *UserUpdateOne) AddRoleIDs(ids ...uint32) *UserUpdateOne {
	_u.mutation.AddRoleIDs(ids...)
	return _u
}

// AddRoles adds the "roles" edges to the Role entity.
func (_u *UserUpdateOne) AddRoles(v ...*Role) *UserUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRoleIDs(ids...)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (_u *UserUpdateOne) AddPostIDs(ids ...uint32) *UserUpdateOne {
	_u.mutation.AddPostIDs(ids...)
	return _u
}

// AddPosts adds the "posts" edges to the Post entity.
func (_u *UserUpdateOne) AddPosts(v ...*Post) *UserUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPostIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (_u *UserUpdateOne) ClearRoles() *UserUpdateOne {
	_u.mutation.ClearRoles()
	return _u
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (_u *UserUpdateOne) RemoveRoleIDs(ids ...uint32) *UserUpdateOne {
	_u.mutation.RemoveRoleIDs(ids...)
	return _u
}

// RemoveRoles removes "roles" edges to Role entities.
func (_u *UserUpdateOne) RemoveRoles(v ...*Role) *UserUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRoleIDs(ids...)
}

// ClearPosts clears all "posts" edges to the Post entity.
func (_u *UserUpdateOne) ClearPosts() *UserUpdateOne {
	_u.mutation.ClearPosts()
	return _u
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (_u *UserUpdateOne) RemovePostIDs(ids ...uint32) *UserUpdateOne {
	_u.mutation.RemovePostIDs(ids...)
	return _u
}

// RemovePosts removes "posts" edges to Post entities.
func (_u *UserUpdateOne) RemovePosts(v ...*Post) *UserUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePostIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`gen: validator failed for field "User.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DomainID(); ok {
		if err := user.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`gen: validator failed for field "User.domain_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`gen: validator failed for field "User.password": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Realname(); ok {
		if err := user.RealnameValidator(v); err != nil {
			return &ValidationError{Name: "realname", err: fmt.Errorf(`gen: validator failed for field "User.realname": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Nickname(); ok {
		if err := user.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`gen: validator failed for field "User.nickname": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`gen: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`gen: validator failed for field "User.phone": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Avatar(); ok {
		if err := user.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`gen: validator failed for field "User.avatar": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`gen: validator failed for field "User.gender": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Age(); ok {
		if err := user.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`gen: validator failed for field "User.age": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LastLoginIP(); ok {
		if err := user.LastLoginIPValidator(v); err != nil {
			return &ValidationError{Name: "last_login_ip", err: fmt.Errorf(`gen: validator failed for field "User.last_login_ip": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := user.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`gen: validator failed for field "User.description": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(user.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.DomainID(); ok {
		_spec.SetField(user.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDomainID(); ok {
		_spec.AddField(user.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.Realname(); ok {
		_spec.SetField(user.FieldRealname, field.TypeString, value)
	}
	if _u.mutation.RealnameCleared() {
		_spec.ClearField(user.FieldRealname, field.TypeString)
	}
	if value, ok := _u.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
	}
	if _u.mutation.NicknameCleared() {
		_spec.ClearField(user.FieldNickname, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if _u.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := _u.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if _u.mutation.AvatarCleared() {
		_spec.ClearField(user.FieldAvatar, field.TypeString)
	}
	if value, ok := _u.mutation.Birthday(); ok {
		_spec.SetField(user.FieldBirthday, field.TypeTime, value)
	}
	if _u.mutation.BirthdayCleared() {
		_spec.ClearField(user.FieldBirthday, field.TypeTime)
	}
	if value, ok := _u.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedGender(); ok {
		_spec.AddField(user.FieldGender, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAge(); ok {
		_spec.AddField(user.FieldAge, field.TypeInt, value)
	}
	if _u.mutation.AgeCleared() {
		_spec.ClearField(user.FieldAge, field.TypeInt)
	}
	if value, ok := _u.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
	}
	if _u.mutation.LastLoginAtCleared() {
		_spec.ClearField(user.FieldLastLoginAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
	}
	if _u.mutation.LastLoginIPCleared() {
		_spec.ClearField(user.FieldLastLoginIP, field.TypeString)
	}
	if value, ok := _u.mutation.LoginCount(); ok {
		_spec.SetField(user.FieldLoginCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLoginCount(); ok {
		_spec.AddField(user.FieldLoginCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Settings(); ok {
		_spec.SetField(user.FieldSettings, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedSettings(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldSettings, value)
		})
	}
	if _u.mutation.SettingsCleared() {
		_spec.ClearField(user.FieldSettings, field.TypeJSON)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(user.FieldMetadata, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMetadata(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldMetadata, value)
		})
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(user.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(user.FieldDescription, field.TypeString)
	}
	if _u.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRolesIDs(); len(nodes) > 0 && !_u.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPostsIDs(); len(nodes) > 0 && !_u.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
