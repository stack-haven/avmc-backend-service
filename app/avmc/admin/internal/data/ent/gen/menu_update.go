// Code generated by ent, DO NOT EDIT.

package gen

import (
	"backend-service/app/avmc/admin/internal/data/ent/gen/menu"
	"backend-service/app/avmc/admin/internal/data/ent/gen/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuUpdate is the builder for updating Menu entities.
type MenuUpdate struct {
	config
	hooks     []Hook
	mutation  *MenuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MenuUpdate builder.
func (_u *MenuUpdate) Where(ps ...predicate.Menu) *MenuUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStatus sets the "status" field.
func (_u *MenuUpdate) SetStatus(v int32) *MenuUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableStatus(v *int32) *MenuUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *MenuUpdate) AddStatus(v int32) *MenuUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MenuUpdate) SetUpdatedAt(v time.Time) *MenuUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *MenuUpdate) SetDeletedAt(v time.Time) *MenuUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableDeletedAt(v *time.Time) *MenuUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *MenuUpdate) ClearDeletedAt() *MenuUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *MenuUpdate) SetName(v string) *MenuUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableName(v *string) *MenuUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetPath sets the "path" field.
func (_u *MenuUpdate) SetPath(v string) *MenuUpdate {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *MenuUpdate) SetNillablePath(v *string) *MenuUpdate {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *MenuUpdate) ClearPath() *MenuUpdate {
	_u.mutation.ClearPath()
	return _u
}

// SetType sets the "type" field.
func (_u *MenuUpdate) SetType(v int32) *MenuUpdate {
	_u.mutation.ResetType()
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableType(v *int32) *MenuUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// AddType adds value to the "type" field.
func (_u *MenuUpdate) AddType(v int32) *MenuUpdate {
	_u.mutation.AddType(v)
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *MenuUpdate) ClearType() *MenuUpdate {
	_u.mutation.ClearType()
	return _u
}

// SetComponent sets the "component" field.
func (_u *MenuUpdate) SetComponent(v string) *MenuUpdate {
	_u.mutation.SetComponent(v)
	return _u
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableComponent(v *string) *MenuUpdate {
	if v != nil {
		_u.SetComponent(*v)
	}
	return _u
}

// ClearComponent clears the value of the "component" field.
func (_u *MenuUpdate) ClearComponent() *MenuUpdate {
	_u.mutation.ClearComponent()
	return _u
}

// SetPid sets the "pid" field.
func (_u *MenuUpdate) SetPid(v uint32) *MenuUpdate {
	_u.mutation.SetPid(v)
	return _u
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (_u *MenuUpdate) SetNillablePid(v *uint32) *MenuUpdate {
	if v != nil {
		_u.SetPid(*v)
	}
	return _u
}

// ClearPid clears the value of the "pid" field.
func (_u *MenuUpdate) ClearPid() *MenuUpdate {
	_u.mutation.ClearPid()
	return _u
}

// SetRedirect sets the "redirect" field.
func (_u *MenuUpdate) SetRedirect(v string) *MenuUpdate {
	_u.mutation.SetRedirect(v)
	return _u
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableRedirect(v *string) *MenuUpdate {
	if v != nil {
		_u.SetRedirect(*v)
	}
	return _u
}

// ClearRedirect clears the value of the "redirect" field.
func (_u *MenuUpdate) ClearRedirect() *MenuUpdate {
	_u.mutation.ClearRedirect()
	return _u
}

// SetAuthCode sets the "auth_code" field.
func (_u *MenuUpdate) SetAuthCode(v string) *MenuUpdate {
	_u.mutation.SetAuthCode(v)
	return _u
}

// SetNillableAuthCode sets the "auth_code" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableAuthCode(v *string) *MenuUpdate {
	if v != nil {
		_u.SetAuthCode(*v)
	}
	return _u
}

// SetActiveIcon sets the "active_icon" field.
func (_u *MenuUpdate) SetActiveIcon(v string) *MenuUpdate {
	_u.mutation.SetActiveIcon(v)
	return _u
}

// SetNillableActiveIcon sets the "active_icon" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableActiveIcon(v *string) *MenuUpdate {
	if v != nil {
		_u.SetActiveIcon(*v)
	}
	return _u
}

// SetActivePath sets the "active_path" field.
func (_u *MenuUpdate) SetActivePath(v string) *MenuUpdate {
	_u.mutation.SetActivePath(v)
	return _u
}

// SetNillableActivePath sets the "active_path" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableActivePath(v *string) *MenuUpdate {
	if v != nil {
		_u.SetActivePath(*v)
	}
	return _u
}

// SetAffixTab sets the "affix_tab" field.
func (_u *MenuUpdate) SetAffixTab(v bool) *MenuUpdate {
	_u.mutation.SetAffixTab(v)
	return _u
}

// SetNillableAffixTab sets the "affix_tab" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableAffixTab(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetAffixTab(*v)
	}
	return _u
}

// SetAffixTabOrder sets the "affix_tab_order" field.
func (_u *MenuUpdate) SetAffixTabOrder(v int32) *MenuUpdate {
	_u.mutation.ResetAffixTabOrder()
	_u.mutation.SetAffixTabOrder(v)
	return _u
}

// SetNillableAffixTabOrder sets the "affix_tab_order" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableAffixTabOrder(v *int32) *MenuUpdate {
	if v != nil {
		_u.SetAffixTabOrder(*v)
	}
	return _u
}

// AddAffixTabOrder adds value to the "affix_tab_order" field.
func (_u *MenuUpdate) AddAffixTabOrder(v int32) *MenuUpdate {
	_u.mutation.AddAffixTabOrder(v)
	return _u
}

// SetBadge sets the "badge" field.
func (_u *MenuUpdate) SetBadge(v string) *MenuUpdate {
	_u.mutation.SetBadge(v)
	return _u
}

// SetNillableBadge sets the "badge" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableBadge(v *string) *MenuUpdate {
	if v != nil {
		_u.SetBadge(*v)
	}
	return _u
}

// SetBadgeType sets the "badge_type" field.
func (_u *MenuUpdate) SetBadgeType(v int32) *MenuUpdate {
	_u.mutation.ResetBadgeType()
	_u.mutation.SetBadgeType(v)
	return _u
}

// SetNillableBadgeType sets the "badge_type" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableBadgeType(v *int32) *MenuUpdate {
	if v != nil {
		_u.SetBadgeType(*v)
	}
	return _u
}

// AddBadgeType adds value to the "badge_type" field.
func (_u *MenuUpdate) AddBadgeType(v int32) *MenuUpdate {
	_u.mutation.AddBadgeType(v)
	return _u
}

// SetBadgeVariants sets the "badge_variants" field.
func (_u *MenuUpdate) SetBadgeVariants(v int32) *MenuUpdate {
	_u.mutation.ResetBadgeVariants()
	_u.mutation.SetBadgeVariants(v)
	return _u
}

// SetNillableBadgeVariants sets the "badge_variants" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableBadgeVariants(v *int32) *MenuUpdate {
	if v != nil {
		_u.SetBadgeVariants(*v)
	}
	return _u
}

// AddBadgeVariants adds value to the "badge_variants" field.
func (_u *MenuUpdate) AddBadgeVariants(v int32) *MenuUpdate {
	_u.mutation.AddBadgeVariants(v)
	return _u
}

// SetHideChildrenInMenu sets the "hide_children_in_menu" field.
func (_u *MenuUpdate) SetHideChildrenInMenu(v bool) *MenuUpdate {
	_u.mutation.SetHideChildrenInMenu(v)
	return _u
}

// SetNillableHideChildrenInMenu sets the "hide_children_in_menu" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableHideChildrenInMenu(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetHideChildrenInMenu(*v)
	}
	return _u
}

// SetHideInBreadcrumb sets the "hide_in_breadcrumb" field.
func (_u *MenuUpdate) SetHideInBreadcrumb(v bool) *MenuUpdate {
	_u.mutation.SetHideInBreadcrumb(v)
	return _u
}

// SetNillableHideInBreadcrumb sets the "hide_in_breadcrumb" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableHideInBreadcrumb(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetHideInBreadcrumb(*v)
	}
	return _u
}

// SetHideInMenu sets the "hide_in_menu" field.
func (_u *MenuUpdate) SetHideInMenu(v bool) *MenuUpdate {
	_u.mutation.SetHideInMenu(v)
	return _u
}

// SetNillableHideInMenu sets the "hide_in_menu" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableHideInMenu(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetHideInMenu(*v)
	}
	return _u
}

// SetHideInTab sets the "hide_in_tab" field.
func (_u *MenuUpdate) SetHideInTab(v bool) *MenuUpdate {
	_u.mutation.SetHideInTab(v)
	return _u
}

// SetNillableHideInTab sets the "hide_in_tab" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableHideInTab(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetHideInTab(*v)
	}
	return _u
}

// SetIcon sets the "icon" field.
func (_u *MenuUpdate) SetIcon(v string) *MenuUpdate {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableIcon(v *string) *MenuUpdate {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// SetIframeSrc sets the "iframe_src" field.
func (_u *MenuUpdate) SetIframeSrc(v string) *MenuUpdate {
	_u.mutation.SetIframeSrc(v)
	return _u
}

// SetNillableIframeSrc sets the "iframe_src" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableIframeSrc(v *string) *MenuUpdate {
	if v != nil {
		_u.SetIframeSrc(*v)
	}
	return _u
}

// SetKeepAlive sets the "keep_alive" field.
func (_u *MenuUpdate) SetKeepAlive(v bool) *MenuUpdate {
	_u.mutation.SetKeepAlive(v)
	return _u
}

// SetNillableKeepAlive sets the "keep_alive" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableKeepAlive(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetKeepAlive(*v)
	}
	return _u
}

// SetLink sets the "link" field.
func (_u *MenuUpdate) SetLink(v string) *MenuUpdate {
	_u.mutation.SetLink(v)
	return _u
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableLink(v *string) *MenuUpdate {
	if v != nil {
		_u.SetLink(*v)
	}
	return _u
}

// SetMaxNumOfOpenTab sets the "max_num_of_open_tab" field.
func (_u *MenuUpdate) SetMaxNumOfOpenTab(v int32) *MenuUpdate {
	_u.mutation.ResetMaxNumOfOpenTab()
	_u.mutation.SetMaxNumOfOpenTab(v)
	return _u
}

// SetNillableMaxNumOfOpenTab sets the "max_num_of_open_tab" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableMaxNumOfOpenTab(v *int32) *MenuUpdate {
	if v != nil {
		_u.SetMaxNumOfOpenTab(*v)
	}
	return _u
}

// AddMaxNumOfOpenTab adds value to the "max_num_of_open_tab" field.
func (_u *MenuUpdate) AddMaxNumOfOpenTab(v int32) *MenuUpdate {
	_u.mutation.AddMaxNumOfOpenTab(v)
	return _u
}

// SetNoBasicLayout sets the "no_basic_layout" field.
func (_u *MenuUpdate) SetNoBasicLayout(v bool) *MenuUpdate {
	_u.mutation.SetNoBasicLayout(v)
	return _u
}

// SetNillableNoBasicLayout sets the "no_basic_layout" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableNoBasicLayout(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetNoBasicLayout(*v)
	}
	return _u
}

// SetOpenInNewWindow sets the "open_in_new_window" field.
func (_u *MenuUpdate) SetOpenInNewWindow(v bool) *MenuUpdate {
	_u.mutation.SetOpenInNewWindow(v)
	return _u
}

// SetNillableOpenInNewWindow sets the "open_in_new_window" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableOpenInNewWindow(v *bool) *MenuUpdate {
	if v != nil {
		_u.SetOpenInNewWindow(*v)
	}
	return _u
}

// SetSort sets the "sort" field.
func (_u *MenuUpdate) SetSort(v int32) *MenuUpdate {
	_u.mutation.ResetSort()
	_u.mutation.SetSort(v)
	return _u
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableSort(v *int32) *MenuUpdate {
	if v != nil {
		_u.SetSort(*v)
	}
	return _u
}

// AddSort adds value to the "sort" field.
func (_u *MenuUpdate) AddSort(v int32) *MenuUpdate {
	_u.mutation.AddSort(v)
	return _u
}

// SetQuery sets the "query" field.
func (_u *MenuUpdate) SetQuery(v string) *MenuUpdate {
	_u.mutation.SetQuery(v)
	return _u
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableQuery(v *string) *MenuUpdate {
	if v != nil {
		_u.SetQuery(*v)
	}
	return _u
}

// ClearQuery clears the value of the "query" field.
func (_u *MenuUpdate) ClearQuery() *MenuUpdate {
	_u.mutation.ClearQuery()
	return _u
}

// SetTitle sets the "title" field.
func (_u *MenuUpdate) SetTitle(v string) *MenuUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *MenuUpdate) SetNillableTitle(v *string) *MenuUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetParentID sets the "parent" edge to the Menu entity by ID.
func (_u *MenuUpdate) SetParentID(id uint32) *MenuUpdate {
	_u.mutation.SetParentID(id)
	return _u
}

// SetNillableParentID sets the "parent" edge to the Menu entity by ID if the given value is not nil.
func (_u *MenuUpdate) SetNillableParentID(id *uint32) *MenuUpdate {
	if id != nil {
		_u = _u.SetParentID(*id)
	}
	return _u
}

// SetParent sets the "parent" edge to the Menu entity.
func (_u *MenuUpdate) SetParent(v *Menu) *MenuUpdate {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (_u *MenuUpdate) AddChildIDs(ids ...uint32) *MenuUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Menu entity.
func (_u *MenuUpdate) AddChildren(v ...*Menu) *MenuUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (_u *MenuUpdate) Mutation() *MenuMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the Menu entity.
func (_u *MenuUpdate) ClearParent() *MenuUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Menu entity.
func (_u *MenuUpdate) ClearChildren() *MenuUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Menu entities by IDs.
func (_u *MenuUpdate) RemoveChildIDs(ids ...uint32) *MenuUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Menu entities.
func (_u *MenuUpdate) RemoveChildren(v ...*Menu) *MenuUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MenuUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MenuUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MenuUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MenuUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MenuUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		if menu.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized menu.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := menu.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *MenuUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := menu.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`gen: validator failed for field "Menu.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := menu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Menu.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Icon(); ok {
		if err := menu.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`gen: validator failed for field "Menu.icon": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Title(); ok {
		if err := menu.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`gen: validator failed for field "Menu.title": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *MenuUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MenuUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *MenuUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(menu.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(menu.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(menu.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(menu.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedType(); ok {
		_spec.AddField(menu.FieldType, field.TypeInt32, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(menu.FieldType, field.TypeInt32)
	}
	if value, ok := _u.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
	}
	if _u.mutation.ComponentCleared() {
		_spec.ClearField(menu.FieldComponent, field.TypeString)
	}
	if value, ok := _u.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
	}
	if _u.mutation.RedirectCleared() {
		_spec.ClearField(menu.FieldRedirect, field.TypeString)
	}
	if value, ok := _u.mutation.AuthCode(); ok {
		_spec.SetField(menu.FieldAuthCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.ActiveIcon(); ok {
		_spec.SetField(menu.FieldActiveIcon, field.TypeString, value)
	}
	if value, ok := _u.mutation.ActivePath(); ok {
		_spec.SetField(menu.FieldActivePath, field.TypeString, value)
	}
	if value, ok := _u.mutation.AffixTab(); ok {
		_spec.SetField(menu.FieldAffixTab, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AffixTabOrder(); ok {
		_spec.SetField(menu.FieldAffixTabOrder, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedAffixTabOrder(); ok {
		_spec.AddField(menu.FieldAffixTabOrder, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Badge(); ok {
		_spec.SetField(menu.FieldBadge, field.TypeString, value)
	}
	if value, ok := _u.mutation.BadgeType(); ok {
		_spec.SetField(menu.FieldBadgeType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedBadgeType(); ok {
		_spec.AddField(menu.FieldBadgeType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.BadgeVariants(); ok {
		_spec.SetField(menu.FieldBadgeVariants, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedBadgeVariants(); ok {
		_spec.AddField(menu.FieldBadgeVariants, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.HideChildrenInMenu(); ok {
		_spec.SetField(menu.FieldHideChildrenInMenu, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideInBreadcrumb(); ok {
		_spec.SetField(menu.FieldHideInBreadcrumb, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideInMenu(); ok {
		_spec.SetField(menu.FieldHideInMenu, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideInTab(); ok {
		_spec.SetField(menu.FieldHideInTab, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if value, ok := _u.mutation.IframeSrc(); ok {
		_spec.SetField(menu.FieldIframeSrc, field.TypeString, value)
	}
	if value, ok := _u.mutation.KeepAlive(); ok {
		_spec.SetField(menu.FieldKeepAlive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Link(); ok {
		_spec.SetField(menu.FieldLink, field.TypeString, value)
	}
	if value, ok := _u.mutation.MaxNumOfOpenTab(); ok {
		_spec.SetField(menu.FieldMaxNumOfOpenTab, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedMaxNumOfOpenTab(); ok {
		_spec.AddField(menu.FieldMaxNumOfOpenTab, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.NoBasicLayout(); ok {
		_spec.SetField(menu.FieldNoBasicLayout, field.TypeBool, value)
	}
	if value, ok := _u.mutation.OpenInNewWindow(); ok {
		_spec.SetField(menu.FieldOpenInNewWindow, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Sort(); ok {
		_spec.SetField(menu.FieldSort, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSort(); ok {
		_spec.AddField(menu.FieldSort, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Query(); ok {
		_spec.SetField(menu.FieldQuery, field.TypeString, value)
	}
	if _u.mutation.QueryCleared() {
		_spec.ClearField(menu.FieldQuery, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(menu.FieldTitle, field.TypeString, value)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MenuUpdateOne is the builder for updating a single Menu entity.
type MenuUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MenuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetStatus sets the "status" field.
func (_u *MenuUpdateOne) SetStatus(v int32) *MenuUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableStatus(v *int32) *MenuUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *MenuUpdateOne) AddStatus(v int32) *MenuUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MenuUpdateOne) SetUpdatedAt(v time.Time) *MenuUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *MenuUpdateOne) SetDeletedAt(v time.Time) *MenuUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableDeletedAt(v *time.Time) *MenuUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *MenuUpdateOne) ClearDeletedAt() *MenuUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetName sets the "name" field.
func (_u *MenuUpdateOne) SetName(v string) *MenuUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableName(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetPath sets the "path" field.
func (_u *MenuUpdateOne) SetPath(v string) *MenuUpdateOne {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillablePath(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *MenuUpdateOne) ClearPath() *MenuUpdateOne {
	_u.mutation.ClearPath()
	return _u
}

// SetType sets the "type" field.
func (_u *MenuUpdateOne) SetType(v int32) *MenuUpdateOne {
	_u.mutation.ResetType()
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableType(v *int32) *MenuUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// AddType adds value to the "type" field.
func (_u *MenuUpdateOne) AddType(v int32) *MenuUpdateOne {
	_u.mutation.AddType(v)
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *MenuUpdateOne) ClearType() *MenuUpdateOne {
	_u.mutation.ClearType()
	return _u
}

// SetComponent sets the "component" field.
func (_u *MenuUpdateOne) SetComponent(v string) *MenuUpdateOne {
	_u.mutation.SetComponent(v)
	return _u
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableComponent(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetComponent(*v)
	}
	return _u
}

// ClearComponent clears the value of the "component" field.
func (_u *MenuUpdateOne) ClearComponent() *MenuUpdateOne {
	_u.mutation.ClearComponent()
	return _u
}

// SetPid sets the "pid" field.
func (_u *MenuUpdateOne) SetPid(v uint32) *MenuUpdateOne {
	_u.mutation.SetPid(v)
	return _u
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillablePid(v *uint32) *MenuUpdateOne {
	if v != nil {
		_u.SetPid(*v)
	}
	return _u
}

// ClearPid clears the value of the "pid" field.
func (_u *MenuUpdateOne) ClearPid() *MenuUpdateOne {
	_u.mutation.ClearPid()
	return _u
}

// SetRedirect sets the "redirect" field.
func (_u *MenuUpdateOne) SetRedirect(v string) *MenuUpdateOne {
	_u.mutation.SetRedirect(v)
	return _u
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableRedirect(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetRedirect(*v)
	}
	return _u
}

// ClearRedirect clears the value of the "redirect" field.
func (_u *MenuUpdateOne) ClearRedirect() *MenuUpdateOne {
	_u.mutation.ClearRedirect()
	return _u
}

// SetAuthCode sets the "auth_code" field.
func (_u *MenuUpdateOne) SetAuthCode(v string) *MenuUpdateOne {
	_u.mutation.SetAuthCode(v)
	return _u
}

// SetNillableAuthCode sets the "auth_code" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableAuthCode(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetAuthCode(*v)
	}
	return _u
}

// SetActiveIcon sets the "active_icon" field.
func (_u *MenuUpdateOne) SetActiveIcon(v string) *MenuUpdateOne {
	_u.mutation.SetActiveIcon(v)
	return _u
}

// SetNillableActiveIcon sets the "active_icon" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableActiveIcon(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetActiveIcon(*v)
	}
	return _u
}

// SetActivePath sets the "active_path" field.
func (_u *MenuUpdateOne) SetActivePath(v string) *MenuUpdateOne {
	_u.mutation.SetActivePath(v)
	return _u
}

// SetNillableActivePath sets the "active_path" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableActivePath(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetActivePath(*v)
	}
	return _u
}

// SetAffixTab sets the "affix_tab" field.
func (_u *MenuUpdateOne) SetAffixTab(v bool) *MenuUpdateOne {
	_u.mutation.SetAffixTab(v)
	return _u
}

// SetNillableAffixTab sets the "affix_tab" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableAffixTab(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetAffixTab(*v)
	}
	return _u
}

// SetAffixTabOrder sets the "affix_tab_order" field.
func (_u *MenuUpdateOne) SetAffixTabOrder(v int32) *MenuUpdateOne {
	_u.mutation.ResetAffixTabOrder()
	_u.mutation.SetAffixTabOrder(v)
	return _u
}

// SetNillableAffixTabOrder sets the "affix_tab_order" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableAffixTabOrder(v *int32) *MenuUpdateOne {
	if v != nil {
		_u.SetAffixTabOrder(*v)
	}
	return _u
}

// AddAffixTabOrder adds value to the "affix_tab_order" field.
func (_u *MenuUpdateOne) AddAffixTabOrder(v int32) *MenuUpdateOne {
	_u.mutation.AddAffixTabOrder(v)
	return _u
}

// SetBadge sets the "badge" field.
func (_u *MenuUpdateOne) SetBadge(v string) *MenuUpdateOne {
	_u.mutation.SetBadge(v)
	return _u
}

// SetNillableBadge sets the "badge" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableBadge(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetBadge(*v)
	}
	return _u
}

// SetBadgeType sets the "badge_type" field.
func (_u *MenuUpdateOne) SetBadgeType(v int32) *MenuUpdateOne {
	_u.mutation.ResetBadgeType()
	_u.mutation.SetBadgeType(v)
	return _u
}

// SetNillableBadgeType sets the "badge_type" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableBadgeType(v *int32) *MenuUpdateOne {
	if v != nil {
		_u.SetBadgeType(*v)
	}
	return _u
}

// AddBadgeType adds value to the "badge_type" field.
func (_u *MenuUpdateOne) AddBadgeType(v int32) *MenuUpdateOne {
	_u.mutation.AddBadgeType(v)
	return _u
}

// SetBadgeVariants sets the "badge_variants" field.
func (_u *MenuUpdateOne) SetBadgeVariants(v int32) *MenuUpdateOne {
	_u.mutation.ResetBadgeVariants()
	_u.mutation.SetBadgeVariants(v)
	return _u
}

// SetNillableBadgeVariants sets the "badge_variants" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableBadgeVariants(v *int32) *MenuUpdateOne {
	if v != nil {
		_u.SetBadgeVariants(*v)
	}
	return _u
}

// AddBadgeVariants adds value to the "badge_variants" field.
func (_u *MenuUpdateOne) AddBadgeVariants(v int32) *MenuUpdateOne {
	_u.mutation.AddBadgeVariants(v)
	return _u
}

// SetHideChildrenInMenu sets the "hide_children_in_menu" field.
func (_u *MenuUpdateOne) SetHideChildrenInMenu(v bool) *MenuUpdateOne {
	_u.mutation.SetHideChildrenInMenu(v)
	return _u
}

// SetNillableHideChildrenInMenu sets the "hide_children_in_menu" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableHideChildrenInMenu(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetHideChildrenInMenu(*v)
	}
	return _u
}

// SetHideInBreadcrumb sets the "hide_in_breadcrumb" field.
func (_u *MenuUpdateOne) SetHideInBreadcrumb(v bool) *MenuUpdateOne {
	_u.mutation.SetHideInBreadcrumb(v)
	return _u
}

// SetNillableHideInBreadcrumb sets the "hide_in_breadcrumb" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableHideInBreadcrumb(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetHideInBreadcrumb(*v)
	}
	return _u
}

// SetHideInMenu sets the "hide_in_menu" field.
func (_u *MenuUpdateOne) SetHideInMenu(v bool) *MenuUpdateOne {
	_u.mutation.SetHideInMenu(v)
	return _u
}

// SetNillableHideInMenu sets the "hide_in_menu" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableHideInMenu(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetHideInMenu(*v)
	}
	return _u
}

// SetHideInTab sets the "hide_in_tab" field.
func (_u *MenuUpdateOne) SetHideInTab(v bool) *MenuUpdateOne {
	_u.mutation.SetHideInTab(v)
	return _u
}

// SetNillableHideInTab sets the "hide_in_tab" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableHideInTab(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetHideInTab(*v)
	}
	return _u
}

// SetIcon sets the "icon" field.
func (_u *MenuUpdateOne) SetIcon(v string) *MenuUpdateOne {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableIcon(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// SetIframeSrc sets the "iframe_src" field.
func (_u *MenuUpdateOne) SetIframeSrc(v string) *MenuUpdateOne {
	_u.mutation.SetIframeSrc(v)
	return _u
}

// SetNillableIframeSrc sets the "iframe_src" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableIframeSrc(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetIframeSrc(*v)
	}
	return _u
}

// SetKeepAlive sets the "keep_alive" field.
func (_u *MenuUpdateOne) SetKeepAlive(v bool) *MenuUpdateOne {
	_u.mutation.SetKeepAlive(v)
	return _u
}

// SetNillableKeepAlive sets the "keep_alive" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableKeepAlive(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetKeepAlive(*v)
	}
	return _u
}

// SetLink sets the "link" field.
func (_u *MenuUpdateOne) SetLink(v string) *MenuUpdateOne {
	_u.mutation.SetLink(v)
	return _u
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableLink(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetLink(*v)
	}
	return _u
}

// SetMaxNumOfOpenTab sets the "max_num_of_open_tab" field.
func (_u *MenuUpdateOne) SetMaxNumOfOpenTab(v int32) *MenuUpdateOne {
	_u.mutation.ResetMaxNumOfOpenTab()
	_u.mutation.SetMaxNumOfOpenTab(v)
	return _u
}

// SetNillableMaxNumOfOpenTab sets the "max_num_of_open_tab" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableMaxNumOfOpenTab(v *int32) *MenuUpdateOne {
	if v != nil {
		_u.SetMaxNumOfOpenTab(*v)
	}
	return _u
}

// AddMaxNumOfOpenTab adds value to the "max_num_of_open_tab" field.
func (_u *MenuUpdateOne) AddMaxNumOfOpenTab(v int32) *MenuUpdateOne {
	_u.mutation.AddMaxNumOfOpenTab(v)
	return _u
}

// SetNoBasicLayout sets the "no_basic_layout" field.
func (_u *MenuUpdateOne) SetNoBasicLayout(v bool) *MenuUpdateOne {
	_u.mutation.SetNoBasicLayout(v)
	return _u
}

// SetNillableNoBasicLayout sets the "no_basic_layout" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableNoBasicLayout(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetNoBasicLayout(*v)
	}
	return _u
}

// SetOpenInNewWindow sets the "open_in_new_window" field.
func (_u *MenuUpdateOne) SetOpenInNewWindow(v bool) *MenuUpdateOne {
	_u.mutation.SetOpenInNewWindow(v)
	return _u
}

// SetNillableOpenInNewWindow sets the "open_in_new_window" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableOpenInNewWindow(v *bool) *MenuUpdateOne {
	if v != nil {
		_u.SetOpenInNewWindow(*v)
	}
	return _u
}

// SetSort sets the "sort" field.
func (_u *MenuUpdateOne) SetSort(v int32) *MenuUpdateOne {
	_u.mutation.ResetSort()
	_u.mutation.SetSort(v)
	return _u
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableSort(v *int32) *MenuUpdateOne {
	if v != nil {
		_u.SetSort(*v)
	}
	return _u
}

// AddSort adds value to the "sort" field.
func (_u *MenuUpdateOne) AddSort(v int32) *MenuUpdateOne {
	_u.mutation.AddSort(v)
	return _u
}

// SetQuery sets the "query" field.
func (_u *MenuUpdateOne) SetQuery(v string) *MenuUpdateOne {
	_u.mutation.SetQuery(v)
	return _u
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableQuery(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetQuery(*v)
	}
	return _u
}

// ClearQuery clears the value of the "query" field.
func (_u *MenuUpdateOne) ClearQuery() *MenuUpdateOne {
	_u.mutation.ClearQuery()
	return _u
}

// SetTitle sets the "title" field.
func (_u *MenuUpdateOne) SetTitle(v string) *MenuUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableTitle(v *string) *MenuUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetParentID sets the "parent" edge to the Menu entity by ID.
func (_u *MenuUpdateOne) SetParentID(id uint32) *MenuUpdateOne {
	_u.mutation.SetParentID(id)
	return _u
}

// SetNillableParentID sets the "parent" edge to the Menu entity by ID if the given value is not nil.
func (_u *MenuUpdateOne) SetNillableParentID(id *uint32) *MenuUpdateOne {
	if id != nil {
		_u = _u.SetParentID(*id)
	}
	return _u
}

// SetParent sets the "parent" edge to the Menu entity.
func (_u *MenuUpdateOne) SetParent(v *Menu) *MenuUpdateOne {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (_u *MenuUpdateOne) AddChildIDs(ids ...uint32) *MenuUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Menu entity.
func (_u *MenuUpdateOne) AddChildren(v ...*Menu) *MenuUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (_u *MenuUpdateOne) Mutation() *MenuMutation {
	return _u.mutation
}

// ClearParent clears the "parent" edge to the Menu entity.
func (_u *MenuUpdateOne) ClearParent() *MenuUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Menu entity.
func (_u *MenuUpdateOne) ClearChildren() *MenuUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Menu entities by IDs.
func (_u *MenuUpdateOne) RemoveChildIDs(ids ...uint32) *MenuUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Menu entities.
func (_u *MenuUpdateOne) RemoveChildren(v ...*Menu) *MenuUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the MenuUpdate builder.
func (_u *MenuUpdateOne) Where(ps ...predicate.Menu) *MenuUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MenuUpdateOne) Select(field string, fields ...string) *MenuUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Menu entity.
func (_u *MenuUpdateOne) Save(ctx context.Context) (*Menu, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MenuUpdateOne) SaveX(ctx context.Context) *Menu {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MenuUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MenuUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MenuUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		if menu.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized menu.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := menu.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *MenuUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := menu.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`gen: validator failed for field "Menu.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := menu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Menu.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Icon(); ok {
		if err := menu.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`gen: validator failed for field "Menu.icon": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Title(); ok {
		if err := menu.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`gen: validator failed for field "Menu.title": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *MenuUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MenuUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *MenuUpdateOne) sqlSave(ctx context.Context) (_node *Menu, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Menu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menu.FieldID)
		for _, f := range fields {
			if !menu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != menu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(menu.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(menu.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(menu.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(menu.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedType(); ok {
		_spec.AddField(menu.FieldType, field.TypeInt32, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(menu.FieldType, field.TypeInt32)
	}
	if value, ok := _u.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
	}
	if _u.mutation.ComponentCleared() {
		_spec.ClearField(menu.FieldComponent, field.TypeString)
	}
	if value, ok := _u.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
	}
	if _u.mutation.RedirectCleared() {
		_spec.ClearField(menu.FieldRedirect, field.TypeString)
	}
	if value, ok := _u.mutation.AuthCode(); ok {
		_spec.SetField(menu.FieldAuthCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.ActiveIcon(); ok {
		_spec.SetField(menu.FieldActiveIcon, field.TypeString, value)
	}
	if value, ok := _u.mutation.ActivePath(); ok {
		_spec.SetField(menu.FieldActivePath, field.TypeString, value)
	}
	if value, ok := _u.mutation.AffixTab(); ok {
		_spec.SetField(menu.FieldAffixTab, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AffixTabOrder(); ok {
		_spec.SetField(menu.FieldAffixTabOrder, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedAffixTabOrder(); ok {
		_spec.AddField(menu.FieldAffixTabOrder, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Badge(); ok {
		_spec.SetField(menu.FieldBadge, field.TypeString, value)
	}
	if value, ok := _u.mutation.BadgeType(); ok {
		_spec.SetField(menu.FieldBadgeType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedBadgeType(); ok {
		_spec.AddField(menu.FieldBadgeType, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.BadgeVariants(); ok {
		_spec.SetField(menu.FieldBadgeVariants, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedBadgeVariants(); ok {
		_spec.AddField(menu.FieldBadgeVariants, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.HideChildrenInMenu(); ok {
		_spec.SetField(menu.FieldHideChildrenInMenu, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideInBreadcrumb(); ok {
		_spec.SetField(menu.FieldHideInBreadcrumb, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideInMenu(); ok {
		_spec.SetField(menu.FieldHideInMenu, field.TypeBool, value)
	}
	if value, ok := _u.mutation.HideInTab(); ok {
		_spec.SetField(menu.FieldHideInTab, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if value, ok := _u.mutation.IframeSrc(); ok {
		_spec.SetField(menu.FieldIframeSrc, field.TypeString, value)
	}
	if value, ok := _u.mutation.KeepAlive(); ok {
		_spec.SetField(menu.FieldKeepAlive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Link(); ok {
		_spec.SetField(menu.FieldLink, field.TypeString, value)
	}
	if value, ok := _u.mutation.MaxNumOfOpenTab(); ok {
		_spec.SetField(menu.FieldMaxNumOfOpenTab, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedMaxNumOfOpenTab(); ok {
		_spec.AddField(menu.FieldMaxNumOfOpenTab, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.NoBasicLayout(); ok {
		_spec.SetField(menu.FieldNoBasicLayout, field.TypeBool, value)
	}
	if value, ok := _u.mutation.OpenInNewWindow(); ok {
		_spec.SetField(menu.FieldOpenInNewWindow, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Sort(); ok {
		_spec.SetField(menu.FieldSort, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSort(); ok {
		_spec.AddField(menu.FieldSort, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.Query(); ok {
		_spec.SetField(menu.FieldQuery, field.TypeString, value)
	}
	if _u.mutation.QueryCleared() {
		_spec.ClearField(menu.FieldQuery, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(menu.FieldTitle, field.TypeString, value)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Menu{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
