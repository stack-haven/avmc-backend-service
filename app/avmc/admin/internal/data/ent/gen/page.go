// Code generated by ent, DO NOT EDIT.

package gen

import "context"

func (_m *DeptQuery) Page(ctx context.Context, page, size int) ([]*Dept, int, error) {
	cnt, err := _m.Count(ctx)
	if err != nil {
		return nil, 0, err
	}
	offset := size * (page - 1)
	rs, err := _m.Offset(offset).Limit(size).All(ctx)
	if err != nil {
		return nil, 0, err
	}
	return rs, cnt, nil
}

func (_m *MenuQuery) Page(ctx context.Context, page, size int) ([]*Menu, int, error) {
	cnt, err := _m.Count(ctx)
	if err != nil {
		return nil, 0, err
	}
	offset := size * (page - 1)
	rs, err := _m.Offset(offset).Limit(size).All(ctx)
	if err != nil {
		return nil, 0, err
	}
	return rs, cnt, nil
}

func (_m *PostQuery) Page(ctx context.Context, page, size int) ([]*Post, int, error) {
	cnt, err := _m.Count(ctx)
	if err != nil {
		return nil, 0, err
	}
	offset := size * (page - 1)
	rs, err := _m.Offset(offset).Limit(size).All(ctx)
	if err != nil {
		return nil, 0, err
	}
	return rs, cnt, nil
}

func (_m *RoleQuery) Page(ctx context.Context, page, size int) ([]*Role, int, error) {
	cnt, err := _m.Count(ctx)
	if err != nil {
		return nil, 0, err
	}
	offset := size * (page - 1)
	rs, err := _m.Offset(offset).Limit(size).All(ctx)
	if err != nil {
		return nil, 0, err
	}
	return rs, cnt, nil
}

func (_m *UserQuery) Page(ctx context.Context, page, size int) ([]*User, int, error) {
	cnt, err := _m.Count(ctx)
	if err != nil {
		return nil, 0, err
	}
	offset := size * (page - 1)
	rs, err := _m.Offset(offset).Limit(size).All(ctx)
	if err != nil {
		return nil, 0, err
	}
	return rs, cnt, nil
}
