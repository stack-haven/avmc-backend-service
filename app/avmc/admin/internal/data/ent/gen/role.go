// Code generated by ent, DO NOT EDIT.

package gen

import (
	"backend-service/app/avmc/admin/internal/data/ent/gen/role"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 角色表
type Role struct {
	config `json:"-"`
	// ID of the ent.
	// id
	ID uint32 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 状态：0=未知 1=启用 2=禁用
	Status *int32 `json:"status,omitempty"`
	// 域ID
	DomainID uint32 `json:"domain_id,omitempty"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 名称
	Name *string `json:"name,omitempty"`
	// 默认路由
	DefaultRouter *string `json:"default_router,omitempty"`
	// 数据范围（0：未指定 1：全部数据权限 2：本人数据权限 3：本部门数据权限 4：本部门及以下数据权限 5：自定部门数据权限 ）
	DataScope *int32 `json:"data_scope,omitempty"`
	// 菜单树选择项是否关联显示
	MenuCheckStrictly *int32 `json:"menu_check_strictly,omitempty"`
	// 部门树选择项是否关联显示
	DeptCheckStrictly *int32 `json:"dept_check_strictly,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoleQuery when eager-loading is set.
	Edges        RoleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoleEdges holds the relations/edges for other nodes in the graph.
type RoleEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Role) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case role.FieldID, role.FieldStatus, role.FieldDomainID, role.FieldDataScope, role.FieldMenuCheckStrictly, role.FieldDeptCheckStrictly:
			values[i] = new(sql.NullInt64)
		case role.FieldName, role.FieldDefaultRouter:
			values[i] = new(sql.NullString)
		case role.FieldCreatedAt, role.FieldUpdatedAt, role.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Role fields.
func (_m *Role) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case role.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint32(value.Int64)
		case role.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case role.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case role.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = new(int32)
				*_m.Status = int32(value.Int64)
			}
		case role.FieldDomainID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field domain_id", values[i])
			} else if value.Valid {
				_m.DomainID = uint32(value.Int64)
			}
		case role.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case role.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = new(string)
				*_m.Name = value.String
			}
		case role.FieldDefaultRouter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_router", values[i])
			} else if value.Valid {
				_m.DefaultRouter = new(string)
				*_m.DefaultRouter = value.String
			}
		case role.FieldDataScope:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field data_scope", values[i])
			} else if value.Valid {
				_m.DataScope = new(int32)
				*_m.DataScope = int32(value.Int64)
			}
		case role.FieldMenuCheckStrictly:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field menu_check_strictly", values[i])
			} else if value.Valid {
				_m.MenuCheckStrictly = new(int32)
				*_m.MenuCheckStrictly = int32(value.Int64)
			}
		case role.FieldDeptCheckStrictly:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dept_check_strictly", values[i])
			} else if value.Valid {
				_m.DeptCheckStrictly = new(int32)
				*_m.DeptCheckStrictly = int32(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Role.
// This includes values selected through modifiers, order, etc.
func (_m *Role) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Role entity.
func (_m *Role) QueryUsers() *UserQuery {
	return NewRoleClient(_m.config).QueryUsers(_m)
}

// Update returns a builder for updating this Role.
// Note that you need to call Role.Unwrap() before calling this method if this Role
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Role) Update() *RoleUpdateOne {
	return NewRoleClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Role entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Role) Unwrap() *Role {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("gen: Role is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Role) String() string {
	var builder strings.Builder
	builder.WriteString("Role(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.Status; v != nil {
		builder.WriteString("status=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("domain_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.DomainID))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.DefaultRouter; v != nil {
		builder.WriteString("default_router=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.DataScope; v != nil {
		builder.WriteString("data_scope=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.MenuCheckStrictly; v != nil {
		builder.WriteString("menu_check_strictly=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := _m.DeptCheckStrictly; v != nil {
		builder.WriteString("dept_check_strictly=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Roles is a parsable slice of Role.
type Roles []*Role
