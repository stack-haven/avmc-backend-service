// Code generated by ent, DO NOT EDIT.

package gen

import (
	"backend-service/app/avmc/admin/internal/data/ent/gen/post"
	"backend-service/app/avmc/admin/internal/data/ent/gen/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks     []Hook
	mutation  *PostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PostUpdate builder.
func (_u *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PostUpdate) SetUpdatedAt(v time.Time) *PostUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *PostUpdate) SetDeletedAt(v time.Time) *PostUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *PostUpdate) SetNillableDeletedAt(v *time.Time) *PostUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *PostUpdate) ClearDeletedAt() *PostUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *PostUpdate) SetStatus(v int32) *PostUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *PostUpdate) SetNillableStatus(v *int32) *PostUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *PostUpdate) AddStatus(v int32) *PostUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// SetDomainID sets the "domain_id" field.
func (_u *PostUpdate) SetDomainID(v uint32) *PostUpdate {
	_u.mutation.ResetDomainID()
	_u.mutation.SetDomainID(v)
	return _u
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (_u *PostUpdate) SetNillableDomainID(v *uint32) *PostUpdate {
	if v != nil {
		_u.SetDomainID(*v)
	}
	return _u
}

// AddDomainID adds value to the "domain_id" field.
func (_u *PostUpdate) AddDomainID(v int32) *PostUpdate {
	_u.mutation.AddDomainID(v)
	return _u
}

// SetName sets the "name" field.
func (_u *PostUpdate) SetName(v string) *PostUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PostUpdate) SetNillableName(v *string) *PostUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// Mutation returns the PostMutation object of the builder.
func (_u *PostUpdate) Mutation() *PostMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PostUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PostUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PostUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PostUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PostUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := post.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`gen: validator failed for field "Post.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DomainID(); ok {
		if err := post.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`gen: validator failed for field "Post.domain_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := post.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Post.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PostUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PostUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(post.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(post.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(post.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(post.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.DomainID(); ok {
		_spec.SetField(post.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDomainID(); ok {
		_spec.AddField(post.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(post.FieldName, field.TypeString, value)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PostUpdateOne) SetUpdatedAt(v time.Time) *PostUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *PostUpdateOne) SetDeletedAt(v time.Time) *PostUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *PostUpdateOne) SetNillableDeletedAt(v *time.Time) *PostUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *PostUpdateOne) ClearDeletedAt() *PostUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *PostUpdateOne) SetStatus(v int32) *PostUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *PostUpdateOne) SetNillableStatus(v *int32) *PostUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *PostUpdateOne) AddStatus(v int32) *PostUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// SetDomainID sets the "domain_id" field.
func (_u *PostUpdateOne) SetDomainID(v uint32) *PostUpdateOne {
	_u.mutation.ResetDomainID()
	_u.mutation.SetDomainID(v)
	return _u
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (_u *PostUpdateOne) SetNillableDomainID(v *uint32) *PostUpdateOne {
	if v != nil {
		_u.SetDomainID(*v)
	}
	return _u
}

// AddDomainID adds value to the "domain_id" field.
func (_u *PostUpdateOne) AddDomainID(v int32) *PostUpdateOne {
	_u.mutation.AddDomainID(v)
	return _u
}

// SetName sets the "name" field.
func (_u *PostUpdateOne) SetName(v string) *PostUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PostUpdateOne) SetNillableName(v *string) *PostUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// Mutation returns the PostMutation object of the builder.
func (_u *PostUpdateOne) Mutation() *PostMutation {
	return _u.mutation
}

// Where appends a list predicates to the PostUpdate builder.
func (_u *PostUpdateOne) Where(ps ...predicate.Post) *PostUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Post entity.
func (_u *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PostUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PostUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PostUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := post.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`gen: validator failed for field "Post.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DomainID(); ok {
		if err := post.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`gen: validator failed for field "Post.domain_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := post.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Post.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *PostUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(post.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(post.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(post.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(post.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.DomainID(); ok {
		_spec.SetField(post.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDomainID(); ok {
		_spec.AddField(post.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(post.FieldName, field.TypeString, value)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Post{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
