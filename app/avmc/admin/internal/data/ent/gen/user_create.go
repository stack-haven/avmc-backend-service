// Code generated by ent, DO NOT EDIT.

package gen

import (
	"backend-service/app/avmc/admin/internal/data/ent/gen/post"
	"backend-service/app/avmc/admin/internal/data/ent/gen/role"
	"backend-service/app/avmc/admin/internal/data/ent/gen/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserCreate) SetCreatedAt(v time.Time) *UserCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableCreatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *UserCreate) SetUpdatedAt(v time.Time) *UserCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableUpdatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *UserCreate) SetDeletedAt(v time.Time) *UserCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableDeletedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *UserCreate) SetStatus(v int32) *UserCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *UserCreate) SetNillableStatus(v *int32) *UserCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetDomainID sets the "domain_id" field.
func (_c *UserCreate) SetDomainID(v uint32) *UserCreate {
	_c.mutation.SetDomainID(v)
	return _c
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (_c *UserCreate) SetNillableDomainID(v *uint32) *UserCreate {
	if v != nil {
		_c.SetDomainID(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *UserCreate) SetName(v string) *UserCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetPassword sets the "password" field.
func (_c *UserCreate) SetPassword(v string) *UserCreate {
	_c.mutation.SetPassword(v)
	return _c
}

// SetRealname sets the "realname" field.
func (_c *UserCreate) SetRealname(v string) *UserCreate {
	_c.mutation.SetRealname(v)
	return _c
}

// SetNillableRealname sets the "realname" field if the given value is not nil.
func (_c *UserCreate) SetNillableRealname(v *string) *UserCreate {
	if v != nil {
		_c.SetRealname(*v)
	}
	return _c
}

// SetNickname sets the "nickname" field.
func (_c *UserCreate) SetNickname(v string) *UserCreate {
	_c.mutation.SetNickname(v)
	return _c
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (_c *UserCreate) SetNillableNickname(v *string) *UserCreate {
	if v != nil {
		_c.SetNickname(*v)
	}
	return _c
}

// SetEmail sets the "email" field.
func (_c *UserCreate) SetEmail(v string) *UserCreate {
	_c.mutation.SetEmail(v)
	return _c
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_c *UserCreate) SetNillableEmail(v *string) *UserCreate {
	if v != nil {
		_c.SetEmail(*v)
	}
	return _c
}

// SetPhone sets the "phone" field.
func (_c *UserCreate) SetPhone(v string) *UserCreate {
	_c.mutation.SetPhone(v)
	return _c
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_c *UserCreate) SetNillablePhone(v *string) *UserCreate {
	if v != nil {
		_c.SetPhone(*v)
	}
	return _c
}

// SetAvatar sets the "avatar" field.
func (_c *UserCreate) SetAvatar(v string) *UserCreate {
	_c.mutation.SetAvatar(v)
	return _c
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (_c *UserCreate) SetNillableAvatar(v *string) *UserCreate {
	if v != nil {
		_c.SetAvatar(*v)
	}
	return _c
}

// SetBirthday sets the "birthday" field.
func (_c *UserCreate) SetBirthday(v time.Time) *UserCreate {
	_c.mutation.SetBirthday(v)
	return _c
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (_c *UserCreate) SetNillableBirthday(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetBirthday(*v)
	}
	return _c
}

// SetGender sets the "gender" field.
func (_c *UserCreate) SetGender(v int32) *UserCreate {
	_c.mutation.SetGender(v)
	return _c
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (_c *UserCreate) SetNillableGender(v *int32) *UserCreate {
	if v != nil {
		_c.SetGender(*v)
	}
	return _c
}

// SetAge sets the "age" field.
func (_c *UserCreate) SetAge(v int) *UserCreate {
	_c.mutation.SetAge(v)
	return _c
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (_c *UserCreate) SetNillableAge(v *int) *UserCreate {
	if v != nil {
		_c.SetAge(*v)
	}
	return _c
}

// SetLastLoginAt sets the "last_login_at" field.
func (_c *UserCreate) SetLastLoginAt(v time.Time) *UserCreate {
	_c.mutation.SetLastLoginAt(v)
	return _c
}

// SetNillableLastLoginAt sets the "last_login_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableLastLoginAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetLastLoginAt(*v)
	}
	return _c
}

// SetLastLoginIP sets the "last_login_ip" field.
func (_c *UserCreate) SetLastLoginIP(v string) *UserCreate {
	_c.mutation.SetLastLoginIP(v)
	return _c
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (_c *UserCreate) SetNillableLastLoginIP(v *string) *UserCreate {
	if v != nil {
		_c.SetLastLoginIP(*v)
	}
	return _c
}

// SetLoginCount sets the "login_count" field.
func (_c *UserCreate) SetLoginCount(v int) *UserCreate {
	_c.mutation.SetLoginCount(v)
	return _c
}

// SetNillableLoginCount sets the "login_count" field if the given value is not nil.
func (_c *UserCreate) SetNillableLoginCount(v *int) *UserCreate {
	if v != nil {
		_c.SetLoginCount(*v)
	}
	return _c
}

// SetSettings sets the "settings" field.
func (_c *UserCreate) SetSettings(v []string) *UserCreate {
	_c.mutation.SetSettings(v)
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *UserCreate) SetMetadata(v []string) *UserCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *UserCreate) SetDescription(v string) *UserCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *UserCreate) SetNillableDescription(v *string) *UserCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *UserCreate) SetID(v uint32) *UserCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (_c *UserCreate) AddRoleIDs(ids ...uint32) *UserCreate {
	_c.mutation.AddRoleIDs(ids...)
	return _c
}

// AddRoles adds the "roles" edges to the Role entity.
func (_c *UserCreate) AddRoles(v ...*Role) *UserCreate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRoleIDs(ids...)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (_c *UserCreate) AddPostIDs(ids ...uint32) *UserCreate {
	_c.mutation.AddPostIDs(ids...)
	return _c
}

// AddPosts adds the "posts" edges to the Post entity.
func (_c *UserCreate) AddPosts(v ...*Post) *UserCreate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPostIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_c *UserCreate) Mutation() *UserMutation {
	return _c.mutation
}

// Save creates the User in the database.
func (_c *UserCreate) Save(ctx context.Context) (*User, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserCreate) SaveX(ctx context.Context) *User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := user.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.DomainID(); !ok {
		v := user.DefaultDomainID()
		_c.mutation.SetDomainID(v)
	}
	if _, ok := _c.mutation.Gender(); !ok {
		v := user.DefaultGender
		_c.mutation.SetGender(v)
	}
	if _, ok := _c.mutation.LoginCount(); !ok {
		v := user.DefaultLoginCount
		_c.mutation.SetLoginCount(v)
	}
	if _, ok := _c.mutation.Settings(); !ok {
		v := user.DefaultSettings
		_c.mutation.SetSettings(v)
	}
	if _, ok := _c.mutation.Metadata(); !ok {
		v := user.DefaultMetadata
		_c.mutation.SetMetadata(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "User.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "User.updated_at"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "User.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`gen: validator failed for field "User.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DomainID(); !ok {
		return &ValidationError{Name: "domain_id", err: errors.New(`gen: missing required field "User.domain_id"`)}
	}
	if v, ok := _c.mutation.DomainID(); ok {
		if err := user.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`gen: validator failed for field "User.domain_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`gen: missing required field "User.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "User.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`gen: missing required field "User.password"`)}
	}
	if v, ok := _c.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`gen: validator failed for field "User.password": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Realname(); ok {
		if err := user.RealnameValidator(v); err != nil {
			return &ValidationError{Name: "realname", err: fmt.Errorf(`gen: validator failed for field "User.realname": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Nickname(); ok {
		if err := user.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`gen: validator failed for field "User.nickname": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`gen: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`gen: validator failed for field "User.phone": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Avatar(); ok {
		if err := user.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`gen: validator failed for field "User.avatar": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`gen: missing required field "User.gender"`)}
	}
	if v, ok := _c.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`gen: validator failed for field "User.gender": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Age(); ok {
		if err := user.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`gen: validator failed for field "User.age": %w`, err)}
		}
	}
	if v, ok := _c.mutation.LastLoginIP(); ok {
		if err := user.LastLoginIPValidator(v); err != nil {
			return &ValidationError{Name: "last_login_ip", err: fmt.Errorf(`gen: validator failed for field "User.last_login_ip": %w`, err)}
		}
	}
	if _, ok := _c.mutation.LoginCount(); !ok {
		return &ValidationError{Name: "login_count", err: errors.New(`gen: missing required field "User.login_count"`)}
	}
	if v, ok := _c.mutation.Description(); ok {
		if err := user.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`gen: validator failed for field "User.description": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := user.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`gen: validator failed for field "User.id": %w`, err)}
		}
	}
	return nil
}

func (_c *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeInt32, value)
		_node.Status = &value
	}
	if value, ok := _c.mutation.DomainID(); ok {
		_spec.SetField(user.FieldDomainID, field.TypeUint32, value)
		_node.DomainID = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := _c.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = &value
	}
	if value, ok := _c.mutation.Realname(); ok {
		_spec.SetField(user.FieldRealname, field.TypeString, value)
		_node.Realname = &value
	}
	if value, ok := _c.mutation.Nickname(); ok {
		_spec.SetField(user.FieldNickname, field.TypeString, value)
		_node.Nickname = &value
	}
	if value, ok := _c.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := _c.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
		_node.Phone = &value
	}
	if value, ok := _c.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
		_node.Avatar = &value
	}
	if value, ok := _c.mutation.Birthday(); ok {
		_spec.SetField(user.FieldBirthday, field.TypeTime, value)
		_node.Birthday = &value
	}
	if value, ok := _c.mutation.Gender(); ok {
		_spec.SetField(user.FieldGender, field.TypeInt32, value)
		_node.Gender = &value
	}
	if value, ok := _c.mutation.Age(); ok {
		_spec.SetField(user.FieldAge, field.TypeInt, value)
		_node.Age = &value
	}
	if value, ok := _c.mutation.LastLoginAt(); ok {
		_spec.SetField(user.FieldLastLoginAt, field.TypeTime, value)
		_node.LastLoginAt = &value
	}
	if value, ok := _c.mutation.LastLoginIP(); ok {
		_spec.SetField(user.FieldLastLoginIP, field.TypeString, value)
		_node.LastLoginIP = &value
	}
	if value, ok := _c.mutation.LoginCount(); ok {
		_spec.SetField(user.FieldLoginCount, field.TypeInt, value)
		_node.LoginCount = &value
	}
	if value, ok := _c.mutation.Settings(); ok {
		_spec.SetField(user.FieldSettings, field.TypeJSON, value)
		_node.Settings = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(user.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(user.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if nodes := _c.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	_c.conflict = opts
	return &UserUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: _c,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsert) SetUpdatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedAt() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsert) SetDeletedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateDeletedAt() *UserUpsert {
	u.SetExcluded(user.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsert) ClearDeletedAt() *UserUpsert {
	u.SetNull(user.FieldDeletedAt)
	return u
}

// SetStatus sets the "status" field.
func (u *UserUpsert) SetStatus(v int32) *UserUpsert {
	u.Set(user.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsert) UpdateStatus() *UserUpsert {
	u.SetExcluded(user.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *UserUpsert) AddStatus(v int32) *UserUpsert {
	u.Add(user.FieldStatus, v)
	return u
}

// SetDomainID sets the "domain_id" field.
func (u *UserUpsert) SetDomainID(v uint32) *UserUpsert {
	u.Set(user.FieldDomainID, v)
	return u
}

// UpdateDomainID sets the "domain_id" field to the value that was provided on create.
func (u *UserUpsert) UpdateDomainID() *UserUpsert {
	u.SetExcluded(user.FieldDomainID)
	return u
}

// AddDomainID adds v to the "domain_id" field.
func (u *UserUpsert) AddDomainID(v uint32) *UserUpsert {
	u.Add(user.FieldDomainID, v)
	return u
}

// SetName sets the "name" field.
func (u *UserUpsert) SetName(v string) *UserUpsert {
	u.Set(user.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsert) UpdateName() *UserUpsert {
	u.SetExcluded(user.FieldName)
	return u
}

// SetPassword sets the "password" field.
func (u *UserUpsert) SetPassword(v string) *UserUpsert {
	u.Set(user.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsert) UpdatePassword() *UserUpsert {
	u.SetExcluded(user.FieldPassword)
	return u
}

// SetRealname sets the "realname" field.
func (u *UserUpsert) SetRealname(v string) *UserUpsert {
	u.Set(user.FieldRealname, v)
	return u
}

// UpdateRealname sets the "realname" field to the value that was provided on create.
func (u *UserUpsert) UpdateRealname() *UserUpsert {
	u.SetExcluded(user.FieldRealname)
	return u
}

// ClearRealname clears the value of the "realname" field.
func (u *UserUpsert) ClearRealname() *UserUpsert {
	u.SetNull(user.FieldRealname)
	return u
}

// SetNickname sets the "nickname" field.
func (u *UserUpsert) SetNickname(v string) *UserUpsert {
	u.Set(user.FieldNickname, v)
	return u
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *UserUpsert) UpdateNickname() *UserUpsert {
	u.SetExcluded(user.FieldNickname)
	return u
}

// ClearNickname clears the value of the "nickname" field.
func (u *UserUpsert) ClearNickname() *UserUpsert {
	u.SetNull(user.FieldNickname)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsert) ClearEmail() *UserUpsert {
	u.SetNull(user.FieldEmail)
	return u
}

// SetPhone sets the "phone" field.
func (u *UserUpsert) SetPhone(v string) *UserUpsert {
	u.Set(user.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsert) UpdatePhone() *UserUpsert {
	u.SetExcluded(user.FieldPhone)
	return u
}

// ClearPhone clears the value of the "phone" field.
func (u *UserUpsert) ClearPhone() *UserUpsert {
	u.SetNull(user.FieldPhone)
	return u
}

// SetAvatar sets the "avatar" field.
func (u *UserUpsert) SetAvatar(v string) *UserUpsert {
	u.Set(user.FieldAvatar, v)
	return u
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserUpsert) UpdateAvatar() *UserUpsert {
	u.SetExcluded(user.FieldAvatar)
	return u
}

// ClearAvatar clears the value of the "avatar" field.
func (u *UserUpsert) ClearAvatar() *UserUpsert {
	u.SetNull(user.FieldAvatar)
	return u
}

// SetBirthday sets the "birthday" field.
func (u *UserUpsert) SetBirthday(v time.Time) *UserUpsert {
	u.Set(user.FieldBirthday, v)
	return u
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *UserUpsert) UpdateBirthday() *UserUpsert {
	u.SetExcluded(user.FieldBirthday)
	return u
}

// ClearBirthday clears the value of the "birthday" field.
func (u *UserUpsert) ClearBirthday() *UserUpsert {
	u.SetNull(user.FieldBirthday)
	return u
}

// SetGender sets the "gender" field.
func (u *UserUpsert) SetGender(v int32) *UserUpsert {
	u.Set(user.FieldGender, v)
	return u
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *UserUpsert) UpdateGender() *UserUpsert {
	u.SetExcluded(user.FieldGender)
	return u
}

// AddGender adds v to the "gender" field.
func (u *UserUpsert) AddGender(v int32) *UserUpsert {
	u.Add(user.FieldGender, v)
	return u
}

// SetAge sets the "age" field.
func (u *UserUpsert) SetAge(v int) *UserUpsert {
	u.Set(user.FieldAge, v)
	return u
}

// UpdateAge sets the "age" field to the value that was provided on create.
func (u *UserUpsert) UpdateAge() *UserUpsert {
	u.SetExcluded(user.FieldAge)
	return u
}

// AddAge adds v to the "age" field.
func (u *UserUpsert) AddAge(v int) *UserUpsert {
	u.Add(user.FieldAge, v)
	return u
}

// ClearAge clears the value of the "age" field.
func (u *UserUpsert) ClearAge() *UserUpsert {
	u.SetNull(user.FieldAge)
	return u
}

// SetLastLoginAt sets the "last_login_at" field.
func (u *UserUpsert) SetLastLoginAt(v time.Time) *UserUpsert {
	u.Set(user.FieldLastLoginAt, v)
	return u
}

// UpdateLastLoginAt sets the "last_login_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastLoginAt() *UserUpsert {
	u.SetExcluded(user.FieldLastLoginAt)
	return u
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (u *UserUpsert) ClearLastLoginAt() *UserUpsert {
	u.SetNull(user.FieldLastLoginAt)
	return u
}

// SetLastLoginIP sets the "last_login_ip" field.
func (u *UserUpsert) SetLastLoginIP(v string) *UserUpsert {
	u.Set(user.FieldLastLoginIP, v)
	return u
}

// UpdateLastLoginIP sets the "last_login_ip" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastLoginIP() *UserUpsert {
	u.SetExcluded(user.FieldLastLoginIP)
	return u
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (u *UserUpsert) ClearLastLoginIP() *UserUpsert {
	u.SetNull(user.FieldLastLoginIP)
	return u
}

// SetLoginCount sets the "login_count" field.
func (u *UserUpsert) SetLoginCount(v int) *UserUpsert {
	u.Set(user.FieldLoginCount, v)
	return u
}

// UpdateLoginCount sets the "login_count" field to the value that was provided on create.
func (u *UserUpsert) UpdateLoginCount() *UserUpsert {
	u.SetExcluded(user.FieldLoginCount)
	return u
}

// AddLoginCount adds v to the "login_count" field.
func (u *UserUpsert) AddLoginCount(v int) *UserUpsert {
	u.Add(user.FieldLoginCount, v)
	return u
}

// SetSettings sets the "settings" field.
func (u *UserUpsert) SetSettings(v []string) *UserUpsert {
	u.Set(user.FieldSettings, v)
	return u
}

// UpdateSettings sets the "settings" field to the value that was provided on create.
func (u *UserUpsert) UpdateSettings() *UserUpsert {
	u.SetExcluded(user.FieldSettings)
	return u
}

// ClearSettings clears the value of the "settings" field.
func (u *UserUpsert) ClearSettings() *UserUpsert {
	u.SetNull(user.FieldSettings)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *UserUpsert) SetMetadata(v []string) *UserUpsert {
	u.Set(user.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *UserUpsert) UpdateMetadata() *UserUpsert {
	u.SetExcluded(user.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *UserUpsert) ClearMetadata() *UserUpsert {
	u.SetNull(user.FieldMetadata)
	return u
}

// SetDescription sets the "description" field.
func (u *UserUpsert) SetDescription(v string) *UserUpsert {
	u.Set(user.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UserUpsert) UpdateDescription() *UserUpsert {
	u.SetExcluded(user.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *UserUpsert) ClearDescription() *UserUpsert {
	u.SetNull(user.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(user.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(user.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertOne) SetUpdatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsertOne) SetDeletedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDeletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsertOne) ClearDeletedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetStatus sets the "status" field.
func (u *UserUpsertOne) SetStatus(v int32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *UserUpsertOne) AddStatus(v int32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateStatus() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStatus()
	})
}

// SetDomainID sets the "domain_id" field.
func (u *UserUpsertOne) SetDomainID(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDomainID(v)
	})
}

// AddDomainID adds v to the "domain_id" field.
func (u *UserUpsertOne) AddDomainID(v uint32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddDomainID(v)
	})
}

// UpdateDomainID sets the "domain_id" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDomainID() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDomainID()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertOne) SetName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertOne) SetPassword(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePassword() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// SetRealname sets the "realname" field.
func (u *UserUpsertOne) SetRealname(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRealname(v)
	})
}

// UpdateRealname sets the "realname" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRealname() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRealname()
	})
}

// ClearRealname clears the value of the "realname" field.
func (u *UserUpsertOne) ClearRealname() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearRealname()
	})
}

// SetNickname sets the "nickname" field.
func (u *UserUpsertOne) SetNickname(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateNickname() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNickname()
	})
}

// ClearNickname clears the value of the "nickname" field.
func (u *UserUpsertOne) ClearNickname() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearNickname()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsertOne) ClearEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmail()
	})
}

// SetPhone sets the "phone" field.
func (u *UserUpsertOne) SetPhone(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePhone() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *UserUpsertOne) ClearPhone() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPhone()
	})
}

// SetAvatar sets the "avatar" field.
func (u *UserUpsertOne) SetAvatar(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAvatar() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatar()
	})
}

// ClearAvatar clears the value of the "avatar" field.
func (u *UserUpsertOne) ClearAvatar() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearAvatar()
	})
}

// SetBirthday sets the "birthday" field.
func (u *UserUpsertOne) SetBirthday(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBirthday(v)
	})
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBirthday() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBirthday()
	})
}

// ClearBirthday clears the value of the "birthday" field.
func (u *UserUpsertOne) ClearBirthday() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearBirthday()
	})
}

// SetGender sets the "gender" field.
func (u *UserUpsertOne) SetGender(v int32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetGender(v)
	})
}

// AddGender adds v to the "gender" field.
func (u *UserUpsertOne) AddGender(v int32) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateGender() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGender()
	})
}

// SetAge sets the "age" field.
func (u *UserUpsertOne) SetAge(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAge(v)
	})
}

// AddAge adds v to the "age" field.
func (u *UserUpsertOne) AddAge(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddAge(v)
	})
}

// UpdateAge sets the "age" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAge() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAge()
	})
}

// ClearAge clears the value of the "age" field.
func (u *UserUpsertOne) ClearAge() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearAge()
	})
}

// SetLastLoginAt sets the "last_login_at" field.
func (u *UserUpsertOne) SetLastLoginAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLoginAt(v)
	})
}

// UpdateLastLoginAt sets the "last_login_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastLoginAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLoginAt()
	})
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (u *UserUpsertOne) ClearLastLoginAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLoginAt()
	})
}

// SetLastLoginIP sets the "last_login_ip" field.
func (u *UserUpsertOne) SetLastLoginIP(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLoginIP(v)
	})
}

// UpdateLastLoginIP sets the "last_login_ip" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastLoginIP() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLoginIP()
	})
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (u *UserUpsertOne) ClearLastLoginIP() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLoginIP()
	})
}

// SetLoginCount sets the "login_count" field.
func (u *UserUpsertOne) SetLoginCount(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLoginCount(v)
	})
}

// AddLoginCount adds v to the "login_count" field.
func (u *UserUpsertOne) AddLoginCount(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddLoginCount(v)
	})
}

// UpdateLoginCount sets the "login_count" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLoginCount() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLoginCount()
	})
}

// SetSettings sets the "settings" field.
func (u *UserUpsertOne) SetSettings(v []string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetSettings(v)
	})
}

// UpdateSettings sets the "settings" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateSettings() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSettings()
	})
}

// ClearSettings clears the value of the "settings" field.
func (u *UserUpsertOne) ClearSettings() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearSettings()
	})
}

// SetMetadata sets the "metadata" field.
func (u *UserUpsertOne) SetMetadata(v []string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateMetadata() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *UserUpsertOne) ClearMetadata() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearMetadata()
	})
}

// SetDescription sets the "description" field.
func (u *UserUpsertOne) SetDescription(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDescription() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *UserUpsertOne) ClearDescription() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (_c *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*User, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	_c.conflict = opts
	return &UserUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: _c,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(user.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(user.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertBulk) SetUpdatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UserUpsertBulk) SetDeletedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDeletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UserUpsertBulk) ClearDeletedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetStatus sets the "status" field.
func (u *UserUpsertBulk) SetStatus(v int32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *UserUpsertBulk) AddStatus(v int32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateStatus() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateStatus()
	})
}

// SetDomainID sets the "domain_id" field.
func (u *UserUpsertBulk) SetDomainID(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDomainID(v)
	})
}

// AddDomainID adds v to the "domain_id" field.
func (u *UserUpsertBulk) AddDomainID(v uint32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddDomainID(v)
	})
}

// UpdateDomainID sets the "domain_id" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDomainID() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDomainID()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertBulk) SetName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetPassword sets the "password" field.
func (u *UserUpsertBulk) SetPassword(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePassword() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePassword()
	})
}

// SetRealname sets the "realname" field.
func (u *UserUpsertBulk) SetRealname(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRealname(v)
	})
}

// UpdateRealname sets the "realname" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRealname() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRealname()
	})
}

// ClearRealname clears the value of the "realname" field.
func (u *UserUpsertBulk) ClearRealname() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearRealname()
	})
}

// SetNickname sets the "nickname" field.
func (u *UserUpsertBulk) SetNickname(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateNickname() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateNickname()
	})
}

// ClearNickname clears the value of the "nickname" field.
func (u *UserUpsertBulk) ClearNickname() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearNickname()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *UserUpsertBulk) ClearEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmail()
	})
}

// SetPhone sets the "phone" field.
func (u *UserUpsertBulk) SetPhone(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePhone() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *UserUpsertBulk) ClearPhone() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPhone()
	})
}

// SetAvatar sets the "avatar" field.
func (u *UserUpsertBulk) SetAvatar(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAvatar() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatar()
	})
}

// ClearAvatar clears the value of the "avatar" field.
func (u *UserUpsertBulk) ClearAvatar() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearAvatar()
	})
}

// SetBirthday sets the "birthday" field.
func (u *UserUpsertBulk) SetBirthday(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBirthday(v)
	})
}

// UpdateBirthday sets the "birthday" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBirthday() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBirthday()
	})
}

// ClearBirthday clears the value of the "birthday" field.
func (u *UserUpsertBulk) ClearBirthday() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearBirthday()
	})
}

// SetGender sets the "gender" field.
func (u *UserUpsertBulk) SetGender(v int32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetGender(v)
	})
}

// AddGender adds v to the "gender" field.
func (u *UserUpsertBulk) AddGender(v int32) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateGender() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateGender()
	})
}

// SetAge sets the "age" field.
func (u *UserUpsertBulk) SetAge(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAge(v)
	})
}

// AddAge adds v to the "age" field.
func (u *UserUpsertBulk) AddAge(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddAge(v)
	})
}

// UpdateAge sets the "age" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAge() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAge()
	})
}

// ClearAge clears the value of the "age" field.
func (u *UserUpsertBulk) ClearAge() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearAge()
	})
}

// SetLastLoginAt sets the "last_login_at" field.
func (u *UserUpsertBulk) SetLastLoginAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLoginAt(v)
	})
}

// UpdateLastLoginAt sets the "last_login_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastLoginAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLoginAt()
	})
}

// ClearLastLoginAt clears the value of the "last_login_at" field.
func (u *UserUpsertBulk) ClearLastLoginAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLoginAt()
	})
}

// SetLastLoginIP sets the "last_login_ip" field.
func (u *UserUpsertBulk) SetLastLoginIP(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastLoginIP(v)
	})
}

// UpdateLastLoginIP sets the "last_login_ip" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastLoginIP() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastLoginIP()
	})
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (u *UserUpsertBulk) ClearLastLoginIP() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastLoginIP()
	})
}

// SetLoginCount sets the "login_count" field.
func (u *UserUpsertBulk) SetLoginCount(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLoginCount(v)
	})
}

// AddLoginCount adds v to the "login_count" field.
func (u *UserUpsertBulk) AddLoginCount(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddLoginCount(v)
	})
}

// UpdateLoginCount sets the "login_count" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLoginCount() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLoginCount()
	})
}

// SetSettings sets the "settings" field.
func (u *UserUpsertBulk) SetSettings(v []string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetSettings(v)
	})
}

// UpdateSettings sets the "settings" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateSettings() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSettings()
	})
}

// ClearSettings clears the value of the "settings" field.
func (u *UserUpsertBulk) ClearSettings() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearSettings()
	})
}

// SetMetadata sets the "metadata" field.
func (u *UserUpsertBulk) SetMetadata(v []string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateMetadata() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *UserUpsertBulk) ClearMetadata() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearMetadata()
	})
}

// SetDescription sets the "description" field.
func (u *UserUpsertBulk) SetDescription(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDescription() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *UserUpsertBulk) ClearDescription() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
