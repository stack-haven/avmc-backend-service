// Code generated by ent, DO NOT EDIT.

package gen

import (
	"backend-service/app/avmc/admin/internal/data/ent/gen/menu"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MenuCreate is the builder for creating a Menu entity.
type MenuCreate struct {
	config
	mutation *MenuMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStatus sets the "status" field.
func (_c *MenuCreate) SetStatus(v int32) *MenuCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *MenuCreate) SetNillableStatus(v *int32) *MenuCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *MenuCreate) SetCreatedAt(v time.Time) *MenuCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *MenuCreate) SetNillableCreatedAt(v *time.Time) *MenuCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *MenuCreate) SetUpdatedAt(v time.Time) *MenuCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *MenuCreate) SetNillableUpdatedAt(v *time.Time) *MenuCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *MenuCreate) SetDeletedAt(v time.Time) *MenuCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *MenuCreate) SetNillableDeletedAt(v *time.Time) *MenuCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *MenuCreate) SetName(v string) *MenuCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *MenuCreate) SetNillableName(v *string) *MenuCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetPath sets the "path" field.
func (_c *MenuCreate) SetPath(v string) *MenuCreate {
	_c.mutation.SetPath(v)
	return _c
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_c *MenuCreate) SetNillablePath(v *string) *MenuCreate {
	if v != nil {
		_c.SetPath(*v)
	}
	return _c
}

// SetType sets the "type" field.
func (_c *MenuCreate) SetType(v int32) *MenuCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *MenuCreate) SetNillableType(v *int32) *MenuCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetComponent sets the "component" field.
func (_c *MenuCreate) SetComponent(v string) *MenuCreate {
	_c.mutation.SetComponent(v)
	return _c
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (_c *MenuCreate) SetNillableComponent(v *string) *MenuCreate {
	if v != nil {
		_c.SetComponent(*v)
	}
	return _c
}

// SetPid sets the "pid" field.
func (_c *MenuCreate) SetPid(v uint32) *MenuCreate {
	_c.mutation.SetPid(v)
	return _c
}

// SetNillablePid sets the "pid" field if the given value is not nil.
func (_c *MenuCreate) SetNillablePid(v *uint32) *MenuCreate {
	if v != nil {
		_c.SetPid(*v)
	}
	return _c
}

// SetRedirect sets the "redirect" field.
func (_c *MenuCreate) SetRedirect(v string) *MenuCreate {
	_c.mutation.SetRedirect(v)
	return _c
}

// SetNillableRedirect sets the "redirect" field if the given value is not nil.
func (_c *MenuCreate) SetNillableRedirect(v *string) *MenuCreate {
	if v != nil {
		_c.SetRedirect(*v)
	}
	return _c
}

// SetAuthCode sets the "auth_code" field.
func (_c *MenuCreate) SetAuthCode(v string) *MenuCreate {
	_c.mutation.SetAuthCode(v)
	return _c
}

// SetNillableAuthCode sets the "auth_code" field if the given value is not nil.
func (_c *MenuCreate) SetNillableAuthCode(v *string) *MenuCreate {
	if v != nil {
		_c.SetAuthCode(*v)
	}
	return _c
}

// SetActiveIcon sets the "active_icon" field.
func (_c *MenuCreate) SetActiveIcon(v string) *MenuCreate {
	_c.mutation.SetActiveIcon(v)
	return _c
}

// SetNillableActiveIcon sets the "active_icon" field if the given value is not nil.
func (_c *MenuCreate) SetNillableActiveIcon(v *string) *MenuCreate {
	if v != nil {
		_c.SetActiveIcon(*v)
	}
	return _c
}

// SetActivePath sets the "active_path" field.
func (_c *MenuCreate) SetActivePath(v string) *MenuCreate {
	_c.mutation.SetActivePath(v)
	return _c
}

// SetNillableActivePath sets the "active_path" field if the given value is not nil.
func (_c *MenuCreate) SetNillableActivePath(v *string) *MenuCreate {
	if v != nil {
		_c.SetActivePath(*v)
	}
	return _c
}

// SetAffixTab sets the "affix_tab" field.
func (_c *MenuCreate) SetAffixTab(v bool) *MenuCreate {
	_c.mutation.SetAffixTab(v)
	return _c
}

// SetNillableAffixTab sets the "affix_tab" field if the given value is not nil.
func (_c *MenuCreate) SetNillableAffixTab(v *bool) *MenuCreate {
	if v != nil {
		_c.SetAffixTab(*v)
	}
	return _c
}

// SetAffixTabOrder sets the "affix_tab_order" field.
func (_c *MenuCreate) SetAffixTabOrder(v int32) *MenuCreate {
	_c.mutation.SetAffixTabOrder(v)
	return _c
}

// SetNillableAffixTabOrder sets the "affix_tab_order" field if the given value is not nil.
func (_c *MenuCreate) SetNillableAffixTabOrder(v *int32) *MenuCreate {
	if v != nil {
		_c.SetAffixTabOrder(*v)
	}
	return _c
}

// SetBadge sets the "badge" field.
func (_c *MenuCreate) SetBadge(v string) *MenuCreate {
	_c.mutation.SetBadge(v)
	return _c
}

// SetNillableBadge sets the "badge" field if the given value is not nil.
func (_c *MenuCreate) SetNillableBadge(v *string) *MenuCreate {
	if v != nil {
		_c.SetBadge(*v)
	}
	return _c
}

// SetBadgeType sets the "badge_type" field.
func (_c *MenuCreate) SetBadgeType(v int32) *MenuCreate {
	_c.mutation.SetBadgeType(v)
	return _c
}

// SetNillableBadgeType sets the "badge_type" field if the given value is not nil.
func (_c *MenuCreate) SetNillableBadgeType(v *int32) *MenuCreate {
	if v != nil {
		_c.SetBadgeType(*v)
	}
	return _c
}

// SetBadgeVariants sets the "badge_variants" field.
func (_c *MenuCreate) SetBadgeVariants(v int32) *MenuCreate {
	_c.mutation.SetBadgeVariants(v)
	return _c
}

// SetNillableBadgeVariants sets the "badge_variants" field if the given value is not nil.
func (_c *MenuCreate) SetNillableBadgeVariants(v *int32) *MenuCreate {
	if v != nil {
		_c.SetBadgeVariants(*v)
	}
	return _c
}

// SetHideChildrenInMenu sets the "hide_children_in_menu" field.
func (_c *MenuCreate) SetHideChildrenInMenu(v bool) *MenuCreate {
	_c.mutation.SetHideChildrenInMenu(v)
	return _c
}

// SetNillableHideChildrenInMenu sets the "hide_children_in_menu" field if the given value is not nil.
func (_c *MenuCreate) SetNillableHideChildrenInMenu(v *bool) *MenuCreate {
	if v != nil {
		_c.SetHideChildrenInMenu(*v)
	}
	return _c
}

// SetHideInBreadcrumb sets the "hide_in_breadcrumb" field.
func (_c *MenuCreate) SetHideInBreadcrumb(v bool) *MenuCreate {
	_c.mutation.SetHideInBreadcrumb(v)
	return _c
}

// SetNillableHideInBreadcrumb sets the "hide_in_breadcrumb" field if the given value is not nil.
func (_c *MenuCreate) SetNillableHideInBreadcrumb(v *bool) *MenuCreate {
	if v != nil {
		_c.SetHideInBreadcrumb(*v)
	}
	return _c
}

// SetHideInMenu sets the "hide_in_menu" field.
func (_c *MenuCreate) SetHideInMenu(v bool) *MenuCreate {
	_c.mutation.SetHideInMenu(v)
	return _c
}

// SetNillableHideInMenu sets the "hide_in_menu" field if the given value is not nil.
func (_c *MenuCreate) SetNillableHideInMenu(v *bool) *MenuCreate {
	if v != nil {
		_c.SetHideInMenu(*v)
	}
	return _c
}

// SetHideInTab sets the "hide_in_tab" field.
func (_c *MenuCreate) SetHideInTab(v bool) *MenuCreate {
	_c.mutation.SetHideInTab(v)
	return _c
}

// SetNillableHideInTab sets the "hide_in_tab" field if the given value is not nil.
func (_c *MenuCreate) SetNillableHideInTab(v *bool) *MenuCreate {
	if v != nil {
		_c.SetHideInTab(*v)
	}
	return _c
}

// SetIcon sets the "icon" field.
func (_c *MenuCreate) SetIcon(v string) *MenuCreate {
	_c.mutation.SetIcon(v)
	return _c
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_c *MenuCreate) SetNillableIcon(v *string) *MenuCreate {
	if v != nil {
		_c.SetIcon(*v)
	}
	return _c
}

// SetIframeSrc sets the "iframe_src" field.
func (_c *MenuCreate) SetIframeSrc(v string) *MenuCreate {
	_c.mutation.SetIframeSrc(v)
	return _c
}

// SetNillableIframeSrc sets the "iframe_src" field if the given value is not nil.
func (_c *MenuCreate) SetNillableIframeSrc(v *string) *MenuCreate {
	if v != nil {
		_c.SetIframeSrc(*v)
	}
	return _c
}

// SetKeepAlive sets the "keep_alive" field.
func (_c *MenuCreate) SetKeepAlive(v bool) *MenuCreate {
	_c.mutation.SetKeepAlive(v)
	return _c
}

// SetNillableKeepAlive sets the "keep_alive" field if the given value is not nil.
func (_c *MenuCreate) SetNillableKeepAlive(v *bool) *MenuCreate {
	if v != nil {
		_c.SetKeepAlive(*v)
	}
	return _c
}

// SetLink sets the "link" field.
func (_c *MenuCreate) SetLink(v string) *MenuCreate {
	_c.mutation.SetLink(v)
	return _c
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (_c *MenuCreate) SetNillableLink(v *string) *MenuCreate {
	if v != nil {
		_c.SetLink(*v)
	}
	return _c
}

// SetMaxNumOfOpenTab sets the "max_num_of_open_tab" field.
func (_c *MenuCreate) SetMaxNumOfOpenTab(v int32) *MenuCreate {
	_c.mutation.SetMaxNumOfOpenTab(v)
	return _c
}

// SetNillableMaxNumOfOpenTab sets the "max_num_of_open_tab" field if the given value is not nil.
func (_c *MenuCreate) SetNillableMaxNumOfOpenTab(v *int32) *MenuCreate {
	if v != nil {
		_c.SetMaxNumOfOpenTab(*v)
	}
	return _c
}

// SetNoBasicLayout sets the "no_basic_layout" field.
func (_c *MenuCreate) SetNoBasicLayout(v bool) *MenuCreate {
	_c.mutation.SetNoBasicLayout(v)
	return _c
}

// SetNillableNoBasicLayout sets the "no_basic_layout" field if the given value is not nil.
func (_c *MenuCreate) SetNillableNoBasicLayout(v *bool) *MenuCreate {
	if v != nil {
		_c.SetNoBasicLayout(*v)
	}
	return _c
}

// SetOpenInNewWindow sets the "open_in_new_window" field.
func (_c *MenuCreate) SetOpenInNewWindow(v bool) *MenuCreate {
	_c.mutation.SetOpenInNewWindow(v)
	return _c
}

// SetNillableOpenInNewWindow sets the "open_in_new_window" field if the given value is not nil.
func (_c *MenuCreate) SetNillableOpenInNewWindow(v *bool) *MenuCreate {
	if v != nil {
		_c.SetOpenInNewWindow(*v)
	}
	return _c
}

// SetSort sets the "sort" field.
func (_c *MenuCreate) SetSort(v int32) *MenuCreate {
	_c.mutation.SetSort(v)
	return _c
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_c *MenuCreate) SetNillableSort(v *int32) *MenuCreate {
	if v != nil {
		_c.SetSort(*v)
	}
	return _c
}

// SetQuery sets the "query" field.
func (_c *MenuCreate) SetQuery(v string) *MenuCreate {
	_c.mutation.SetQuery(v)
	return _c
}

// SetNillableQuery sets the "query" field if the given value is not nil.
func (_c *MenuCreate) SetNillableQuery(v *string) *MenuCreate {
	if v != nil {
		_c.SetQuery(*v)
	}
	return _c
}

// SetTitle sets the "title" field.
func (_c *MenuCreate) SetTitle(v string) *MenuCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_c *MenuCreate) SetNillableTitle(v *string) *MenuCreate {
	if v != nil {
		_c.SetTitle(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *MenuCreate) SetID(v uint32) *MenuCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetParentID sets the "parent" edge to the Menu entity by ID.
func (_c *MenuCreate) SetParentID(id uint32) *MenuCreate {
	_c.mutation.SetParentID(id)
	return _c
}

// SetNillableParentID sets the "parent" edge to the Menu entity by ID if the given value is not nil.
func (_c *MenuCreate) SetNillableParentID(id *uint32) *MenuCreate {
	if id != nil {
		_c = _c.SetParentID(*id)
	}
	return _c
}

// SetParent sets the "parent" edge to the Menu entity.
func (_c *MenuCreate) SetParent(v *Menu) *MenuCreate {
	return _c.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (_c *MenuCreate) AddChildIDs(ids ...uint32) *MenuCreate {
	_c.mutation.AddChildIDs(ids...)
	return _c
}

// AddChildren adds the "children" edges to the Menu entity.
func (_c *MenuCreate) AddChildren(v ...*Menu) *MenuCreate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChildIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (_c *MenuCreate) Mutation() *MenuMutation {
	return _c.mutation
}

// Save creates the Menu in the database.
func (_c *MenuCreate) Save(ctx context.Context) (*Menu, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *MenuCreate) SaveX(ctx context.Context) *Menu {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MenuCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MenuCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *MenuCreate) defaults() error {
	if _, ok := _c.mutation.Status(); !ok {
		v := menu.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if menu.DefaultCreatedAt == nil {
			return fmt.Errorf("gen: uninitialized menu.DefaultCreatedAt (forgotten import gen/runtime?)")
		}
		v := menu.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if menu.DefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized menu.DefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := menu.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Name(); !ok {
		v := menu.DefaultName
		_c.mutation.SetName(v)
	}
	if _, ok := _c.mutation.Path(); !ok {
		v := menu.DefaultPath
		_c.mutation.SetPath(v)
	}
	if _, ok := _c.mutation.GetType(); !ok {
		v := menu.DefaultType
		_c.mutation.SetType(v)
	}
	if _, ok := _c.mutation.Component(); !ok {
		v := menu.DefaultComponent
		_c.mutation.SetComponent(v)
	}
	if _, ok := _c.mutation.Pid(); !ok {
		v := menu.DefaultPid
		_c.mutation.SetPid(v)
	}
	if _, ok := _c.mutation.Redirect(); !ok {
		v := menu.DefaultRedirect
		_c.mutation.SetRedirect(v)
	}
	if _, ok := _c.mutation.AuthCode(); !ok {
		v := menu.DefaultAuthCode
		_c.mutation.SetAuthCode(v)
	}
	if _, ok := _c.mutation.ActiveIcon(); !ok {
		v := menu.DefaultActiveIcon
		_c.mutation.SetActiveIcon(v)
	}
	if _, ok := _c.mutation.ActivePath(); !ok {
		v := menu.DefaultActivePath
		_c.mutation.SetActivePath(v)
	}
	if _, ok := _c.mutation.AffixTab(); !ok {
		v := menu.DefaultAffixTab
		_c.mutation.SetAffixTab(v)
	}
	if _, ok := _c.mutation.AffixTabOrder(); !ok {
		v := menu.DefaultAffixTabOrder
		_c.mutation.SetAffixTabOrder(v)
	}
	if _, ok := _c.mutation.Badge(); !ok {
		v := menu.DefaultBadge
		_c.mutation.SetBadge(v)
	}
	if _, ok := _c.mutation.BadgeType(); !ok {
		v := menu.DefaultBadgeType
		_c.mutation.SetBadgeType(v)
	}
	if _, ok := _c.mutation.BadgeVariants(); !ok {
		v := menu.DefaultBadgeVariants
		_c.mutation.SetBadgeVariants(v)
	}
	if _, ok := _c.mutation.HideChildrenInMenu(); !ok {
		v := menu.DefaultHideChildrenInMenu
		_c.mutation.SetHideChildrenInMenu(v)
	}
	if _, ok := _c.mutation.HideInBreadcrumb(); !ok {
		v := menu.DefaultHideInBreadcrumb
		_c.mutation.SetHideInBreadcrumb(v)
	}
	if _, ok := _c.mutation.HideInMenu(); !ok {
		v := menu.DefaultHideInMenu
		_c.mutation.SetHideInMenu(v)
	}
	if _, ok := _c.mutation.HideInTab(); !ok {
		v := menu.DefaultHideInTab
		_c.mutation.SetHideInTab(v)
	}
	if _, ok := _c.mutation.Icon(); !ok {
		v := menu.DefaultIcon
		_c.mutation.SetIcon(v)
	}
	if _, ok := _c.mutation.IframeSrc(); !ok {
		v := menu.DefaultIframeSrc
		_c.mutation.SetIframeSrc(v)
	}
	if _, ok := _c.mutation.KeepAlive(); !ok {
		v := menu.DefaultKeepAlive
		_c.mutation.SetKeepAlive(v)
	}
	if _, ok := _c.mutation.Link(); !ok {
		v := menu.DefaultLink
		_c.mutation.SetLink(v)
	}
	if _, ok := _c.mutation.MaxNumOfOpenTab(); !ok {
		v := menu.DefaultMaxNumOfOpenTab
		_c.mutation.SetMaxNumOfOpenTab(v)
	}
	if _, ok := _c.mutation.NoBasicLayout(); !ok {
		v := menu.DefaultNoBasicLayout
		_c.mutation.SetNoBasicLayout(v)
	}
	if _, ok := _c.mutation.OpenInNewWindow(); !ok {
		v := menu.DefaultOpenInNewWindow
		_c.mutation.SetOpenInNewWindow(v)
	}
	if _, ok := _c.mutation.Sort(); !ok {
		v := menu.DefaultSort
		_c.mutation.SetSort(v)
	}
	if _, ok := _c.mutation.Query(); !ok {
		v := menu.DefaultQuery
		_c.mutation.SetQuery(v)
	}
	if _, ok := _c.mutation.Title(); !ok {
		v := menu.DefaultTitle
		_c.mutation.SetTitle(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *MenuCreate) check() error {
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`gen: missing required field "Menu.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := menu.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`gen: validator failed for field "Menu.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "Menu.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "Menu.updated_at"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`gen: missing required field "Menu.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := menu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Menu.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.AuthCode(); !ok {
		return &ValidationError{Name: "auth_code", err: errors.New(`gen: missing required field "Menu.auth_code"`)}
	}
	if _, ok := _c.mutation.ActiveIcon(); !ok {
		return &ValidationError{Name: "active_icon", err: errors.New(`gen: missing required field "Menu.active_icon"`)}
	}
	if _, ok := _c.mutation.ActivePath(); !ok {
		return &ValidationError{Name: "active_path", err: errors.New(`gen: missing required field "Menu.active_path"`)}
	}
	if _, ok := _c.mutation.AffixTab(); !ok {
		return &ValidationError{Name: "affix_tab", err: errors.New(`gen: missing required field "Menu.affix_tab"`)}
	}
	if _, ok := _c.mutation.AffixTabOrder(); !ok {
		return &ValidationError{Name: "affix_tab_order", err: errors.New(`gen: missing required field "Menu.affix_tab_order"`)}
	}
	if _, ok := _c.mutation.Badge(); !ok {
		return &ValidationError{Name: "badge", err: errors.New(`gen: missing required field "Menu.badge"`)}
	}
	if _, ok := _c.mutation.BadgeType(); !ok {
		return &ValidationError{Name: "badge_type", err: errors.New(`gen: missing required field "Menu.badge_type"`)}
	}
	if _, ok := _c.mutation.BadgeVariants(); !ok {
		return &ValidationError{Name: "badge_variants", err: errors.New(`gen: missing required field "Menu.badge_variants"`)}
	}
	if _, ok := _c.mutation.HideChildrenInMenu(); !ok {
		return &ValidationError{Name: "hide_children_in_menu", err: errors.New(`gen: missing required field "Menu.hide_children_in_menu"`)}
	}
	if _, ok := _c.mutation.HideInBreadcrumb(); !ok {
		return &ValidationError{Name: "hide_in_breadcrumb", err: errors.New(`gen: missing required field "Menu.hide_in_breadcrumb"`)}
	}
	if _, ok := _c.mutation.HideInMenu(); !ok {
		return &ValidationError{Name: "hide_in_menu", err: errors.New(`gen: missing required field "Menu.hide_in_menu"`)}
	}
	if _, ok := _c.mutation.HideInTab(); !ok {
		return &ValidationError{Name: "hide_in_tab", err: errors.New(`gen: missing required field "Menu.hide_in_tab"`)}
	}
	if _, ok := _c.mutation.Icon(); !ok {
		return &ValidationError{Name: "icon", err: errors.New(`gen: missing required field "Menu.icon"`)}
	}
	if v, ok := _c.mutation.Icon(); ok {
		if err := menu.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`gen: validator failed for field "Menu.icon": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IframeSrc(); !ok {
		return &ValidationError{Name: "iframe_src", err: errors.New(`gen: missing required field "Menu.iframe_src"`)}
	}
	if _, ok := _c.mutation.KeepAlive(); !ok {
		return &ValidationError{Name: "keep_alive", err: errors.New(`gen: missing required field "Menu.keep_alive"`)}
	}
	if _, ok := _c.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`gen: missing required field "Menu.link"`)}
	}
	if _, ok := _c.mutation.MaxNumOfOpenTab(); !ok {
		return &ValidationError{Name: "max_num_of_open_tab", err: errors.New(`gen: missing required field "Menu.max_num_of_open_tab"`)}
	}
	if _, ok := _c.mutation.NoBasicLayout(); !ok {
		return &ValidationError{Name: "no_basic_layout", err: errors.New(`gen: missing required field "Menu.no_basic_layout"`)}
	}
	if _, ok := _c.mutation.OpenInNewWindow(); !ok {
		return &ValidationError{Name: "open_in_new_window", err: errors.New(`gen: missing required field "Menu.open_in_new_window"`)}
	}
	if _, ok := _c.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`gen: missing required field "Menu.sort"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`gen: missing required field "Menu.title"`)}
	}
	if v, ok := _c.mutation.Title(); ok {
		if err := menu.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`gen: validator failed for field "Menu.title": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := menu.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`gen: validator failed for field "Menu.id": %w`, err)}
		}
	}
	return nil
}

func (_c *MenuCreate) sqlSave(ctx context.Context) (*Menu, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *MenuCreate) createSpec() (*Menu, *sqlgraph.CreateSpec) {
	var (
		_node = &Menu{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(menu.Table, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeInt32, value)
		_node.Status = &value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(menu.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(menu.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(menu.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Path(); ok {
		_spec.SetField(menu.FieldPath, field.TypeString, value)
		_node.Path = &value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(menu.FieldType, field.TypeInt32, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Component(); ok {
		_spec.SetField(menu.FieldComponent, field.TypeString, value)
		_node.Component = &value
	}
	if value, ok := _c.mutation.Redirect(); ok {
		_spec.SetField(menu.FieldRedirect, field.TypeString, value)
		_node.Redirect = &value
	}
	if value, ok := _c.mutation.AuthCode(); ok {
		_spec.SetField(menu.FieldAuthCode, field.TypeString, value)
		_node.AuthCode = &value
	}
	if value, ok := _c.mutation.ActiveIcon(); ok {
		_spec.SetField(menu.FieldActiveIcon, field.TypeString, value)
		_node.ActiveIcon = &value
	}
	if value, ok := _c.mutation.ActivePath(); ok {
		_spec.SetField(menu.FieldActivePath, field.TypeString, value)
		_node.ActivePath = &value
	}
	if value, ok := _c.mutation.AffixTab(); ok {
		_spec.SetField(menu.FieldAffixTab, field.TypeBool, value)
		_node.AffixTab = &value
	}
	if value, ok := _c.mutation.AffixTabOrder(); ok {
		_spec.SetField(menu.FieldAffixTabOrder, field.TypeInt32, value)
		_node.AffixTabOrder = &value
	}
	if value, ok := _c.mutation.Badge(); ok {
		_spec.SetField(menu.FieldBadge, field.TypeString, value)
		_node.Badge = &value
	}
	if value, ok := _c.mutation.BadgeType(); ok {
		_spec.SetField(menu.FieldBadgeType, field.TypeInt32, value)
		_node.BadgeType = &value
	}
	if value, ok := _c.mutation.BadgeVariants(); ok {
		_spec.SetField(menu.FieldBadgeVariants, field.TypeInt32, value)
		_node.BadgeVariants = &value
	}
	if value, ok := _c.mutation.HideChildrenInMenu(); ok {
		_spec.SetField(menu.FieldHideChildrenInMenu, field.TypeBool, value)
		_node.HideChildrenInMenu = &value
	}
	if value, ok := _c.mutation.HideInBreadcrumb(); ok {
		_spec.SetField(menu.FieldHideInBreadcrumb, field.TypeBool, value)
		_node.HideInBreadcrumb = &value
	}
	if value, ok := _c.mutation.HideInMenu(); ok {
		_spec.SetField(menu.FieldHideInMenu, field.TypeBool, value)
		_node.HideInMenu = &value
	}
	if value, ok := _c.mutation.HideInTab(); ok {
		_spec.SetField(menu.FieldHideInTab, field.TypeBool, value)
		_node.HideInTab = &value
	}
	if value, ok := _c.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
		_node.Icon = &value
	}
	if value, ok := _c.mutation.IframeSrc(); ok {
		_spec.SetField(menu.FieldIframeSrc, field.TypeString, value)
		_node.IframeSrc = &value
	}
	if value, ok := _c.mutation.KeepAlive(); ok {
		_spec.SetField(menu.FieldKeepAlive, field.TypeBool, value)
		_node.KeepAlive = &value
	}
	if value, ok := _c.mutation.Link(); ok {
		_spec.SetField(menu.FieldLink, field.TypeString, value)
		_node.Link = &value
	}
	if value, ok := _c.mutation.MaxNumOfOpenTab(); ok {
		_spec.SetField(menu.FieldMaxNumOfOpenTab, field.TypeInt32, value)
		_node.MaxNumOfOpenTab = &value
	}
	if value, ok := _c.mutation.NoBasicLayout(); ok {
		_spec.SetField(menu.FieldNoBasicLayout, field.TypeBool, value)
		_node.NoBasicLayout = &value
	}
	if value, ok := _c.mutation.OpenInNewWindow(); ok {
		_spec.SetField(menu.FieldOpenInNewWindow, field.TypeBool, value)
		_node.OpenInNewWindow = &value
	}
	if value, ok := _c.mutation.Sort(); ok {
		_spec.SetField(menu.FieldSort, field.TypeInt32, value)
		_node.Sort = &value
	}
	if value, ok := _c.mutation.Query(); ok {
		_spec.SetField(menu.FieldQuery, field.TypeString, value)
		_node.Query = &value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(menu.FieldTitle, field.TypeString, value)
		_node.Title = &value
	}
	if nodes := _c.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Pid = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Menu.Create().
//		SetStatus(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MenuUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (_c *MenuCreate) OnConflict(opts ...sql.ConflictOption) *MenuUpsertOne {
	_c.conflict = opts
	return &MenuUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *MenuCreate) OnConflictColumns(columns ...string) *MenuUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &MenuUpsertOne{
		create: _c,
	}
}

type (
	// MenuUpsertOne is the builder for "upsert"-ing
	//  one Menu node.
	MenuUpsertOne struct {
		create *MenuCreate
	}

	// MenuUpsert is the "OnConflict" setter.
	MenuUpsert struct {
		*sql.UpdateSet
	}
)

// SetStatus sets the "status" field.
func (u *MenuUpsert) SetStatus(v int32) *MenuUpsert {
	u.Set(menu.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MenuUpsert) UpdateStatus() *MenuUpsert {
	u.SetExcluded(menu.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *MenuUpsert) AddStatus(v int32) *MenuUpsert {
	u.Add(menu.FieldStatus, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MenuUpsert) SetUpdatedAt(v time.Time) *MenuUpsert {
	u.Set(menu.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MenuUpsert) UpdateUpdatedAt() *MenuUpsert {
	u.SetExcluded(menu.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MenuUpsert) SetDeletedAt(v time.Time) *MenuUpsert {
	u.Set(menu.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MenuUpsert) UpdateDeletedAt() *MenuUpsert {
	u.SetExcluded(menu.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *MenuUpsert) ClearDeletedAt() *MenuUpsert {
	u.SetNull(menu.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *MenuUpsert) SetName(v string) *MenuUpsert {
	u.Set(menu.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MenuUpsert) UpdateName() *MenuUpsert {
	u.SetExcluded(menu.FieldName)
	return u
}

// SetPath sets the "path" field.
func (u *MenuUpsert) SetPath(v string) *MenuUpsert {
	u.Set(menu.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *MenuUpsert) UpdatePath() *MenuUpsert {
	u.SetExcluded(menu.FieldPath)
	return u
}

// ClearPath clears the value of the "path" field.
func (u *MenuUpsert) ClearPath() *MenuUpsert {
	u.SetNull(menu.FieldPath)
	return u
}

// SetType sets the "type" field.
func (u *MenuUpsert) SetType(v int32) *MenuUpsert {
	u.Set(menu.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MenuUpsert) UpdateType() *MenuUpsert {
	u.SetExcluded(menu.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *MenuUpsert) AddType(v int32) *MenuUpsert {
	u.Add(menu.FieldType, v)
	return u
}

// ClearType clears the value of the "type" field.
func (u *MenuUpsert) ClearType() *MenuUpsert {
	u.SetNull(menu.FieldType)
	return u
}

// SetComponent sets the "component" field.
func (u *MenuUpsert) SetComponent(v string) *MenuUpsert {
	u.Set(menu.FieldComponent, v)
	return u
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *MenuUpsert) UpdateComponent() *MenuUpsert {
	u.SetExcluded(menu.FieldComponent)
	return u
}

// ClearComponent clears the value of the "component" field.
func (u *MenuUpsert) ClearComponent() *MenuUpsert {
	u.SetNull(menu.FieldComponent)
	return u
}

// SetPid sets the "pid" field.
func (u *MenuUpsert) SetPid(v uint32) *MenuUpsert {
	u.Set(menu.FieldPid, v)
	return u
}

// UpdatePid sets the "pid" field to the value that was provided on create.
func (u *MenuUpsert) UpdatePid() *MenuUpsert {
	u.SetExcluded(menu.FieldPid)
	return u
}

// ClearPid clears the value of the "pid" field.
func (u *MenuUpsert) ClearPid() *MenuUpsert {
	u.SetNull(menu.FieldPid)
	return u
}

// SetRedirect sets the "redirect" field.
func (u *MenuUpsert) SetRedirect(v string) *MenuUpsert {
	u.Set(menu.FieldRedirect, v)
	return u
}

// UpdateRedirect sets the "redirect" field to the value that was provided on create.
func (u *MenuUpsert) UpdateRedirect() *MenuUpsert {
	u.SetExcluded(menu.FieldRedirect)
	return u
}

// ClearRedirect clears the value of the "redirect" field.
func (u *MenuUpsert) ClearRedirect() *MenuUpsert {
	u.SetNull(menu.FieldRedirect)
	return u
}

// SetAuthCode sets the "auth_code" field.
func (u *MenuUpsert) SetAuthCode(v string) *MenuUpsert {
	u.Set(menu.FieldAuthCode, v)
	return u
}

// UpdateAuthCode sets the "auth_code" field to the value that was provided on create.
func (u *MenuUpsert) UpdateAuthCode() *MenuUpsert {
	u.SetExcluded(menu.FieldAuthCode)
	return u
}

// SetActiveIcon sets the "active_icon" field.
func (u *MenuUpsert) SetActiveIcon(v string) *MenuUpsert {
	u.Set(menu.FieldActiveIcon, v)
	return u
}

// UpdateActiveIcon sets the "active_icon" field to the value that was provided on create.
func (u *MenuUpsert) UpdateActiveIcon() *MenuUpsert {
	u.SetExcluded(menu.FieldActiveIcon)
	return u
}

// SetActivePath sets the "active_path" field.
func (u *MenuUpsert) SetActivePath(v string) *MenuUpsert {
	u.Set(menu.FieldActivePath, v)
	return u
}

// UpdateActivePath sets the "active_path" field to the value that was provided on create.
func (u *MenuUpsert) UpdateActivePath() *MenuUpsert {
	u.SetExcluded(menu.FieldActivePath)
	return u
}

// SetAffixTab sets the "affix_tab" field.
func (u *MenuUpsert) SetAffixTab(v bool) *MenuUpsert {
	u.Set(menu.FieldAffixTab, v)
	return u
}

// UpdateAffixTab sets the "affix_tab" field to the value that was provided on create.
func (u *MenuUpsert) UpdateAffixTab() *MenuUpsert {
	u.SetExcluded(menu.FieldAffixTab)
	return u
}

// SetAffixTabOrder sets the "affix_tab_order" field.
func (u *MenuUpsert) SetAffixTabOrder(v int32) *MenuUpsert {
	u.Set(menu.FieldAffixTabOrder, v)
	return u
}

// UpdateAffixTabOrder sets the "affix_tab_order" field to the value that was provided on create.
func (u *MenuUpsert) UpdateAffixTabOrder() *MenuUpsert {
	u.SetExcluded(menu.FieldAffixTabOrder)
	return u
}

// AddAffixTabOrder adds v to the "affix_tab_order" field.
func (u *MenuUpsert) AddAffixTabOrder(v int32) *MenuUpsert {
	u.Add(menu.FieldAffixTabOrder, v)
	return u
}

// SetBadge sets the "badge" field.
func (u *MenuUpsert) SetBadge(v string) *MenuUpsert {
	u.Set(menu.FieldBadge, v)
	return u
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *MenuUpsert) UpdateBadge() *MenuUpsert {
	u.SetExcluded(menu.FieldBadge)
	return u
}

// SetBadgeType sets the "badge_type" field.
func (u *MenuUpsert) SetBadgeType(v int32) *MenuUpsert {
	u.Set(menu.FieldBadgeType, v)
	return u
}

// UpdateBadgeType sets the "badge_type" field to the value that was provided on create.
func (u *MenuUpsert) UpdateBadgeType() *MenuUpsert {
	u.SetExcluded(menu.FieldBadgeType)
	return u
}

// AddBadgeType adds v to the "badge_type" field.
func (u *MenuUpsert) AddBadgeType(v int32) *MenuUpsert {
	u.Add(menu.FieldBadgeType, v)
	return u
}

// SetBadgeVariants sets the "badge_variants" field.
func (u *MenuUpsert) SetBadgeVariants(v int32) *MenuUpsert {
	u.Set(menu.FieldBadgeVariants, v)
	return u
}

// UpdateBadgeVariants sets the "badge_variants" field to the value that was provided on create.
func (u *MenuUpsert) UpdateBadgeVariants() *MenuUpsert {
	u.SetExcluded(menu.FieldBadgeVariants)
	return u
}

// AddBadgeVariants adds v to the "badge_variants" field.
func (u *MenuUpsert) AddBadgeVariants(v int32) *MenuUpsert {
	u.Add(menu.FieldBadgeVariants, v)
	return u
}

// SetHideChildrenInMenu sets the "hide_children_in_menu" field.
func (u *MenuUpsert) SetHideChildrenInMenu(v bool) *MenuUpsert {
	u.Set(menu.FieldHideChildrenInMenu, v)
	return u
}

// UpdateHideChildrenInMenu sets the "hide_children_in_menu" field to the value that was provided on create.
func (u *MenuUpsert) UpdateHideChildrenInMenu() *MenuUpsert {
	u.SetExcluded(menu.FieldHideChildrenInMenu)
	return u
}

// SetHideInBreadcrumb sets the "hide_in_breadcrumb" field.
func (u *MenuUpsert) SetHideInBreadcrumb(v bool) *MenuUpsert {
	u.Set(menu.FieldHideInBreadcrumb, v)
	return u
}

// UpdateHideInBreadcrumb sets the "hide_in_breadcrumb" field to the value that was provided on create.
func (u *MenuUpsert) UpdateHideInBreadcrumb() *MenuUpsert {
	u.SetExcluded(menu.FieldHideInBreadcrumb)
	return u
}

// SetHideInMenu sets the "hide_in_menu" field.
func (u *MenuUpsert) SetHideInMenu(v bool) *MenuUpsert {
	u.Set(menu.FieldHideInMenu, v)
	return u
}

// UpdateHideInMenu sets the "hide_in_menu" field to the value that was provided on create.
func (u *MenuUpsert) UpdateHideInMenu() *MenuUpsert {
	u.SetExcluded(menu.FieldHideInMenu)
	return u
}

// SetHideInTab sets the "hide_in_tab" field.
func (u *MenuUpsert) SetHideInTab(v bool) *MenuUpsert {
	u.Set(menu.FieldHideInTab, v)
	return u
}

// UpdateHideInTab sets the "hide_in_tab" field to the value that was provided on create.
func (u *MenuUpsert) UpdateHideInTab() *MenuUpsert {
	u.SetExcluded(menu.FieldHideInTab)
	return u
}

// SetIcon sets the "icon" field.
func (u *MenuUpsert) SetIcon(v string) *MenuUpsert {
	u.Set(menu.FieldIcon, v)
	return u
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *MenuUpsert) UpdateIcon() *MenuUpsert {
	u.SetExcluded(menu.FieldIcon)
	return u
}

// SetIframeSrc sets the "iframe_src" field.
func (u *MenuUpsert) SetIframeSrc(v string) *MenuUpsert {
	u.Set(menu.FieldIframeSrc, v)
	return u
}

// UpdateIframeSrc sets the "iframe_src" field to the value that was provided on create.
func (u *MenuUpsert) UpdateIframeSrc() *MenuUpsert {
	u.SetExcluded(menu.FieldIframeSrc)
	return u
}

// SetKeepAlive sets the "keep_alive" field.
func (u *MenuUpsert) SetKeepAlive(v bool) *MenuUpsert {
	u.Set(menu.FieldKeepAlive, v)
	return u
}

// UpdateKeepAlive sets the "keep_alive" field to the value that was provided on create.
func (u *MenuUpsert) UpdateKeepAlive() *MenuUpsert {
	u.SetExcluded(menu.FieldKeepAlive)
	return u
}

// SetLink sets the "link" field.
func (u *MenuUpsert) SetLink(v string) *MenuUpsert {
	u.Set(menu.FieldLink, v)
	return u
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *MenuUpsert) UpdateLink() *MenuUpsert {
	u.SetExcluded(menu.FieldLink)
	return u
}

// SetMaxNumOfOpenTab sets the "max_num_of_open_tab" field.
func (u *MenuUpsert) SetMaxNumOfOpenTab(v int32) *MenuUpsert {
	u.Set(menu.FieldMaxNumOfOpenTab, v)
	return u
}

// UpdateMaxNumOfOpenTab sets the "max_num_of_open_tab" field to the value that was provided on create.
func (u *MenuUpsert) UpdateMaxNumOfOpenTab() *MenuUpsert {
	u.SetExcluded(menu.FieldMaxNumOfOpenTab)
	return u
}

// AddMaxNumOfOpenTab adds v to the "max_num_of_open_tab" field.
func (u *MenuUpsert) AddMaxNumOfOpenTab(v int32) *MenuUpsert {
	u.Add(menu.FieldMaxNumOfOpenTab, v)
	return u
}

// SetNoBasicLayout sets the "no_basic_layout" field.
func (u *MenuUpsert) SetNoBasicLayout(v bool) *MenuUpsert {
	u.Set(menu.FieldNoBasicLayout, v)
	return u
}

// UpdateNoBasicLayout sets the "no_basic_layout" field to the value that was provided on create.
func (u *MenuUpsert) UpdateNoBasicLayout() *MenuUpsert {
	u.SetExcluded(menu.FieldNoBasicLayout)
	return u
}

// SetOpenInNewWindow sets the "open_in_new_window" field.
func (u *MenuUpsert) SetOpenInNewWindow(v bool) *MenuUpsert {
	u.Set(menu.FieldOpenInNewWindow, v)
	return u
}

// UpdateOpenInNewWindow sets the "open_in_new_window" field to the value that was provided on create.
func (u *MenuUpsert) UpdateOpenInNewWindow() *MenuUpsert {
	u.SetExcluded(menu.FieldOpenInNewWindow)
	return u
}

// SetSort sets the "sort" field.
func (u *MenuUpsert) SetSort(v int32) *MenuUpsert {
	u.Set(menu.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *MenuUpsert) UpdateSort() *MenuUpsert {
	u.SetExcluded(menu.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *MenuUpsert) AddSort(v int32) *MenuUpsert {
	u.Add(menu.FieldSort, v)
	return u
}

// SetQuery sets the "query" field.
func (u *MenuUpsert) SetQuery(v string) *MenuUpsert {
	u.Set(menu.FieldQuery, v)
	return u
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *MenuUpsert) UpdateQuery() *MenuUpsert {
	u.SetExcluded(menu.FieldQuery)
	return u
}

// ClearQuery clears the value of the "query" field.
func (u *MenuUpsert) ClearQuery() *MenuUpsert {
	u.SetNull(menu.FieldQuery)
	return u
}

// SetTitle sets the "title" field.
func (u *MenuUpsert) SetTitle(v string) *MenuUpsert {
	u.Set(menu.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MenuUpsert) UpdateTitle() *MenuUpsert {
	u.SetExcluded(menu.FieldTitle)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(menu.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MenuUpsertOne) UpdateNewValues() *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(menu.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(menu.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Menu.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MenuUpsertOne) Ignore() *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MenuUpsertOne) DoNothing() *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MenuCreate.OnConflict
// documentation for more info.
func (u *MenuUpsertOne) Update(set func(*MenuUpsert)) *MenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MenuUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *MenuUpsertOne) SetStatus(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *MenuUpsertOne) AddStatus(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateStatus() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateStatus()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MenuUpsertOne) SetUpdatedAt(v time.Time) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateUpdatedAt() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MenuUpsertOne) SetDeletedAt(v time.Time) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateDeletedAt() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *MenuUpsertOne) ClearDeletedAt() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *MenuUpsertOne) SetName(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateName() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateName()
	})
}

// SetPath sets the "path" field.
func (u *MenuUpsertOne) SetPath(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdatePath() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *MenuUpsertOne) ClearPath() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearPath()
	})
}

// SetType sets the "type" field.
func (u *MenuUpsertOne) SetType(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *MenuUpsertOne) AddType(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateType() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *MenuUpsertOne) ClearType() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearType()
	})
}

// SetComponent sets the "component" field.
func (u *MenuUpsertOne) SetComponent(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetComponent(v)
	})
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateComponent() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateComponent()
	})
}

// ClearComponent clears the value of the "component" field.
func (u *MenuUpsertOne) ClearComponent() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearComponent()
	})
}

// SetPid sets the "pid" field.
func (u *MenuUpsertOne) SetPid(v uint32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetPid(v)
	})
}

// UpdatePid sets the "pid" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdatePid() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdatePid()
	})
}

// ClearPid clears the value of the "pid" field.
func (u *MenuUpsertOne) ClearPid() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearPid()
	})
}

// SetRedirect sets the "redirect" field.
func (u *MenuUpsertOne) SetRedirect(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetRedirect(v)
	})
}

// UpdateRedirect sets the "redirect" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateRedirect() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateRedirect()
	})
}

// ClearRedirect clears the value of the "redirect" field.
func (u *MenuUpsertOne) ClearRedirect() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearRedirect()
	})
}

// SetAuthCode sets the "auth_code" field.
func (u *MenuUpsertOne) SetAuthCode(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetAuthCode(v)
	})
}

// UpdateAuthCode sets the "auth_code" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateAuthCode() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateAuthCode()
	})
}

// SetActiveIcon sets the "active_icon" field.
func (u *MenuUpsertOne) SetActiveIcon(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetActiveIcon(v)
	})
}

// UpdateActiveIcon sets the "active_icon" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateActiveIcon() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateActiveIcon()
	})
}

// SetActivePath sets the "active_path" field.
func (u *MenuUpsertOne) SetActivePath(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetActivePath(v)
	})
}

// UpdateActivePath sets the "active_path" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateActivePath() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateActivePath()
	})
}

// SetAffixTab sets the "affix_tab" field.
func (u *MenuUpsertOne) SetAffixTab(v bool) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetAffixTab(v)
	})
}

// UpdateAffixTab sets the "affix_tab" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateAffixTab() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateAffixTab()
	})
}

// SetAffixTabOrder sets the "affix_tab_order" field.
func (u *MenuUpsertOne) SetAffixTabOrder(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetAffixTabOrder(v)
	})
}

// AddAffixTabOrder adds v to the "affix_tab_order" field.
func (u *MenuUpsertOne) AddAffixTabOrder(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.AddAffixTabOrder(v)
	})
}

// UpdateAffixTabOrder sets the "affix_tab_order" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateAffixTabOrder() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateAffixTabOrder()
	})
}

// SetBadge sets the "badge" field.
func (u *MenuUpsertOne) SetBadge(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetBadge(v)
	})
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateBadge() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateBadge()
	})
}

// SetBadgeType sets the "badge_type" field.
func (u *MenuUpsertOne) SetBadgeType(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetBadgeType(v)
	})
}

// AddBadgeType adds v to the "badge_type" field.
func (u *MenuUpsertOne) AddBadgeType(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.AddBadgeType(v)
	})
}

// UpdateBadgeType sets the "badge_type" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateBadgeType() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateBadgeType()
	})
}

// SetBadgeVariants sets the "badge_variants" field.
func (u *MenuUpsertOne) SetBadgeVariants(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetBadgeVariants(v)
	})
}

// AddBadgeVariants adds v to the "badge_variants" field.
func (u *MenuUpsertOne) AddBadgeVariants(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.AddBadgeVariants(v)
	})
}

// UpdateBadgeVariants sets the "badge_variants" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateBadgeVariants() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateBadgeVariants()
	})
}

// SetHideChildrenInMenu sets the "hide_children_in_menu" field.
func (u *MenuUpsertOne) SetHideChildrenInMenu(v bool) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetHideChildrenInMenu(v)
	})
}

// UpdateHideChildrenInMenu sets the "hide_children_in_menu" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateHideChildrenInMenu() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateHideChildrenInMenu()
	})
}

// SetHideInBreadcrumb sets the "hide_in_breadcrumb" field.
func (u *MenuUpsertOne) SetHideInBreadcrumb(v bool) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetHideInBreadcrumb(v)
	})
}

// UpdateHideInBreadcrumb sets the "hide_in_breadcrumb" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateHideInBreadcrumb() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateHideInBreadcrumb()
	})
}

// SetHideInMenu sets the "hide_in_menu" field.
func (u *MenuUpsertOne) SetHideInMenu(v bool) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetHideInMenu(v)
	})
}

// UpdateHideInMenu sets the "hide_in_menu" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateHideInMenu() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateHideInMenu()
	})
}

// SetHideInTab sets the "hide_in_tab" field.
func (u *MenuUpsertOne) SetHideInTab(v bool) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetHideInTab(v)
	})
}

// UpdateHideInTab sets the "hide_in_tab" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateHideInTab() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateHideInTab()
	})
}

// SetIcon sets the "icon" field.
func (u *MenuUpsertOne) SetIcon(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateIcon() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIcon()
	})
}

// SetIframeSrc sets the "iframe_src" field.
func (u *MenuUpsertOne) SetIframeSrc(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetIframeSrc(v)
	})
}

// UpdateIframeSrc sets the "iframe_src" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateIframeSrc() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIframeSrc()
	})
}

// SetKeepAlive sets the "keep_alive" field.
func (u *MenuUpsertOne) SetKeepAlive(v bool) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetKeepAlive(v)
	})
}

// UpdateKeepAlive sets the "keep_alive" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateKeepAlive() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateKeepAlive()
	})
}

// SetLink sets the "link" field.
func (u *MenuUpsertOne) SetLink(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateLink() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateLink()
	})
}

// SetMaxNumOfOpenTab sets the "max_num_of_open_tab" field.
func (u *MenuUpsertOne) SetMaxNumOfOpenTab(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetMaxNumOfOpenTab(v)
	})
}

// AddMaxNumOfOpenTab adds v to the "max_num_of_open_tab" field.
func (u *MenuUpsertOne) AddMaxNumOfOpenTab(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.AddMaxNumOfOpenTab(v)
	})
}

// UpdateMaxNumOfOpenTab sets the "max_num_of_open_tab" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateMaxNumOfOpenTab() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateMaxNumOfOpenTab()
	})
}

// SetNoBasicLayout sets the "no_basic_layout" field.
func (u *MenuUpsertOne) SetNoBasicLayout(v bool) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetNoBasicLayout(v)
	})
}

// UpdateNoBasicLayout sets the "no_basic_layout" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateNoBasicLayout() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateNoBasicLayout()
	})
}

// SetOpenInNewWindow sets the "open_in_new_window" field.
func (u *MenuUpsertOne) SetOpenInNewWindow(v bool) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetOpenInNewWindow(v)
	})
}

// UpdateOpenInNewWindow sets the "open_in_new_window" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateOpenInNewWindow() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateOpenInNewWindow()
	})
}

// SetSort sets the "sort" field.
func (u *MenuUpsertOne) SetSort(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *MenuUpsertOne) AddSort(v int32) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateSort() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateSort()
	})
}

// SetQuery sets the "query" field.
func (u *MenuUpsertOne) SetQuery(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetQuery(v)
	})
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateQuery() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateQuery()
	})
}

// ClearQuery clears the value of the "query" field.
func (u *MenuUpsertOne) ClearQuery() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.ClearQuery()
	})
}

// SetTitle sets the "title" field.
func (u *MenuUpsertOne) SetTitle(v string) *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MenuUpsertOne) UpdateTitle() *MenuUpsertOne {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateTitle()
	})
}

// Exec executes the query.
func (u *MenuUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for MenuCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MenuUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MenuUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MenuUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MenuCreateBulk is the builder for creating many Menu entities in bulk.
type MenuCreateBulk struct {
	config
	err      error
	builders []*MenuCreate
	conflict []sql.ConflictOption
}

// Save creates the Menu entities in the database.
func (_c *MenuCreateBulk) Save(ctx context.Context) ([]*Menu, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Menu, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *MenuCreateBulk) SaveX(ctx context.Context) []*Menu {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MenuCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MenuCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Menu.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MenuUpsert) {
//			SetStatus(v+v).
//		}).
//		Exec(ctx)
func (_c *MenuCreateBulk) OnConflict(opts ...sql.ConflictOption) *MenuUpsertBulk {
	_c.conflict = opts
	return &MenuUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *MenuCreateBulk) OnConflictColumns(columns ...string) *MenuUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &MenuUpsertBulk{
		create: _c,
	}
}

// MenuUpsertBulk is the builder for "upsert"-ing
// a bulk of Menu nodes.
type MenuUpsertBulk struct {
	create *MenuCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(menu.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MenuUpsertBulk) UpdateNewValues() *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(menu.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(menu.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Menu.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MenuUpsertBulk) Ignore() *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MenuUpsertBulk) DoNothing() *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MenuCreateBulk.OnConflict
// documentation for more info.
func (u *MenuUpsertBulk) Update(set func(*MenuUpsert)) *MenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MenuUpsert{UpdateSet: update})
	}))
	return u
}

// SetStatus sets the "status" field.
func (u *MenuUpsertBulk) SetStatus(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *MenuUpsertBulk) AddStatus(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateStatus() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateStatus()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MenuUpsertBulk) SetUpdatedAt(v time.Time) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateUpdatedAt() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MenuUpsertBulk) SetDeletedAt(v time.Time) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateDeletedAt() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *MenuUpsertBulk) ClearDeletedAt() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *MenuUpsertBulk) SetName(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateName() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateName()
	})
}

// SetPath sets the "path" field.
func (u *MenuUpsertBulk) SetPath(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdatePath() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *MenuUpsertBulk) ClearPath() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearPath()
	})
}

// SetType sets the "type" field.
func (u *MenuUpsertBulk) SetType(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *MenuUpsertBulk) AddType(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateType() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *MenuUpsertBulk) ClearType() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearType()
	})
}

// SetComponent sets the "component" field.
func (u *MenuUpsertBulk) SetComponent(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetComponent(v)
	})
}

// UpdateComponent sets the "component" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateComponent() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateComponent()
	})
}

// ClearComponent clears the value of the "component" field.
func (u *MenuUpsertBulk) ClearComponent() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearComponent()
	})
}

// SetPid sets the "pid" field.
func (u *MenuUpsertBulk) SetPid(v uint32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetPid(v)
	})
}

// UpdatePid sets the "pid" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdatePid() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdatePid()
	})
}

// ClearPid clears the value of the "pid" field.
func (u *MenuUpsertBulk) ClearPid() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearPid()
	})
}

// SetRedirect sets the "redirect" field.
func (u *MenuUpsertBulk) SetRedirect(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetRedirect(v)
	})
}

// UpdateRedirect sets the "redirect" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateRedirect() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateRedirect()
	})
}

// ClearRedirect clears the value of the "redirect" field.
func (u *MenuUpsertBulk) ClearRedirect() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearRedirect()
	})
}

// SetAuthCode sets the "auth_code" field.
func (u *MenuUpsertBulk) SetAuthCode(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetAuthCode(v)
	})
}

// UpdateAuthCode sets the "auth_code" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateAuthCode() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateAuthCode()
	})
}

// SetActiveIcon sets the "active_icon" field.
func (u *MenuUpsertBulk) SetActiveIcon(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetActiveIcon(v)
	})
}

// UpdateActiveIcon sets the "active_icon" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateActiveIcon() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateActiveIcon()
	})
}

// SetActivePath sets the "active_path" field.
func (u *MenuUpsertBulk) SetActivePath(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetActivePath(v)
	})
}

// UpdateActivePath sets the "active_path" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateActivePath() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateActivePath()
	})
}

// SetAffixTab sets the "affix_tab" field.
func (u *MenuUpsertBulk) SetAffixTab(v bool) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetAffixTab(v)
	})
}

// UpdateAffixTab sets the "affix_tab" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateAffixTab() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateAffixTab()
	})
}

// SetAffixTabOrder sets the "affix_tab_order" field.
func (u *MenuUpsertBulk) SetAffixTabOrder(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetAffixTabOrder(v)
	})
}

// AddAffixTabOrder adds v to the "affix_tab_order" field.
func (u *MenuUpsertBulk) AddAffixTabOrder(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.AddAffixTabOrder(v)
	})
}

// UpdateAffixTabOrder sets the "affix_tab_order" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateAffixTabOrder() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateAffixTabOrder()
	})
}

// SetBadge sets the "badge" field.
func (u *MenuUpsertBulk) SetBadge(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetBadge(v)
	})
}

// UpdateBadge sets the "badge" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateBadge() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateBadge()
	})
}

// SetBadgeType sets the "badge_type" field.
func (u *MenuUpsertBulk) SetBadgeType(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetBadgeType(v)
	})
}

// AddBadgeType adds v to the "badge_type" field.
func (u *MenuUpsertBulk) AddBadgeType(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.AddBadgeType(v)
	})
}

// UpdateBadgeType sets the "badge_type" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateBadgeType() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateBadgeType()
	})
}

// SetBadgeVariants sets the "badge_variants" field.
func (u *MenuUpsertBulk) SetBadgeVariants(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetBadgeVariants(v)
	})
}

// AddBadgeVariants adds v to the "badge_variants" field.
func (u *MenuUpsertBulk) AddBadgeVariants(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.AddBadgeVariants(v)
	})
}

// UpdateBadgeVariants sets the "badge_variants" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateBadgeVariants() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateBadgeVariants()
	})
}

// SetHideChildrenInMenu sets the "hide_children_in_menu" field.
func (u *MenuUpsertBulk) SetHideChildrenInMenu(v bool) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetHideChildrenInMenu(v)
	})
}

// UpdateHideChildrenInMenu sets the "hide_children_in_menu" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateHideChildrenInMenu() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateHideChildrenInMenu()
	})
}

// SetHideInBreadcrumb sets the "hide_in_breadcrumb" field.
func (u *MenuUpsertBulk) SetHideInBreadcrumb(v bool) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetHideInBreadcrumb(v)
	})
}

// UpdateHideInBreadcrumb sets the "hide_in_breadcrumb" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateHideInBreadcrumb() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateHideInBreadcrumb()
	})
}

// SetHideInMenu sets the "hide_in_menu" field.
func (u *MenuUpsertBulk) SetHideInMenu(v bool) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetHideInMenu(v)
	})
}

// UpdateHideInMenu sets the "hide_in_menu" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateHideInMenu() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateHideInMenu()
	})
}

// SetHideInTab sets the "hide_in_tab" field.
func (u *MenuUpsertBulk) SetHideInTab(v bool) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetHideInTab(v)
	})
}

// UpdateHideInTab sets the "hide_in_tab" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateHideInTab() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateHideInTab()
	})
}

// SetIcon sets the "icon" field.
func (u *MenuUpsertBulk) SetIcon(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateIcon() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIcon()
	})
}

// SetIframeSrc sets the "iframe_src" field.
func (u *MenuUpsertBulk) SetIframeSrc(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetIframeSrc(v)
	})
}

// UpdateIframeSrc sets the "iframe_src" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateIframeSrc() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateIframeSrc()
	})
}

// SetKeepAlive sets the "keep_alive" field.
func (u *MenuUpsertBulk) SetKeepAlive(v bool) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetKeepAlive(v)
	})
}

// UpdateKeepAlive sets the "keep_alive" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateKeepAlive() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateKeepAlive()
	})
}

// SetLink sets the "link" field.
func (u *MenuUpsertBulk) SetLink(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateLink() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateLink()
	})
}

// SetMaxNumOfOpenTab sets the "max_num_of_open_tab" field.
func (u *MenuUpsertBulk) SetMaxNumOfOpenTab(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetMaxNumOfOpenTab(v)
	})
}

// AddMaxNumOfOpenTab adds v to the "max_num_of_open_tab" field.
func (u *MenuUpsertBulk) AddMaxNumOfOpenTab(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.AddMaxNumOfOpenTab(v)
	})
}

// UpdateMaxNumOfOpenTab sets the "max_num_of_open_tab" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateMaxNumOfOpenTab() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateMaxNumOfOpenTab()
	})
}

// SetNoBasicLayout sets the "no_basic_layout" field.
func (u *MenuUpsertBulk) SetNoBasicLayout(v bool) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetNoBasicLayout(v)
	})
}

// UpdateNoBasicLayout sets the "no_basic_layout" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateNoBasicLayout() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateNoBasicLayout()
	})
}

// SetOpenInNewWindow sets the "open_in_new_window" field.
func (u *MenuUpsertBulk) SetOpenInNewWindow(v bool) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetOpenInNewWindow(v)
	})
}

// UpdateOpenInNewWindow sets the "open_in_new_window" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateOpenInNewWindow() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateOpenInNewWindow()
	})
}

// SetSort sets the "sort" field.
func (u *MenuUpsertBulk) SetSort(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *MenuUpsertBulk) AddSort(v int32) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateSort() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateSort()
	})
}

// SetQuery sets the "query" field.
func (u *MenuUpsertBulk) SetQuery(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetQuery(v)
	})
}

// UpdateQuery sets the "query" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateQuery() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateQuery()
	})
}

// ClearQuery clears the value of the "query" field.
func (u *MenuUpsertBulk) ClearQuery() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.ClearQuery()
	})
}

// SetTitle sets the "title" field.
func (u *MenuUpsertBulk) SetTitle(v string) *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MenuUpsertBulk) UpdateTitle() *MenuUpsertBulk {
	return u.Update(func(s *MenuUpsert) {
		s.UpdateTitle()
	})
}

// Exec executes the query.
func (u *MenuUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the MenuCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for MenuCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MenuUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
