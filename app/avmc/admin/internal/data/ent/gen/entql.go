// Code generated by ent, DO NOT EDIT.

package gen

import (
	"backend-service/app/avmc/admin/internal/data/ent/gen/dept"
	"backend-service/app/avmc/admin/internal/data/ent/gen/menu"
	"backend-service/app/avmc/admin/internal/data/ent/gen/post"
	"backend-service/app/avmc/admin/internal/data/ent/gen/predicate"
	"backend-service/app/avmc/admin/internal/data/ent/gen/role"
	"backend-service/app/avmc/admin/internal/data/ent/gen/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 5)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dept.Table,
			Columns: dept.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: dept.FieldID,
			},
		},
		Type: "Dept",
		Fields: map[string]*sqlgraph.FieldSpec{
			dept.FieldCreatedAt: {Type: field.TypeTime, Column: dept.FieldCreatedAt},
			dept.FieldUpdatedAt: {Type: field.TypeTime, Column: dept.FieldUpdatedAt},
			dept.FieldStatus:    {Type: field.TypeInt32, Column: dept.FieldStatus},
			dept.FieldDomainID:  {Type: field.TypeUint32, Column: dept.FieldDomainID},
			dept.FieldDeletedAt: {Type: field.TypeTime, Column: dept.FieldDeletedAt},
			dept.FieldName:      {Type: field.TypeString, Column: dept.FieldName},
			dept.FieldParentID:  {Type: field.TypeUint32, Column: dept.FieldParentID},
			dept.FieldAncestors: {Type: field.TypeJSON, Column: dept.FieldAncestors},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   menu.Table,
			Columns: menu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: menu.FieldID,
			},
		},
		Type: "Menu",
		Fields: map[string]*sqlgraph.FieldSpec{
			menu.FieldStatus:             {Type: field.TypeInt32, Column: menu.FieldStatus},
			menu.FieldCreatedAt:          {Type: field.TypeTime, Column: menu.FieldCreatedAt},
			menu.FieldUpdatedAt:          {Type: field.TypeTime, Column: menu.FieldUpdatedAt},
			menu.FieldDeletedAt:          {Type: field.TypeTime, Column: menu.FieldDeletedAt},
			menu.FieldName:               {Type: field.TypeString, Column: menu.FieldName},
			menu.FieldPath:               {Type: field.TypeString, Column: menu.FieldPath},
			menu.FieldType:               {Type: field.TypeInt32, Column: menu.FieldType},
			menu.FieldComponent:          {Type: field.TypeString, Column: menu.FieldComponent},
			menu.FieldPid:                {Type: field.TypeUint32, Column: menu.FieldPid},
			menu.FieldRedirect:           {Type: field.TypeString, Column: menu.FieldRedirect},
			menu.FieldAuthCode:           {Type: field.TypeString, Column: menu.FieldAuthCode},
			menu.FieldActiveIcon:         {Type: field.TypeString, Column: menu.FieldActiveIcon},
			menu.FieldActivePath:         {Type: field.TypeString, Column: menu.FieldActivePath},
			menu.FieldAffixTab:           {Type: field.TypeBool, Column: menu.FieldAffixTab},
			menu.FieldAffixTabOrder:      {Type: field.TypeInt32, Column: menu.FieldAffixTabOrder},
			menu.FieldBadge:              {Type: field.TypeString, Column: menu.FieldBadge},
			menu.FieldBadgeType:          {Type: field.TypeInt32, Column: menu.FieldBadgeType},
			menu.FieldBadgeVariants:      {Type: field.TypeInt32, Column: menu.FieldBadgeVariants},
			menu.FieldHideChildrenInMenu: {Type: field.TypeBool, Column: menu.FieldHideChildrenInMenu},
			menu.FieldHideInBreadcrumb:   {Type: field.TypeBool, Column: menu.FieldHideInBreadcrumb},
			menu.FieldHideInMenu:         {Type: field.TypeBool, Column: menu.FieldHideInMenu},
			menu.FieldHideInTab:          {Type: field.TypeBool, Column: menu.FieldHideInTab},
			menu.FieldIcon:               {Type: field.TypeString, Column: menu.FieldIcon},
			menu.FieldIframeSrc:          {Type: field.TypeString, Column: menu.FieldIframeSrc},
			menu.FieldKeepAlive:          {Type: field.TypeBool, Column: menu.FieldKeepAlive},
			menu.FieldLink:               {Type: field.TypeString, Column: menu.FieldLink},
			menu.FieldMaxNumOfOpenTab:    {Type: field.TypeInt32, Column: menu.FieldMaxNumOfOpenTab},
			menu.FieldNoBasicLayout:      {Type: field.TypeBool, Column: menu.FieldNoBasicLayout},
			menu.FieldOpenInNewWindow:    {Type: field.TypeBool, Column: menu.FieldOpenInNewWindow},
			menu.FieldSort:               {Type: field.TypeInt32, Column: menu.FieldSort},
			menu.FieldQuery:              {Type: field.TypeString, Column: menu.FieldQuery},
			menu.FieldTitle:              {Type: field.TypeString, Column: menu.FieldTitle},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   post.Table,
			Columns: post.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: post.FieldID,
			},
		},
		Type: "Post",
		Fields: map[string]*sqlgraph.FieldSpec{
			post.FieldCreatedAt: {Type: field.TypeTime, Column: post.FieldCreatedAt},
			post.FieldUpdatedAt: {Type: field.TypeTime, Column: post.FieldUpdatedAt},
			post.FieldStatus:    {Type: field.TypeInt32, Column: post.FieldStatus},
			post.FieldDomainID:  {Type: field.TypeUint32, Column: post.FieldDomainID},
			post.FieldDeletedAt: {Type: field.TypeTime, Column: post.FieldDeletedAt},
			post.FieldName:      {Type: field.TypeString, Column: post.FieldName},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   role.Table,
			Columns: role.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: role.FieldID,
			},
		},
		Type: "Role",
		Fields: map[string]*sqlgraph.FieldSpec{
			role.FieldCreatedAt:         {Type: field.TypeTime, Column: role.FieldCreatedAt},
			role.FieldUpdatedAt:         {Type: field.TypeTime, Column: role.FieldUpdatedAt},
			role.FieldStatus:            {Type: field.TypeInt32, Column: role.FieldStatus},
			role.FieldDomainID:          {Type: field.TypeUint32, Column: role.FieldDomainID},
			role.FieldDeletedAt:         {Type: field.TypeTime, Column: role.FieldDeletedAt},
			role.FieldName:              {Type: field.TypeString, Column: role.FieldName},
			role.FieldDefaultRouter:     {Type: field.TypeString, Column: role.FieldDefaultRouter},
			role.FieldDataScope:         {Type: field.TypeInt32, Column: role.FieldDataScope},
			role.FieldMenuCheckStrictly: {Type: field.TypeInt32, Column: role.FieldMenuCheckStrictly},
			role.FieldDeptCheckStrictly: {Type: field.TypeInt32, Column: role.FieldDeptCheckStrictly},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt:   {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:   {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldStatus:      {Type: field.TypeInt32, Column: user.FieldStatus},
			user.FieldDomainID:    {Type: field.TypeUint32, Column: user.FieldDomainID},
			user.FieldDeletedAt:   {Type: field.TypeTime, Column: user.FieldDeletedAt},
			user.FieldName:        {Type: field.TypeString, Column: user.FieldName},
			user.FieldPassword:    {Type: field.TypeString, Column: user.FieldPassword},
			user.FieldRealname:    {Type: field.TypeString, Column: user.FieldRealname},
			user.FieldNickname:    {Type: field.TypeString, Column: user.FieldNickname},
			user.FieldEmail:       {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldPhone:       {Type: field.TypeString, Column: user.FieldPhone},
			user.FieldAvatar:      {Type: field.TypeString, Column: user.FieldAvatar},
			user.FieldBirthday:    {Type: field.TypeTime, Column: user.FieldBirthday},
			user.FieldGender:      {Type: field.TypeInt32, Column: user.FieldGender},
			user.FieldAge:         {Type: field.TypeInt, Column: user.FieldAge},
			user.FieldLastLoginAt: {Type: field.TypeTime, Column: user.FieldLastLoginAt},
			user.FieldLastLoginIP: {Type: field.TypeString, Column: user.FieldLastLoginIP},
			user.FieldLoginCount:  {Type: field.TypeInt, Column: user.FieldLoginCount},
			user.FieldSettings:    {Type: field.TypeJSON, Column: user.FieldSettings},
			user.FieldMetadata:    {Type: field.TypeJSON, Column: user.FieldMetadata},
			user.FieldDescription: {Type: field.TypeString, Column: user.FieldDescription},
		},
	}
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dept.ParentTable,
			Columns: []string{dept.ParentColumn},
			Bidi:    false,
		},
		"Dept",
		"Dept",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dept.ChildrenTable,
			Columns: []string{dept.ChildrenColumn},
			Bidi:    false,
		},
		"Dept",
		"Dept",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
		},
		"Menu",
		"Menu",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
		},
		"Menu",
		"Menu",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: role.UsersPrimaryKey,
			Bidi:    false,
		},
		"Role",
		"User",
	)
	graph.MustAddE(
		"roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Role",
	)
	graph.MustAddE(
		"posts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
		},
		"User",
		"Post",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (_q *DeptQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeptQuery builder.
func (_q *DeptQuery) Filter() *DeptFilter {
	return &DeptFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *DeptMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeptMutation builder.
func (m *DeptMutation) Filter() *DeptFilter {
	return &DeptFilter{config: m.config, predicateAdder: m}
}

// DeptFilter provides a generic filtering capability at runtime for DeptQuery.
type DeptFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeptFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *DeptFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(dept.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DeptFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(dept.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DeptFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(dept.FieldUpdatedAt))
}

// WhereStatus applies the entql int32 predicate on the status field.
func (f *DeptFilter) WhereStatus(p entql.Int32P) {
	f.Where(p.Field(dept.FieldStatus))
}

// WhereDomainID applies the entql uint32 predicate on the domain_id field.
func (f *DeptFilter) WhereDomainID(p entql.Uint32P) {
	f.Where(p.Field(dept.FieldDomainID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *DeptFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(dept.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *DeptFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(dept.FieldName))
}

// WhereParentID applies the entql uint32 predicate on the parent_id field.
func (f *DeptFilter) WhereParentID(p entql.Uint32P) {
	f.Where(p.Field(dept.FieldParentID))
}

// WhereAncestors applies the entql json.RawMessage predicate on the ancestors field.
func (f *DeptFilter) WhereAncestors(p entql.BytesP) {
	f.Where(p.Field(dept.FieldAncestors))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *DeptFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *DeptFilter) WhereHasParentWith(preds ...predicate.Dept) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *DeptFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *DeptFilter) WhereHasChildrenWith(preds ...predicate.Dept) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *MenuQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MenuQuery builder.
func (_q *MenuQuery) Filter() *MenuFilter {
	return &MenuFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *MenuMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MenuMutation builder.
func (m *MenuMutation) Filter() *MenuFilter {
	return &MenuFilter{config: m.config, predicateAdder: m}
}

// MenuFilter provides a generic filtering capability at runtime for MenuQuery.
type MenuFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MenuFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *MenuFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(menu.FieldID))
}

// WhereStatus applies the entql int32 predicate on the status field.
func (f *MenuFilter) WhereStatus(p entql.Int32P) {
	f.Where(p.Field(menu.FieldStatus))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MenuFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(menu.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *MenuFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(menu.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *MenuFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(menu.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *MenuFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(menu.FieldName))
}

// WherePath applies the entql string predicate on the path field.
func (f *MenuFilter) WherePath(p entql.StringP) {
	f.Where(p.Field(menu.FieldPath))
}

// WhereType applies the entql int32 predicate on the type field.
func (f *MenuFilter) WhereType(p entql.Int32P) {
	f.Where(p.Field(menu.FieldType))
}

// WhereComponent applies the entql string predicate on the component field.
func (f *MenuFilter) WhereComponent(p entql.StringP) {
	f.Where(p.Field(menu.FieldComponent))
}

// WherePid applies the entql uint32 predicate on the pid field.
func (f *MenuFilter) WherePid(p entql.Uint32P) {
	f.Where(p.Field(menu.FieldPid))
}

// WhereRedirect applies the entql string predicate on the redirect field.
func (f *MenuFilter) WhereRedirect(p entql.StringP) {
	f.Where(p.Field(menu.FieldRedirect))
}

// WhereAuthCode applies the entql string predicate on the auth_code field.
func (f *MenuFilter) WhereAuthCode(p entql.StringP) {
	f.Where(p.Field(menu.FieldAuthCode))
}

// WhereActiveIcon applies the entql string predicate on the active_icon field.
func (f *MenuFilter) WhereActiveIcon(p entql.StringP) {
	f.Where(p.Field(menu.FieldActiveIcon))
}

// WhereActivePath applies the entql string predicate on the active_path field.
func (f *MenuFilter) WhereActivePath(p entql.StringP) {
	f.Where(p.Field(menu.FieldActivePath))
}

// WhereAffixTab applies the entql bool predicate on the affix_tab field.
func (f *MenuFilter) WhereAffixTab(p entql.BoolP) {
	f.Where(p.Field(menu.FieldAffixTab))
}

// WhereAffixTabOrder applies the entql int32 predicate on the affix_tab_order field.
func (f *MenuFilter) WhereAffixTabOrder(p entql.Int32P) {
	f.Where(p.Field(menu.FieldAffixTabOrder))
}

// WhereBadge applies the entql string predicate on the badge field.
func (f *MenuFilter) WhereBadge(p entql.StringP) {
	f.Where(p.Field(menu.FieldBadge))
}

// WhereBadgeType applies the entql int32 predicate on the badge_type field.
func (f *MenuFilter) WhereBadgeType(p entql.Int32P) {
	f.Where(p.Field(menu.FieldBadgeType))
}

// WhereBadgeVariants applies the entql int32 predicate on the badge_variants field.
func (f *MenuFilter) WhereBadgeVariants(p entql.Int32P) {
	f.Where(p.Field(menu.FieldBadgeVariants))
}

// WhereHideChildrenInMenu applies the entql bool predicate on the hide_children_in_menu field.
func (f *MenuFilter) WhereHideChildrenInMenu(p entql.BoolP) {
	f.Where(p.Field(menu.FieldHideChildrenInMenu))
}

// WhereHideInBreadcrumb applies the entql bool predicate on the hide_in_breadcrumb field.
func (f *MenuFilter) WhereHideInBreadcrumb(p entql.BoolP) {
	f.Where(p.Field(menu.FieldHideInBreadcrumb))
}

// WhereHideInMenu applies the entql bool predicate on the hide_in_menu field.
func (f *MenuFilter) WhereHideInMenu(p entql.BoolP) {
	f.Where(p.Field(menu.FieldHideInMenu))
}

// WhereHideInTab applies the entql bool predicate on the hide_in_tab field.
func (f *MenuFilter) WhereHideInTab(p entql.BoolP) {
	f.Where(p.Field(menu.FieldHideInTab))
}

// WhereIcon applies the entql string predicate on the icon field.
func (f *MenuFilter) WhereIcon(p entql.StringP) {
	f.Where(p.Field(menu.FieldIcon))
}

// WhereIframeSrc applies the entql string predicate on the iframe_src field.
func (f *MenuFilter) WhereIframeSrc(p entql.StringP) {
	f.Where(p.Field(menu.FieldIframeSrc))
}

// WhereKeepAlive applies the entql bool predicate on the keep_alive field.
func (f *MenuFilter) WhereKeepAlive(p entql.BoolP) {
	f.Where(p.Field(menu.FieldKeepAlive))
}

// WhereLink applies the entql string predicate on the link field.
func (f *MenuFilter) WhereLink(p entql.StringP) {
	f.Where(p.Field(menu.FieldLink))
}

// WhereMaxNumOfOpenTab applies the entql int32 predicate on the max_num_of_open_tab field.
func (f *MenuFilter) WhereMaxNumOfOpenTab(p entql.Int32P) {
	f.Where(p.Field(menu.FieldMaxNumOfOpenTab))
}

// WhereNoBasicLayout applies the entql bool predicate on the no_basic_layout field.
func (f *MenuFilter) WhereNoBasicLayout(p entql.BoolP) {
	f.Where(p.Field(menu.FieldNoBasicLayout))
}

// WhereOpenInNewWindow applies the entql bool predicate on the open_in_new_window field.
func (f *MenuFilter) WhereOpenInNewWindow(p entql.BoolP) {
	f.Where(p.Field(menu.FieldOpenInNewWindow))
}

// WhereSort applies the entql int32 predicate on the sort field.
func (f *MenuFilter) WhereSort(p entql.Int32P) {
	f.Where(p.Field(menu.FieldSort))
}

// WhereQuery applies the entql string predicate on the query field.
func (f *MenuFilter) WhereQuery(p entql.StringP) {
	f.Where(p.Field(menu.FieldQuery))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *MenuFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(menu.FieldTitle))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *MenuFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *MenuFilter) WhereHasParentWith(preds ...predicate.Menu) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *MenuFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *MenuFilter) WhereHasChildrenWith(preds ...predicate.Menu) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *PostQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PostQuery builder.
func (_q *PostQuery) Filter() *PostFilter {
	return &PostFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *PostMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PostMutation builder.
func (m *PostMutation) Filter() *PostFilter {
	return &PostFilter{config: m.config, predicateAdder: m}
}

// PostFilter provides a generic filtering capability at runtime for PostQuery.
type PostFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PostFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *PostFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(post.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PostFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(post.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PostFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(post.FieldUpdatedAt))
}

// WhereStatus applies the entql int32 predicate on the status field.
func (f *PostFilter) WhereStatus(p entql.Int32P) {
	f.Where(p.Field(post.FieldStatus))
}

// WhereDomainID applies the entql uint32 predicate on the domain_id field.
func (f *PostFilter) WhereDomainID(p entql.Uint32P) {
	f.Where(p.Field(post.FieldDomainID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PostFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(post.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *PostFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(post.FieldName))
}

// addPredicate implements the predicateAdder interface.
func (_q *RoleQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RoleQuery builder.
func (_q *RoleQuery) Filter() *RoleFilter {
	return &RoleFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *RoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RoleMutation builder.
func (m *RoleMutation) Filter() *RoleFilter {
	return &RoleFilter{config: m.config, predicateAdder: m}
}

// RoleFilter provides a generic filtering capability at runtime for RoleQuery.
type RoleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *RoleFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(role.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RoleFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(role.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RoleFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(role.FieldUpdatedAt))
}

// WhereStatus applies the entql int32 predicate on the status field.
func (f *RoleFilter) WhereStatus(p entql.Int32P) {
	f.Where(p.Field(role.FieldStatus))
}

// WhereDomainID applies the entql uint32 predicate on the domain_id field.
func (f *RoleFilter) WhereDomainID(p entql.Uint32P) {
	f.Where(p.Field(role.FieldDomainID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RoleFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(role.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *RoleFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(role.FieldName))
}

// WhereDefaultRouter applies the entql string predicate on the default_router field.
func (f *RoleFilter) WhereDefaultRouter(p entql.StringP) {
	f.Where(p.Field(role.FieldDefaultRouter))
}

// WhereDataScope applies the entql int32 predicate on the data_scope field.
func (f *RoleFilter) WhereDataScope(p entql.Int32P) {
	f.Where(p.Field(role.FieldDataScope))
}

// WhereMenuCheckStrictly applies the entql int32 predicate on the menu_check_strictly field.
func (f *RoleFilter) WhereMenuCheckStrictly(p entql.Int32P) {
	f.Where(p.Field(role.FieldMenuCheckStrictly))
}

// WhereDeptCheckStrictly applies the entql int32 predicate on the dept_check_strictly field.
func (f *RoleFilter) WhereDeptCheckStrictly(p entql.Int32P) {
	f.Where(p.Field(role.FieldDeptCheckStrictly))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *RoleFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *RoleFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (_q *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *UserFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereStatus applies the entql int32 predicate on the status field.
func (f *UserFilter) WhereStatus(p entql.Int32P) {
	f.Where(p.Field(user.FieldStatus))
}

// WhereDomainID applies the entql uint32 predicate on the domain_id field.
func (f *UserFilter) WhereDomainID(p entql.Uint32P) {
	f.Where(p.Field(user.FieldDomainID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereRealname applies the entql string predicate on the realname field.
func (f *UserFilter) WhereRealname(p entql.StringP) {
	f.Where(p.Field(user.FieldRealname))
}

// WhereNickname applies the entql string predicate on the nickname field.
func (f *UserFilter) WhereNickname(p entql.StringP) {
	f.Where(p.Field(user.FieldNickname))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *UserFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(user.FieldPhone))
}

// WhereAvatar applies the entql string predicate on the avatar field.
func (f *UserFilter) WhereAvatar(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatar))
}

// WhereBirthday applies the entql time.Time predicate on the birthday field.
func (f *UserFilter) WhereBirthday(p entql.TimeP) {
	f.Where(p.Field(user.FieldBirthday))
}

// WhereGender applies the entql int32 predicate on the gender field.
func (f *UserFilter) WhereGender(p entql.Int32P) {
	f.Where(p.Field(user.FieldGender))
}

// WhereAge applies the entql int predicate on the age field.
func (f *UserFilter) WhereAge(p entql.IntP) {
	f.Where(p.Field(user.FieldAge))
}

// WhereLastLoginAt applies the entql time.Time predicate on the last_login_at field.
func (f *UserFilter) WhereLastLoginAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldLastLoginAt))
}

// WhereLastLoginIP applies the entql string predicate on the last_login_ip field.
func (f *UserFilter) WhereLastLoginIP(p entql.StringP) {
	f.Where(p.Field(user.FieldLastLoginIP))
}

// WhereLoginCount applies the entql int predicate on the login_count field.
func (f *UserFilter) WhereLoginCount(p entql.IntP) {
	f.Where(p.Field(user.FieldLoginCount))
}

// WhereSettings applies the entql json.RawMessage predicate on the settings field.
func (f *UserFilter) WhereSettings(p entql.BytesP) {
	f.Where(p.Field(user.FieldSettings))
}

// WhereMetadata applies the entql json.RawMessage predicate on the metadata field.
func (f *UserFilter) WhereMetadata(p entql.BytesP) {
	f.Where(p.Field(user.FieldMetadata))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *UserFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(user.FieldDescription))
}

// WhereHasRoles applies a predicate to check if query has an edge roles.
func (f *UserFilter) WhereHasRoles() {
	f.Where(entql.HasEdge("roles"))
}

// WhereHasRolesWith applies a predicate to check if query has an edge roles with a given conditions (other predicates).
func (f *UserFilter) WhereHasRolesWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPosts applies a predicate to check if query has an edge posts.
func (f *UserFilter) WhereHasPosts() {
	f.Where(entql.HasEdge("posts"))
}

// WhereHasPostsWith applies a predicate to check if query has an edge posts with a given conditions (other predicates).
func (f *UserFilter) WhereHasPostsWith(preds ...predicate.Post) {
	f.Where(entql.HasEdgeWith("posts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
