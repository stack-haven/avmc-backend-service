// Code generated by ent, DO NOT EDIT.

package gen

import (
	"backend-service/app/avmc/admin/internal/data/ent/gen/predicate"
	"backend-service/app/avmc/admin/internal/data/ent/gen/role"
	"backend-service/app/avmc/admin/internal/data/ent/gen/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	hooks     []Hook
	mutation  *RoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RoleUpdate builder.
func (_u *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RoleUpdate) SetUpdatedAt(v time.Time) *RoleUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *RoleUpdate) SetDeletedAt(v time.Time) *RoleUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableDeletedAt(v *time.Time) *RoleUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *RoleUpdate) ClearDeletedAt() *RoleUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *RoleUpdate) SetStatus(v int32) *RoleUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableStatus(v *int32) *RoleUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *RoleUpdate) AddStatus(v int32) *RoleUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// SetDomainID sets the "domain_id" field.
func (_u *RoleUpdate) SetDomainID(v uint32) *RoleUpdate {
	_u.mutation.ResetDomainID()
	_u.mutation.SetDomainID(v)
	return _u
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableDomainID(v *uint32) *RoleUpdate {
	if v != nil {
		_u.SetDomainID(*v)
	}
	return _u
}

// AddDomainID adds value to the "domain_id" field.
func (_u *RoleUpdate) AddDomainID(v int32) *RoleUpdate {
	_u.mutation.AddDomainID(v)
	return _u
}

// SetName sets the "name" field.
func (_u *RoleUpdate) SetName(v string) *RoleUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableName(v *string) *RoleUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDefaultRouter sets the "default_router" field.
func (_u *RoleUpdate) SetDefaultRouter(v string) *RoleUpdate {
	_u.mutation.SetDefaultRouter(v)
	return _u
}

// SetNillableDefaultRouter sets the "default_router" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableDefaultRouter(v *string) *RoleUpdate {
	if v != nil {
		_u.SetDefaultRouter(*v)
	}
	return _u
}

// SetDataScope sets the "data_scope" field.
func (_u *RoleUpdate) SetDataScope(v int32) *RoleUpdate {
	_u.mutation.ResetDataScope()
	_u.mutation.SetDataScope(v)
	return _u
}

// SetNillableDataScope sets the "data_scope" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableDataScope(v *int32) *RoleUpdate {
	if v != nil {
		_u.SetDataScope(*v)
	}
	return _u
}

// AddDataScope adds value to the "data_scope" field.
func (_u *RoleUpdate) AddDataScope(v int32) *RoleUpdate {
	_u.mutation.AddDataScope(v)
	return _u
}

// SetMenuCheckStrictly sets the "menu_check_strictly" field.
func (_u *RoleUpdate) SetMenuCheckStrictly(v int32) *RoleUpdate {
	_u.mutation.ResetMenuCheckStrictly()
	_u.mutation.SetMenuCheckStrictly(v)
	return _u
}

// SetNillableMenuCheckStrictly sets the "menu_check_strictly" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableMenuCheckStrictly(v *int32) *RoleUpdate {
	if v != nil {
		_u.SetMenuCheckStrictly(*v)
	}
	return _u
}

// AddMenuCheckStrictly adds value to the "menu_check_strictly" field.
func (_u *RoleUpdate) AddMenuCheckStrictly(v int32) *RoleUpdate {
	_u.mutation.AddMenuCheckStrictly(v)
	return _u
}

// SetDeptCheckStrictly sets the "dept_check_strictly" field.
func (_u *RoleUpdate) SetDeptCheckStrictly(v int32) *RoleUpdate {
	_u.mutation.ResetDeptCheckStrictly()
	_u.mutation.SetDeptCheckStrictly(v)
	return _u
}

// SetNillableDeptCheckStrictly sets the "dept_check_strictly" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableDeptCheckStrictly(v *int32) *RoleUpdate {
	if v != nil {
		_u.SetDeptCheckStrictly(*v)
	}
	return _u
}

// AddDeptCheckStrictly adds value to the "dept_check_strictly" field.
func (_u *RoleUpdate) AddDeptCheckStrictly(v int32) *RoleUpdate {
	_u.mutation.AddDeptCheckStrictly(v)
	return _u
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *RoleUpdate) AddUserIDs(ids ...uint32) *RoleUpdate {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *RoleUpdate) AddUsers(v ...*User) *RoleUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (_u *RoleUpdate) Mutation() *RoleMutation {
	return _u.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *RoleUpdate) ClearUsers() *RoleUpdate {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *RoleUpdate) RemoveUserIDs(ids ...uint32) *RoleUpdate {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *RoleUpdate) RemoveUsers(v ...*User) *RoleUpdate {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RoleUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RoleUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RoleUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RoleUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := role.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RoleUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := role.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`gen: validator failed for field "Role.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DomainID(); ok {
		if err := role.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`gen: validator failed for field "Role.domain_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := role.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Role.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DefaultRouter(); ok {
		if err := role.DefaultRouterValidator(v); err != nil {
			return &ValidationError{Name: "default_router", err: fmt.Errorf(`gen: validator failed for field "Role.default_router": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RoleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RoleUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(role.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(role.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(role.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(role.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.DomainID(); ok {
		_spec.SetField(role.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDomainID(); ok {
		_spec.AddField(role.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.DefaultRouter(); ok {
		_spec.SetField(role.FieldDefaultRouter, field.TypeString, value)
	}
	if value, ok := _u.mutation.DataScope(); ok {
		_spec.SetField(role.FieldDataScope, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedDataScope(); ok {
		_spec.AddField(role.FieldDataScope, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.MenuCheckStrictly(); ok {
		_spec.SetField(role.FieldMenuCheckStrictly, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedMenuCheckStrictly(); ok {
		_spec.AddField(role.FieldMenuCheckStrictly, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.DeptCheckStrictly(); ok {
		_spec.SetField(role.FieldDeptCheckStrictly, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedDeptCheckStrictly(); ok {
		_spec.AddField(role.FieldDeptCheckStrictly, field.TypeInt32, value)
	}
	if _u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: role.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !_u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: role.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: role.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RoleUpdateOne) SetUpdatedAt(v time.Time) *RoleUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *RoleUpdateOne) SetDeletedAt(v time.Time) *RoleUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableDeletedAt(v *time.Time) *RoleUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *RoleUpdateOne) ClearDeletedAt() *RoleUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *RoleUpdateOne) SetStatus(v int32) *RoleUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableStatus(v *int32) *RoleUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *RoleUpdateOne) AddStatus(v int32) *RoleUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// SetDomainID sets the "domain_id" field.
func (_u *RoleUpdateOne) SetDomainID(v uint32) *RoleUpdateOne {
	_u.mutation.ResetDomainID()
	_u.mutation.SetDomainID(v)
	return _u
}

// SetNillableDomainID sets the "domain_id" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableDomainID(v *uint32) *RoleUpdateOne {
	if v != nil {
		_u.SetDomainID(*v)
	}
	return _u
}

// AddDomainID adds value to the "domain_id" field.
func (_u *RoleUpdateOne) AddDomainID(v int32) *RoleUpdateOne {
	_u.mutation.AddDomainID(v)
	return _u
}

// SetName sets the "name" field.
func (_u *RoleUpdateOne) SetName(v string) *RoleUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableName(v *string) *RoleUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDefaultRouter sets the "default_router" field.
func (_u *RoleUpdateOne) SetDefaultRouter(v string) *RoleUpdateOne {
	_u.mutation.SetDefaultRouter(v)
	return _u
}

// SetNillableDefaultRouter sets the "default_router" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableDefaultRouter(v *string) *RoleUpdateOne {
	if v != nil {
		_u.SetDefaultRouter(*v)
	}
	return _u
}

// SetDataScope sets the "data_scope" field.
func (_u *RoleUpdateOne) SetDataScope(v int32) *RoleUpdateOne {
	_u.mutation.ResetDataScope()
	_u.mutation.SetDataScope(v)
	return _u
}

// SetNillableDataScope sets the "data_scope" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableDataScope(v *int32) *RoleUpdateOne {
	if v != nil {
		_u.SetDataScope(*v)
	}
	return _u
}

// AddDataScope adds value to the "data_scope" field.
func (_u *RoleUpdateOne) AddDataScope(v int32) *RoleUpdateOne {
	_u.mutation.AddDataScope(v)
	return _u
}

// SetMenuCheckStrictly sets the "menu_check_strictly" field.
func (_u *RoleUpdateOne) SetMenuCheckStrictly(v int32) *RoleUpdateOne {
	_u.mutation.ResetMenuCheckStrictly()
	_u.mutation.SetMenuCheckStrictly(v)
	return _u
}

// SetNillableMenuCheckStrictly sets the "menu_check_strictly" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableMenuCheckStrictly(v *int32) *RoleUpdateOne {
	if v != nil {
		_u.SetMenuCheckStrictly(*v)
	}
	return _u
}

// AddMenuCheckStrictly adds value to the "menu_check_strictly" field.
func (_u *RoleUpdateOne) AddMenuCheckStrictly(v int32) *RoleUpdateOne {
	_u.mutation.AddMenuCheckStrictly(v)
	return _u
}

// SetDeptCheckStrictly sets the "dept_check_strictly" field.
func (_u *RoleUpdateOne) SetDeptCheckStrictly(v int32) *RoleUpdateOne {
	_u.mutation.ResetDeptCheckStrictly()
	_u.mutation.SetDeptCheckStrictly(v)
	return _u
}

// SetNillableDeptCheckStrictly sets the "dept_check_strictly" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableDeptCheckStrictly(v *int32) *RoleUpdateOne {
	if v != nil {
		_u.SetDeptCheckStrictly(*v)
	}
	return _u
}

// AddDeptCheckStrictly adds value to the "dept_check_strictly" field.
func (_u *RoleUpdateOne) AddDeptCheckStrictly(v int32) *RoleUpdateOne {
	_u.mutation.AddDeptCheckStrictly(v)
	return _u
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *RoleUpdateOne) AddUserIDs(ids ...uint32) *RoleUpdateOne {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *RoleUpdateOne) AddUsers(v ...*User) *RoleUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (_u *RoleUpdateOne) Mutation() *RoleMutation {
	return _u.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *RoleUpdateOne) ClearUsers() *RoleUpdateOne {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *RoleUpdateOne) RemoveUserIDs(ids ...uint32) *RoleUpdateOne {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *RoleUpdateOne) RemoveUsers(v ...*User) *RoleUpdateOne {
	ids := make([]uint32, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the RoleUpdate builder.
func (_u *RoleUpdateOne) Where(ps ...predicate.Role) *RoleUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RoleUpdateOne) Select(field string, fields ...string) *RoleUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Role entity.
func (_u *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RoleUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := role.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RoleUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := role.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`gen: validator failed for field "Role.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DomainID(); ok {
		if err := role.DomainIDValidator(v); err != nil {
			return &ValidationError{Name: "domain_id", err: fmt.Errorf(`gen: validator failed for field "Role.domain_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := role.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Role.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DefaultRouter(); ok {
		if err := role.DefaultRouterValidator(v); err != nil {
			return &ValidationError{Name: "default_router", err: fmt.Errorf(`gen: validator failed for field "Role.default_router": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RoleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RoleUpdateOne) sqlSave(ctx context.Context) (_node *Role, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role.FieldID)
		for _, f := range fields {
			if !role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(role.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(role.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(role.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(role.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.DomainID(); ok {
		_spec.SetField(role.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDomainID(); ok {
		_spec.AddField(role.FieldDomainID, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.DefaultRouter(); ok {
		_spec.SetField(role.FieldDefaultRouter, field.TypeString, value)
	}
	if value, ok := _u.mutation.DataScope(); ok {
		_spec.SetField(role.FieldDataScope, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedDataScope(); ok {
		_spec.AddField(role.FieldDataScope, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.MenuCheckStrictly(); ok {
		_spec.SetField(role.FieldMenuCheckStrictly, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedMenuCheckStrictly(); ok {
		_spec.AddField(role.FieldMenuCheckStrictly, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.DeptCheckStrictly(); ok {
		_spec.SetField(role.FieldDeptCheckStrictly, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedDeptCheckStrictly(); ok {
		_spec.AddField(role.FieldDeptCheckStrictly, field.TypeInt32, value)
	}
	if _u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: role.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !_u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: role.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: role.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Role{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
