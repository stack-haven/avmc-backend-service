// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend-service/app/avmc/admin/internal/data/ent/dept"
	"backend-service/app/avmc/admin/internal/data/ent/menu"
	"backend-service/app/avmc/admin/internal/data/ent/post"
	"backend-service/app/avmc/admin/internal/data/ent/role"
	"backend-service/app/avmc/admin/internal/data/ent/schema"
	"backend-service/app/avmc/admin/internal/data/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	deptMixin := schema.Dept{}.Mixin()
	deptMixinFields0 := deptMixin[0].Fields()
	_ = deptMixinFields0
	deptFields := schema.Dept{}.Fields()
	_ = deptFields
	// deptDescCreatedAt is the schema descriptor for created_at field.
	deptDescCreatedAt := deptMixinFields0[1].Descriptor()
	// dept.DefaultCreatedAt holds the default value on creation for the created_at field.
	dept.DefaultCreatedAt = deptDescCreatedAt.Default.(func() time.Time)
	// deptDescUpdatedAt is the schema descriptor for updated_at field.
	deptDescUpdatedAt := deptMixinFields0[2].Descriptor()
	// dept.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	dept.DefaultUpdatedAt = deptDescUpdatedAt.Default.(func() time.Time)
	// dept.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	dept.UpdateDefaultUpdatedAt = deptDescUpdatedAt.UpdateDefault.(func() time.Time)
	// deptDescStatus is the schema descriptor for status field.
	deptDescStatus := deptMixinFields0[4].Descriptor()
	// dept.DefaultStatus holds the default value on creation for the status field.
	dept.DefaultStatus = deptDescStatus.Default.(int32)
	// dept.StatusValidator is a validator for the "status" field. It is called by the builders before save.
	dept.StatusValidator = func() func(int32) error {
		validators := deptDescStatus.Validators
		fns := [...]func(int32) error{
			validators[0].(func(int32) error),
			validators[1].(func(int32) error),
		}
		return func(status int32) error {
			for _, fn := range fns {
				if err := fn(status); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// deptDescDomainID is the schema descriptor for domain_id field.
	deptDescDomainID := deptMixinFields0[5].Descriptor()
	// dept.DefaultDomainID holds the default value on creation for the domain_id field.
	dept.DefaultDomainID = deptDescDomainID.Default.(func() uint32)
	// dept.DomainIDValidator is a validator for the "domain_id" field. It is called by the builders before save.
	dept.DomainIDValidator = deptDescDomainID.Validators[0].(func(uint32) error)
	// deptDescName is the schema descriptor for name field.
	deptDescName := deptFields[0].Descriptor()
	// dept.NameValidator is a validator for the "name" field. It is called by the builders before save.
	dept.NameValidator = deptDescName.Validators[0].(func(string) error)
	// deptDescParentID is the schema descriptor for parent_id field.
	deptDescParentID := deptFields[1].Descriptor()
	// dept.DefaultParentID holds the default value on creation for the parent_id field.
	dept.DefaultParentID = deptDescParentID.Default.(uint32)
	// deptDescAncestors is the schema descriptor for ancestors field.
	deptDescAncestors := deptFields[2].Descriptor()
	// dept.DefaultAncestors holds the default value on creation for the ancestors field.
	dept.DefaultAncestors = deptDescAncestors.Default.([]int)
	// deptDescID is the schema descriptor for id field.
	deptDescID := deptMixinFields0[0].Descriptor()
	// dept.IDValidator is a validator for the "id" field. It is called by the builders before save.
	dept.IDValidator = deptDescID.Validators[0].(func(uint32) error)
	menuMixin := schema.Menu{}.Mixin()
	menuMixinFields0 := menuMixin[0].Fields()
	_ = menuMixinFields0
	menuFields := schema.Menu{}.Fields()
	_ = menuFields
	// menuDescCreatedAt is the schema descriptor for created_at field.
	menuDescCreatedAt := menuMixinFields0[1].Descriptor()
	// menu.DefaultCreatedAt holds the default value on creation for the created_at field.
	menu.DefaultCreatedAt = menuDescCreatedAt.Default.(func() time.Time)
	// menuDescUpdatedAt is the schema descriptor for updated_at field.
	menuDescUpdatedAt := menuMixinFields0[2].Descriptor()
	// menu.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	menu.DefaultUpdatedAt = menuDescUpdatedAt.Default.(func() time.Time)
	// menu.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	menu.UpdateDefaultUpdatedAt = menuDescUpdatedAt.UpdateDefault.(func() time.Time)
	// menuDescStatus is the schema descriptor for status field.
	menuDescStatus := menuMixinFields0[4].Descriptor()
	// menu.DefaultStatus holds the default value on creation for the status field.
	menu.DefaultStatus = menuDescStatus.Default.(int32)
	// menu.StatusValidator is a validator for the "status" field. It is called by the builders before save.
	menu.StatusValidator = func() func(int32) error {
		validators := menuDescStatus.Validators
		fns := [...]func(int32) error{
			validators[0].(func(int32) error),
			validators[1].(func(int32) error),
		}
		return func(status int32) error {
			for _, fn := range fns {
				if err := fn(status); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// menuDescDomainID is the schema descriptor for domain_id field.
	menuDescDomainID := menuMixinFields0[5].Descriptor()
	// menu.DefaultDomainID holds the default value on creation for the domain_id field.
	menu.DefaultDomainID = menuDescDomainID.Default.(func() uint32)
	// menu.DomainIDValidator is a validator for the "domain_id" field. It is called by the builders before save.
	menu.DomainIDValidator = menuDescDomainID.Validators[0].(func(uint32) error)
	// menuDescName is the schema descriptor for name field.
	menuDescName := menuFields[0].Descriptor()
	// menu.DefaultName holds the default value on creation for the name field.
	menu.DefaultName = menuDescName.Default.(string)
	// menu.NameValidator is a validator for the "name" field. It is called by the builders before save.
	menu.NameValidator = func() func(string) error {
		validators := menuDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// menuDescTitle is the schema descriptor for title field.
	menuDescTitle := menuFields[1].Descriptor()
	// menu.DefaultTitle holds the default value on creation for the title field.
	menu.DefaultTitle = menuDescTitle.Default.(string)
	// menu.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	menu.TitleValidator = menuDescTitle.Validators[0].(func(string) error)
	// menuDescParentID is the schema descriptor for parent_id field.
	menuDescParentID := menuFields[2].Descriptor()
	// menu.DefaultParentID holds the default value on creation for the parent_id field.
	menu.DefaultParentID = menuDescParentID.Default.(uint32)
	// menuDescType is the schema descriptor for type field.
	menuDescType := menuFields[3].Descriptor()
	// menu.DefaultType holds the default value on creation for the type field.
	menu.DefaultType = menuDescType.Default.(int32)
	// menuDescPath is the schema descriptor for path field.
	menuDescPath := menuFields[4].Descriptor()
	// menu.DefaultPath holds the default value on creation for the path field.
	menu.DefaultPath = menuDescPath.Default.(string)
	// menuDescComponent is the schema descriptor for component field.
	menuDescComponent := menuFields[5].Descriptor()
	// menu.DefaultComponent holds the default value on creation for the component field.
	menu.DefaultComponent = menuDescComponent.Default.(string)
	// menuDescIcon is the schema descriptor for icon field.
	menuDescIcon := menuFields[6].Descriptor()
	// menu.DefaultIcon holds the default value on creation for the icon field.
	menu.DefaultIcon = menuDescIcon.Default.(string)
	// menu.IconValidator is a validator for the "icon" field. It is called by the builders before save.
	menu.IconValidator = menuDescIcon.Validators[0].(func(string) error)
	// menuDescIsExt is the schema descriptor for is_ext field.
	menuDescIsExt := menuFields[7].Descriptor()
	// menu.DefaultIsExt holds the default value on creation for the is_ext field.
	menu.DefaultIsExt = menuDescIsExt.Default.(bool)
	// menuDescExtURL is the schema descriptor for ext_url field.
	menuDescExtURL := menuFields[8].Descriptor()
	// menu.DefaultExtURL holds the default value on creation for the ext_url field.
	menu.DefaultExtURL = menuDescExtURL.Default.(string)
	// menu.ExtURLValidator is a validator for the "ext_url" field. It is called by the builders before save.
	menu.ExtURLValidator = menuDescExtURL.Validators[0].(func(string) error)
	// menuDescPermissions is the schema descriptor for permissions field.
	menuDescPermissions := menuFields[9].Descriptor()
	// menu.DefaultPermissions holds the default value on creation for the permissions field.
	menu.DefaultPermissions = menuDescPermissions.Default.([]string)
	// menuDescRedirect is the schema descriptor for redirect field.
	menuDescRedirect := menuFields[10].Descriptor()
	// menu.DefaultRedirect holds the default value on creation for the redirect field.
	menu.DefaultRedirect = menuDescRedirect.Default.(string)
	// menuDescCurrentActiveMenu is the schema descriptor for current_active_menu field.
	menuDescCurrentActiveMenu := menuFields[11].Descriptor()
	// menu.DefaultCurrentActiveMenu holds the default value on creation for the current_active_menu field.
	menu.DefaultCurrentActiveMenu = menuDescCurrentActiveMenu.Default.(string)
	// menuDescKeepAlive is the schema descriptor for keep_alive field.
	menuDescKeepAlive := menuFields[12].Descriptor()
	// menu.DefaultKeepAlive holds the default value on creation for the keep_alive field.
	menu.DefaultKeepAlive = menuDescKeepAlive.Default.(bool)
	// menuDescVisible is the schema descriptor for visible field.
	menuDescVisible := menuFields[13].Descriptor()
	// menu.DefaultVisible holds the default value on creation for the visible field.
	menu.DefaultVisible = menuDescVisible.Default.(bool)
	// menuDescHideTab is the schema descriptor for hide_tab field.
	menuDescHideTab := menuFields[14].Descriptor()
	// menu.DefaultHideTab holds the default value on creation for the hide_tab field.
	menu.DefaultHideTab = menuDescHideTab.Default.(bool)
	// menuDescHideMenu is the schema descriptor for hide_menu field.
	menuDescHideMenu := menuFields[15].Descriptor()
	// menu.DefaultHideMenu holds the default value on creation for the hide_menu field.
	menu.DefaultHideMenu = menuDescHideMenu.Default.(bool)
	// menuDescHideBreadcrumb is the schema descriptor for hide_breadcrumb field.
	menuDescHideBreadcrumb := menuFields[16].Descriptor()
	// menu.DefaultHideBreadcrumb holds the default value on creation for the hide_breadcrumb field.
	menu.DefaultHideBreadcrumb = menuDescHideBreadcrumb.Default.(bool)
	// menuDescID is the schema descriptor for id field.
	menuDescID := menuMixinFields0[0].Descriptor()
	// menu.IDValidator is a validator for the "id" field. It is called by the builders before save.
	menu.IDValidator = menuDescID.Validators[0].(func(uint32) error)
	postMixin := schema.Post{}.Mixin()
	postMixinFields0 := postMixin[0].Fields()
	_ = postMixinFields0
	postFields := schema.Post{}.Fields()
	_ = postFields
	// postDescCreatedAt is the schema descriptor for created_at field.
	postDescCreatedAt := postMixinFields0[1].Descriptor()
	// post.DefaultCreatedAt holds the default value on creation for the created_at field.
	post.DefaultCreatedAt = postDescCreatedAt.Default.(func() time.Time)
	// postDescUpdatedAt is the schema descriptor for updated_at field.
	postDescUpdatedAt := postMixinFields0[2].Descriptor()
	// post.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	post.DefaultUpdatedAt = postDescUpdatedAt.Default.(func() time.Time)
	// post.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	post.UpdateDefaultUpdatedAt = postDescUpdatedAt.UpdateDefault.(func() time.Time)
	// postDescStatus is the schema descriptor for status field.
	postDescStatus := postMixinFields0[4].Descriptor()
	// post.DefaultStatus holds the default value on creation for the status field.
	post.DefaultStatus = postDescStatus.Default.(int32)
	// post.StatusValidator is a validator for the "status" field. It is called by the builders before save.
	post.StatusValidator = func() func(int32) error {
		validators := postDescStatus.Validators
		fns := [...]func(int32) error{
			validators[0].(func(int32) error),
			validators[1].(func(int32) error),
		}
		return func(status int32) error {
			for _, fn := range fns {
				if err := fn(status); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// postDescDomainID is the schema descriptor for domain_id field.
	postDescDomainID := postMixinFields0[5].Descriptor()
	// post.DefaultDomainID holds the default value on creation for the domain_id field.
	post.DefaultDomainID = postDescDomainID.Default.(func() uint32)
	// post.DomainIDValidator is a validator for the "domain_id" field. It is called by the builders before save.
	post.DomainIDValidator = postDescDomainID.Validators[0].(func(uint32) error)
	// postDescName is the schema descriptor for name field.
	postDescName := postFields[0].Descriptor()
	// post.DefaultName holds the default value on creation for the name field.
	post.DefaultName = postDescName.Default.(string)
	// post.NameValidator is a validator for the "name" field. It is called by the builders before save.
	post.NameValidator = postDescName.Validators[0].(func(string) error)
	// postDescID is the schema descriptor for id field.
	postDescID := postMixinFields0[0].Descriptor()
	// post.IDValidator is a validator for the "id" field. It is called by the builders before save.
	post.IDValidator = postDescID.Validators[0].(func(uint32) error)
	roleMixin := schema.Role{}.Mixin()
	roleMixinFields0 := roleMixin[0].Fields()
	_ = roleMixinFields0
	roleFields := schema.Role{}.Fields()
	_ = roleFields
	// roleDescCreatedAt is the schema descriptor for created_at field.
	roleDescCreatedAt := roleMixinFields0[1].Descriptor()
	// role.DefaultCreatedAt holds the default value on creation for the created_at field.
	role.DefaultCreatedAt = roleDescCreatedAt.Default.(func() time.Time)
	// roleDescUpdatedAt is the schema descriptor for updated_at field.
	roleDescUpdatedAt := roleMixinFields0[2].Descriptor()
	// role.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	role.DefaultUpdatedAt = roleDescUpdatedAt.Default.(func() time.Time)
	// role.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	role.UpdateDefaultUpdatedAt = roleDescUpdatedAt.UpdateDefault.(func() time.Time)
	// roleDescStatus is the schema descriptor for status field.
	roleDescStatus := roleMixinFields0[4].Descriptor()
	// role.DefaultStatus holds the default value on creation for the status field.
	role.DefaultStatus = roleDescStatus.Default.(int32)
	// role.StatusValidator is a validator for the "status" field. It is called by the builders before save.
	role.StatusValidator = func() func(int32) error {
		validators := roleDescStatus.Validators
		fns := [...]func(int32) error{
			validators[0].(func(int32) error),
			validators[1].(func(int32) error),
		}
		return func(status int32) error {
			for _, fn := range fns {
				if err := fn(status); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// roleDescDomainID is the schema descriptor for domain_id field.
	roleDescDomainID := roleMixinFields0[5].Descriptor()
	// role.DefaultDomainID holds the default value on creation for the domain_id field.
	role.DefaultDomainID = roleDescDomainID.Default.(func() uint32)
	// role.DomainIDValidator is a validator for the "domain_id" field. It is called by the builders before save.
	role.DomainIDValidator = roleDescDomainID.Validators[0].(func(uint32) error)
	// roleDescName is the schema descriptor for name field.
	roleDescName := roleFields[0].Descriptor()
	// role.DefaultName holds the default value on creation for the name field.
	role.DefaultName = roleDescName.Default.(string)
	// role.NameValidator is a validator for the "name" field. It is called by the builders before save.
	role.NameValidator = roleDescName.Validators[0].(func(string) error)
	// roleDescDefaultRouter is the schema descriptor for default_router field.
	roleDescDefaultRouter := roleFields[1].Descriptor()
	// role.DefaultDefaultRouter holds the default value on creation for the default_router field.
	role.DefaultDefaultRouter = roleDescDefaultRouter.Default.(string)
	// role.DefaultRouterValidator is a validator for the "default_router" field. It is called by the builders before save.
	role.DefaultRouterValidator = roleDescDefaultRouter.Validators[0].(func(string) error)
	// roleDescDataScope is the schema descriptor for data_scope field.
	roleDescDataScope := roleFields[2].Descriptor()
	// role.DefaultDataScope holds the default value on creation for the data_scope field.
	role.DefaultDataScope = roleDescDataScope.Default.(int32)
	// roleDescMenuCheckStrictly is the schema descriptor for menu_check_strictly field.
	roleDescMenuCheckStrictly := roleFields[3].Descriptor()
	// role.DefaultMenuCheckStrictly holds the default value on creation for the menu_check_strictly field.
	role.DefaultMenuCheckStrictly = roleDescMenuCheckStrictly.Default.(int32)
	// roleDescDeptCheckStrictly is the schema descriptor for dept_check_strictly field.
	roleDescDeptCheckStrictly := roleFields[4].Descriptor()
	// role.DefaultDeptCheckStrictly holds the default value on creation for the dept_check_strictly field.
	role.DefaultDeptCheckStrictly = roleDescDeptCheckStrictly.Default.(int32)
	// roleDescID is the schema descriptor for id field.
	roleDescID := roleMixinFields0[0].Descriptor()
	// role.IDValidator is a validator for the "id" field. It is called by the builders before save.
	role.IDValidator = roleDescID.Validators[0].(func(uint32) error)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[2].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescStatus is the schema descriptor for status field.
	userDescStatus := userMixinFields0[4].Descriptor()
	// user.DefaultStatus holds the default value on creation for the status field.
	user.DefaultStatus = userDescStatus.Default.(int32)
	// user.StatusValidator is a validator for the "status" field. It is called by the builders before save.
	user.StatusValidator = func() func(int32) error {
		validators := userDescStatus.Validators
		fns := [...]func(int32) error{
			validators[0].(func(int32) error),
			validators[1].(func(int32) error),
		}
		return func(status int32) error {
			for _, fn := range fns {
				if err := fn(status); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescDomainID is the schema descriptor for domain_id field.
	userDescDomainID := userMixinFields0[5].Descriptor()
	// user.DefaultDomainID holds the default value on creation for the domain_id field.
	user.DefaultDomainID = userDescDomainID.Default.(func() uint32)
	// user.DomainIDValidator is a validator for the "domain_id" field. It is called by the builders before save.
	user.DomainIDValidator = userDescDomainID.Validators[0].(func(uint32) error)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[1].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = func() func(string) error {
		validators := userDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescRealname is the schema descriptor for realname field.
	userDescRealname := userFields[2].Descriptor()
	// user.RealnameValidator is a validator for the "realname" field. It is called by the builders before save.
	user.RealnameValidator = userDescRealname.Validators[0].(func(string) error)
	// userDescNickname is the schema descriptor for nickname field.
	userDescNickname := userFields[3].Descriptor()
	// user.NicknameValidator is a validator for the "nickname" field. It is called by the builders before save.
	user.NicknameValidator = userDescNickname.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[4].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPhone is the schema descriptor for phone field.
	userDescPhone := userFields[5].Descriptor()
	// user.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	user.PhoneValidator = userDescPhone.Validators[0].(func(string) error)
	// userDescAvatar is the schema descriptor for avatar field.
	userDescAvatar := userFields[6].Descriptor()
	// user.AvatarValidator is a validator for the "avatar" field. It is called by the builders before save.
	user.AvatarValidator = userDescAvatar.Validators[0].(func(string) error)
	// userDescGender is the schema descriptor for gender field.
	userDescGender := userFields[8].Descriptor()
	// user.DefaultGender holds the default value on creation for the gender field.
	user.DefaultGender = userDescGender.Default.(int32)
	// user.GenderValidator is a validator for the "gender" field. It is called by the builders before save.
	user.GenderValidator = func() func(int32) error {
		validators := userDescGender.Validators
		fns := [...]func(int32) error{
			validators[0].(func(int32) error),
			validators[1].(func(int32) error),
		}
		return func(gender int32) error {
			for _, fn := range fns {
				if err := fn(gender); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescAge is the schema descriptor for age field.
	userDescAge := userFields[9].Descriptor()
	// user.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	user.AgeValidator = func() func(int) error {
		validators := userDescAge.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(age int) error {
			for _, fn := range fns {
				if err := fn(age); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescLastLoginIP is the schema descriptor for last_login_ip field.
	userDescLastLoginIP := userFields[11].Descriptor()
	// user.LastLoginIPValidator is a validator for the "last_login_ip" field. It is called by the builders before save.
	user.LastLoginIPValidator = userDescLastLoginIP.Validators[0].(func(string) error)
	// userDescLoginCount is the schema descriptor for login_count field.
	userDescLoginCount := userFields[12].Descriptor()
	// user.DefaultLoginCount holds the default value on creation for the login_count field.
	user.DefaultLoginCount = userDescLoginCount.Default.(int)
	// userDescSettings is the schema descriptor for settings field.
	userDescSettings := userFields[13].Descriptor()
	// user.DefaultSettings holds the default value on creation for the settings field.
	user.DefaultSettings = userDescSettings.Default.([]string)
	// userDescMetadata is the schema descriptor for metadata field.
	userDescMetadata := userFields[14].Descriptor()
	// user.DefaultMetadata holds the default value on creation for the metadata field.
	user.DefaultMetadata = userDescMetadata.Default.([]string)
	// userDescDescription is the schema descriptor for description field.
	userDescDescription := userFields[15].Descriptor()
	// user.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	user.DescriptionValidator = userDescDescription.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = userDescID.Validators[0].(func(uint32) error)
}
