// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: common/enum/enum.proto

package enum

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 启用状态
type Status int32

const (
	Status_STATUS_UNSPECIFIED Status = 0 // 未指定
	Status_STATUS_ENABLED     Status = 1 // 启用
	Status_STATUS_DISABLED    Status = 2 // 禁用
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_ENABLED",
		2: "STATUS_DISABLED",
	}
	Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_ENABLED":     1,
		"STATUS_DISABLED":    2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_common_enum_enum_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_common_enum_enum_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_common_enum_enum_proto_rawDescGZIP(), []int{0}
}

// 通用排序
type SortOrder int32

const (
	SortOrder_SORT_ORDER_UNSPECIFIED SortOrder = 0 // 未指定
	SortOrder_SORT_ORDER_DESC        SortOrder = 1 // 降序
	SortOrder_SORT_ORDER_ASC         SortOrder = 2 // 升序
)

// Enum value maps for SortOrder.
var (
	SortOrder_name = map[int32]string{
		0: "SORT_ORDER_UNSPECIFIED",
		1: "SORT_ORDER_DESC",
		2: "SORT_ORDER_ASC",
	}
	SortOrder_value = map[string]int32{
		"SORT_ORDER_UNSPECIFIED": 0,
		"SORT_ORDER_DESC":        1,
		"SORT_ORDER_ASC":         2,
	}
)

func (x SortOrder) Enum() *SortOrder {
	p := new(SortOrder)
	*p = x
	return p
}

func (x SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_common_enum_enum_proto_enumTypes[1].Descriptor()
}

func (SortOrder) Type() protoreflect.EnumType {
	return &file_common_enum_enum_proto_enumTypes[1]
}

func (x SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder.Descriptor instead.
func (SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_common_enum_enum_proto_rawDescGZIP(), []int{1}
}

// 通用状态
type State int32

const (
	State_STATE_UNSPECIFIED State = 0 // 未指定
	State_STATE_ACTIVE      State = 1 // 活跃
	State_STATE_INACTIVE    State = 2 // 不活跃
	State_STATE_BANNED      State = 3 // 封禁
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_ACTIVE",
		2: "STATE_INACTIVE",
		3: "STATE_BANNED",
	}
	State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_ACTIVE":      1,
		"STATE_INACTIVE":    2,
		"STATE_BANNED":      3,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_common_enum_enum_proto_enumTypes[2].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_common_enum_enum_proto_enumTypes[2]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_common_enum_enum_proto_rawDescGZIP(), []int{2}
}

// 开关状态
type FeatureFlag int32

const (
	FeatureFlag_FEATURE_FLAG_UNSPECIFIED FeatureFlag = 0 // 未指定
	FeatureFlag_FEATURE_FLAG_ON          FeatureFlag = 1 // 开启
	FeatureFlag_FEATURE_FLAG_OFF         FeatureFlag = 2 // 关闭
)

// Enum value maps for FeatureFlag.
var (
	FeatureFlag_name = map[int32]string{
		0: "FEATURE_FLAG_UNSPECIFIED",
		1: "FEATURE_FLAG_ON",
		2: "FEATURE_FLAG_OFF",
	}
	FeatureFlag_value = map[string]int32{
		"FEATURE_FLAG_UNSPECIFIED": 0,
		"FEATURE_FLAG_ON":          1,
		"FEATURE_FLAG_OFF":         2,
	}
)

func (x FeatureFlag) Enum() *FeatureFlag {
	p := new(FeatureFlag)
	*p = x
	return p
}

func (x FeatureFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_common_enum_enum_proto_enumTypes[3].Descriptor()
}

func (FeatureFlag) Type() protoreflect.EnumType {
	return &file_common_enum_enum_proto_enumTypes[3]
}

func (x FeatureFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureFlag.Descriptor instead.
func (FeatureFlag) EnumDescriptor() ([]byte, []int) {
	return file_common_enum_enum_proto_rawDescGZIP(), []int{3}
}

// 性别
type Gender int32

const (
	Gender_GENDER_UNSPECIFIED Gender = 0 // 未指定
	Gender_GENDER_MALE        Gender = 1 // 男
	Gender_GENDER_FEMALE      Gender = 2 // 女
	Gender_GENDER_OTHER       Gender = 3 // 其他
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "GENDER_UNSPECIFIED",
		1: "GENDER_MALE",
		2: "GENDER_FEMALE",
		3: "GENDER_OTHER",
	}
	Gender_value = map[string]int32{
		"GENDER_UNSPECIFIED": 0,
		"GENDER_MALE":        1,
		"GENDER_FEMALE":      2,
		"GENDER_OTHER":       3,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_common_enum_enum_proto_enumTypes[4].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_common_enum_enum_proto_enumTypes[4]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_common_enum_enum_proto_rawDescGZIP(), []int{4}
}

// 审核状态
type AuditStatus int32

const (
	AuditStatus_AUDIT_STATUS_UNSPECIFIED AuditStatus = 0 // 未指定
	AuditStatus_AUDIT_STATUS_PENDING     AuditStatus = 1 // 待审核
	AuditStatus_AUDIT_STATUS_APPROVED    AuditStatus = 2 // 已通过
	AuditStatus_AUDIT_STATUS_REJECTED    AuditStatus = 3 // 已拒绝
	AuditStatus_AUDIT_STATUS_REVIEWING   AuditStatus = 4 // 审核中
)

// Enum value maps for AuditStatus.
var (
	AuditStatus_name = map[int32]string{
		0: "AUDIT_STATUS_UNSPECIFIED",
		1: "AUDIT_STATUS_PENDING",
		2: "AUDIT_STATUS_APPROVED",
		3: "AUDIT_STATUS_REJECTED",
		4: "AUDIT_STATUS_REVIEWING",
	}
	AuditStatus_value = map[string]int32{
		"AUDIT_STATUS_UNSPECIFIED": 0,
		"AUDIT_STATUS_PENDING":     1,
		"AUDIT_STATUS_APPROVED":    2,
		"AUDIT_STATUS_REJECTED":    3,
		"AUDIT_STATUS_REVIEWING":   4,
	}
)

func (x AuditStatus) Enum() *AuditStatus {
	p := new(AuditStatus)
	*p = x
	return p
}

func (x AuditStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_enum_enum_proto_enumTypes[5].Descriptor()
}

func (AuditStatus) Type() protoreflect.EnumType {
	return &file_common_enum_enum_proto_enumTypes[5]
}

func (x AuditStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditStatus.Descriptor instead.
func (AuditStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_enum_enum_proto_rawDescGZIP(), []int{5}
}

// 支付状态
type PaymentStatus int32

const (
	PaymentStatus_PAYMENT_STATUS_UNSPECIFIED PaymentStatus = 0 // 未指定
	PaymentStatus_PAYMENT_STATUS_PENDING     PaymentStatus = 1 // 待支付
	PaymentStatus_PAYMENT_STATUS_PAID        PaymentStatus = 2 // 已支付
	PaymentStatus_PAYMENT_STATUS_REFUNDING   PaymentStatus = 3 // 退款中
	PaymentStatus_PAYMENT_STATUS_REFUNDED    PaymentStatus = 4 // 已退款
	PaymentStatus_PAYMENT_STATUS_CANCELLED   PaymentStatus = 5 // 已取消
	PaymentStatus_PAYMENT_STATUS_FAILED      PaymentStatus = 6 // 支付失败
)

// Enum value maps for PaymentStatus.
var (
	PaymentStatus_name = map[int32]string{
		0: "PAYMENT_STATUS_UNSPECIFIED",
		1: "PAYMENT_STATUS_PENDING",
		2: "PAYMENT_STATUS_PAID",
		3: "PAYMENT_STATUS_REFUNDING",
		4: "PAYMENT_STATUS_REFUNDED",
		5: "PAYMENT_STATUS_CANCELLED",
		6: "PAYMENT_STATUS_FAILED",
	}
	PaymentStatus_value = map[string]int32{
		"PAYMENT_STATUS_UNSPECIFIED": 0,
		"PAYMENT_STATUS_PENDING":     1,
		"PAYMENT_STATUS_PAID":        2,
		"PAYMENT_STATUS_REFUNDING":   3,
		"PAYMENT_STATUS_REFUNDED":    4,
		"PAYMENT_STATUS_CANCELLED":   5,
		"PAYMENT_STATUS_FAILED":      6,
	}
)

func (x PaymentStatus) Enum() *PaymentStatus {
	p := new(PaymentStatus)
	*p = x
	return p
}

func (x PaymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_enum_enum_proto_enumTypes[6].Descriptor()
}

func (PaymentStatus) Type() protoreflect.EnumType {
	return &file_common_enum_enum_proto_enumTypes[6]
}

func (x PaymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentStatus.Descriptor instead.
func (PaymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_enum_enum_proto_rawDescGZIP(), []int{6}
}

// 订单状态
type OrderStatus int32

const (
	OrderStatus_ORDER_STATUS_UNSPECIFIED OrderStatus = 0 // 未指定
	OrderStatus_ORDER_STATUS_PENDING     OrderStatus = 1 // 待处理
	OrderStatus_ORDER_STATUS_PROCESSING  OrderStatus = 2 // 处理中
	OrderStatus_ORDER_STATUS_COMPLETED   OrderStatus = 3 // 已完成
	OrderStatus_ORDER_STATUS_CANCELLED   OrderStatus = 4 // 已取消
	OrderStatus_ORDER_STATUS_FAILED      OrderStatus = 5 // 已失败
	OrderStatus_ORDER_STATUS_REFUNDING   OrderStatus = 6 // 退款中
	OrderStatus_ORDER_STATUS_REFUNDED    OrderStatus = 7 // 已退款
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0: "ORDER_STATUS_UNSPECIFIED",
		1: "ORDER_STATUS_PENDING",
		2: "ORDER_STATUS_PROCESSING",
		3: "ORDER_STATUS_COMPLETED",
		4: "ORDER_STATUS_CANCELLED",
		5: "ORDER_STATUS_FAILED",
		6: "ORDER_STATUS_REFUNDING",
		7: "ORDER_STATUS_REFUNDED",
	}
	OrderStatus_value = map[string]int32{
		"ORDER_STATUS_UNSPECIFIED": 0,
		"ORDER_STATUS_PENDING":     1,
		"ORDER_STATUS_PROCESSING":  2,
		"ORDER_STATUS_COMPLETED":   3,
		"ORDER_STATUS_CANCELLED":   4,
		"ORDER_STATUS_FAILED":      5,
		"ORDER_STATUS_REFUNDING":   6,
		"ORDER_STATUS_REFUNDED":    7,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_enum_enum_proto_enumTypes[7].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_common_enum_enum_proto_enumTypes[7]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_enum_enum_proto_rawDescGZIP(), []int{7}
}

// 用户类型
type UserType int32

const (
	UserType_USER_TYPE_UNSPECIFIED UserType = 0 // 未指定
	UserType_USER_TYPE_ADMIN       UserType = 1 // 管理员
	UserType_USER_TYPE_STAFF       UserType = 2 // 员工
	UserType_USER_TYPE_CUSTOMER    UserType = 3 // 客户
	UserType_USER_TYPE_GUEST       UserType = 4 // 访客
)

// Enum value maps for UserType.
var (
	UserType_name = map[int32]string{
		0: "USER_TYPE_UNSPECIFIED",
		1: "USER_TYPE_ADMIN",
		2: "USER_TYPE_STAFF",
		3: "USER_TYPE_CUSTOMER",
		4: "USER_TYPE_GUEST",
	}
	UserType_value = map[string]int32{
		"USER_TYPE_UNSPECIFIED": 0,
		"USER_TYPE_ADMIN":       1,
		"USER_TYPE_STAFF":       2,
		"USER_TYPE_CUSTOMER":    3,
		"USER_TYPE_GUEST":       4,
	}
)

func (x UserType) Enum() *UserType {
	p := new(UserType)
	*p = x
	return p
}

func (x UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_enum_enum_proto_enumTypes[8].Descriptor()
}

func (UserType) Type() protoreflect.EnumType {
	return &file_common_enum_enum_proto_enumTypes[8]
}

func (x UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserType.Descriptor instead.
func (UserType) EnumDescriptor() ([]byte, []int) {
	return file_common_enum_enum_proto_rawDescGZIP(), []int{8}
}

// 文件类型
type FileType int32

const (
	FileType_FILE_TYPE_UNSPECIFIED FileType = 0 // 未指定
	FileType_FILE_TYPE_IMAGE       FileType = 1 // 图片
	FileType_FILE_TYPE_VIDEO       FileType = 2 // 视频
	FileType_FILE_TYPE_AUDIO       FileType = 3 // 音频
	FileType_FILE_TYPE_DOCUMENT    FileType = 4 // 文档
	FileType_FILE_TYPE_OTHER       FileType = 5 // 其他
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "FILE_TYPE_UNSPECIFIED",
		1: "FILE_TYPE_IMAGE",
		2: "FILE_TYPE_VIDEO",
		3: "FILE_TYPE_AUDIO",
		4: "FILE_TYPE_DOCUMENT",
		5: "FILE_TYPE_OTHER",
	}
	FileType_value = map[string]int32{
		"FILE_TYPE_UNSPECIFIED": 0,
		"FILE_TYPE_IMAGE":       1,
		"FILE_TYPE_VIDEO":       2,
		"FILE_TYPE_AUDIO":       3,
		"FILE_TYPE_DOCUMENT":    4,
		"FILE_TYPE_OTHER":       5,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_enum_enum_proto_enumTypes[9].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_common_enum_enum_proto_enumTypes[9]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_common_enum_enum_proto_rawDescGZIP(), []int{9}
}

// 消息类型
type MessageType int32

const (
	MessageType_MESSAGE_TYPE_UNSPECIFIED MessageType = 0 // 未指定
	MessageType_MESSAGE_TYPE_TEXT        MessageType = 1 // 文本
	MessageType_MESSAGE_TYPE_IMAGE       MessageType = 2 // 图片
	MessageType_MESSAGE_TYPE_VIDEO       MessageType = 3 // 视频
	MessageType_MESSAGE_TYPE_AUDIO       MessageType = 4 // 音频
	MessageType_MESSAGE_TYPE_FILE        MessageType = 5 // 文件
	MessageType_MESSAGE_TYPE_LOCATION    MessageType = 6 // 位置
	MessageType_MESSAGE_TYPE_SYSTEM      MessageType = 7 // 系统消息
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_UNSPECIFIED",
		1: "MESSAGE_TYPE_TEXT",
		2: "MESSAGE_TYPE_IMAGE",
		3: "MESSAGE_TYPE_VIDEO",
		4: "MESSAGE_TYPE_AUDIO",
		5: "MESSAGE_TYPE_FILE",
		6: "MESSAGE_TYPE_LOCATION",
		7: "MESSAGE_TYPE_SYSTEM",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSPECIFIED": 0,
		"MESSAGE_TYPE_TEXT":        1,
		"MESSAGE_TYPE_IMAGE":       2,
		"MESSAGE_TYPE_VIDEO":       3,
		"MESSAGE_TYPE_AUDIO":       4,
		"MESSAGE_TYPE_FILE":        5,
		"MESSAGE_TYPE_LOCATION":    6,
		"MESSAGE_TYPE_SYSTEM":      7,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_enum_enum_proto_enumTypes[10].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_common_enum_enum_proto_enumTypes[10]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_common_enum_enum_proto_rawDescGZIP(), []int{10}
}

// 设备类型
type DeviceType int32

const (
	DeviceType_DEVICE_TYPE_UNSPECIFIED DeviceType = 0 // 未指定
	DeviceType_DEVICE_TYPE_WEB         DeviceType = 1 // Web端
	DeviceType_DEVICE_TYPE_ANDROID     DeviceType = 2 // 安卓端
	DeviceType_DEVICE_TYPE_IOS         DeviceType = 3 // iOS端
	DeviceType_DEVICE_TYPE_DESKTOP     DeviceType = 4 // 桌面端
	DeviceType_DEVICE_TYPE_OTHER       DeviceType = 5 // 其他
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "DEVICE_TYPE_UNSPECIFIED",
		1: "DEVICE_TYPE_WEB",
		2: "DEVICE_TYPE_ANDROID",
		3: "DEVICE_TYPE_IOS",
		4: "DEVICE_TYPE_DESKTOP",
		5: "DEVICE_TYPE_OTHER",
	}
	DeviceType_value = map[string]int32{
		"DEVICE_TYPE_UNSPECIFIED": 0,
		"DEVICE_TYPE_WEB":         1,
		"DEVICE_TYPE_ANDROID":     2,
		"DEVICE_TYPE_IOS":         3,
		"DEVICE_TYPE_DESKTOP":     4,
		"DEVICE_TYPE_OTHER":       5,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_enum_enum_proto_enumTypes[11].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_common_enum_enum_proto_enumTypes[11]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_common_enum_enum_proto_rawDescGZIP(), []int{11}
}

// 通知类型
type NotificationType int32

const (
	NotificationType_NOTIFICATION_TYPE_UNSPECIFIED NotificationType = 0 // 未指定
	NotificationType_NOTIFICATION_TYPE_SYSTEM      NotificationType = 1 // 系统通知
	NotificationType_NOTIFICATION_TYPE_ORDER       NotificationType = 2 // 订单通知
	NotificationType_NOTIFICATION_TYPE_PAYMENT     NotificationType = 3 // 支付通知
	NotificationType_NOTIFICATION_TYPE_PROMOTION   NotificationType = 4 // 促销通知
	NotificationType_NOTIFICATION_TYPE_REMINDER    NotificationType = 5 // 提醒通知
)

// Enum value maps for NotificationType.
var (
	NotificationType_name = map[int32]string{
		0: "NOTIFICATION_TYPE_UNSPECIFIED",
		1: "NOTIFICATION_TYPE_SYSTEM",
		2: "NOTIFICATION_TYPE_ORDER",
		3: "NOTIFICATION_TYPE_PAYMENT",
		4: "NOTIFICATION_TYPE_PROMOTION",
		5: "NOTIFICATION_TYPE_REMINDER",
	}
	NotificationType_value = map[string]int32{
		"NOTIFICATION_TYPE_UNSPECIFIED": 0,
		"NOTIFICATION_TYPE_SYSTEM":      1,
		"NOTIFICATION_TYPE_ORDER":       2,
		"NOTIFICATION_TYPE_PAYMENT":     3,
		"NOTIFICATION_TYPE_PROMOTION":   4,
		"NOTIFICATION_TYPE_REMINDER":    5,
	}
)

func (x NotificationType) Enum() *NotificationType {
	p := new(NotificationType)
	*p = x
	return p
}

func (x NotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_enum_enum_proto_enumTypes[12].Descriptor()
}

func (NotificationType) Type() protoreflect.EnumType {
	return &file_common_enum_enum_proto_enumTypes[12]
}

func (x NotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationType.Descriptor instead.
func (NotificationType) EnumDescriptor() ([]byte, []int) {
	return file_common_enum_enum_proto_rawDescGZIP(), []int{12}
}

// 操作类型
type OperationType int32

const (
	OperationType_OPERATION_TYPE_UNSPECIFIED OperationType = 0 // 未指定
	OperationType_OPERATION_TYPE_CREATE      OperationType = 1 // 创建
	OperationType_OPERATION_TYPE_UPDATE      OperationType = 2 // 更新
	OperationType_OPERATION_TYPE_DELETE      OperationType = 3 // 删除
	OperationType_OPERATION_TYPE_QUERY       OperationType = 4 // 查询
	OperationType_OPERATION_TYPE_IMPORT      OperationType = 5 // 导入
	OperationType_OPERATION_TYPE_EXPORT      OperationType = 6 // 导出
)

// Enum value maps for OperationType.
var (
	OperationType_name = map[int32]string{
		0: "OPERATION_TYPE_UNSPECIFIED",
		1: "OPERATION_TYPE_CREATE",
		2: "OPERATION_TYPE_UPDATE",
		3: "OPERATION_TYPE_DELETE",
		4: "OPERATION_TYPE_QUERY",
		5: "OPERATION_TYPE_IMPORT",
		6: "OPERATION_TYPE_EXPORT",
	}
	OperationType_value = map[string]int32{
		"OPERATION_TYPE_UNSPECIFIED": 0,
		"OPERATION_TYPE_CREATE":      1,
		"OPERATION_TYPE_UPDATE":      2,
		"OPERATION_TYPE_DELETE":      3,
		"OPERATION_TYPE_QUERY":       4,
		"OPERATION_TYPE_IMPORT":      5,
		"OPERATION_TYPE_EXPORT":      6,
	}
)

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}

func (x OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_enum_enum_proto_enumTypes[13].Descriptor()
}

func (OperationType) Type() protoreflect.EnumType {
	return &file_common_enum_enum_proto_enumTypes[13]
}

func (x OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationType.Descriptor instead.
func (OperationType) EnumDescriptor() ([]byte, []int) {
	return file_common_enum_enum_proto_rawDescGZIP(), []int{13}
}

// 资源类型
type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_UNSPECIFIED ResourceType = 0 // 未指定
	ResourceType_RESOURCE_TYPE_USER        ResourceType = 1 // 用户资源
	ResourceType_RESOURCE_TYPE_ORDER       ResourceType = 2 // 订单资源
	ResourceType_RESOURCE_TYPE_PRODUCT     ResourceType = 3 // 产品资源
	ResourceType_RESOURCE_TYPE_ARTICLE     ResourceType = 4 // 文章资源
	ResourceType_RESOURCE_TYPE_COMMENT     ResourceType = 5 // 评论资源
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_UNSPECIFIED",
		1: "RESOURCE_TYPE_USER",
		2: "RESOURCE_TYPE_ORDER",
		3: "RESOURCE_TYPE_PRODUCT",
		4: "RESOURCE_TYPE_ARTICLE",
		5: "RESOURCE_TYPE_COMMENT",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED": 0,
		"RESOURCE_TYPE_USER":        1,
		"RESOURCE_TYPE_ORDER":       2,
		"RESOURCE_TYPE_PRODUCT":     3,
		"RESOURCE_TYPE_ARTICLE":     4,
		"RESOURCE_TYPE_COMMENT":     5,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_enum_enum_proto_enumTypes[14].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_common_enum_enum_proto_enumTypes[14]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_common_enum_enum_proto_rawDescGZIP(), []int{14}
}

// 权限级别
type PermissionLevel int32

const (
	PermissionLevel_PERMISSION_LEVEL_UNSPECIFIED PermissionLevel = 0 // 未指定
	PermissionLevel_PERMISSION_LEVEL_NONE        PermissionLevel = 1 // 无权限
	PermissionLevel_PERMISSION_LEVEL_READ        PermissionLevel = 2 // 只读权限
	PermissionLevel_PERMISSION_LEVEL_WRITE       PermissionLevel = 3 // 读写权限
	PermissionLevel_PERMISSION_LEVEL_ADMIN       PermissionLevel = 4 // 管理权限
	PermissionLevel_PERMISSION_LEVEL_SUPER       PermissionLevel = 5 // 超级权限
)

// Enum value maps for PermissionLevel.
var (
	PermissionLevel_name = map[int32]string{
		0: "PERMISSION_LEVEL_UNSPECIFIED",
		1: "PERMISSION_LEVEL_NONE",
		2: "PERMISSION_LEVEL_READ",
		3: "PERMISSION_LEVEL_WRITE",
		4: "PERMISSION_LEVEL_ADMIN",
		5: "PERMISSION_LEVEL_SUPER",
	}
	PermissionLevel_value = map[string]int32{
		"PERMISSION_LEVEL_UNSPECIFIED": 0,
		"PERMISSION_LEVEL_NONE":        1,
		"PERMISSION_LEVEL_READ":        2,
		"PERMISSION_LEVEL_WRITE":       3,
		"PERMISSION_LEVEL_ADMIN":       4,
		"PERMISSION_LEVEL_SUPER":       5,
	}
)

func (x PermissionLevel) Enum() *PermissionLevel {
	p := new(PermissionLevel)
	*p = x
	return p
}

func (x PermissionLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_common_enum_enum_proto_enumTypes[15].Descriptor()
}

func (PermissionLevel) Type() protoreflect.EnumType {
	return &file_common_enum_enum_proto_enumTypes[15]
}

func (x PermissionLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionLevel.Descriptor instead.
func (PermissionLevel) EnumDescriptor() ([]byte, []int) {
	return file_common_enum_enum_proto_rawDescGZIP(), []int{15}
}

var File_common_enum_enum_proto protoreflect.FileDescriptor

var file_common_enum_enum_proto_rawDesc = string([]byte{
	0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x2a, 0x49,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x09, 0x53, 0x6f, 0x72,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x52, 0x54, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x02, 0x2a, 0x56, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0x56, 0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47,
	0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x2a, 0x56, 0x0a, 0x06, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x03, 0x2a, 0x97, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x55, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0xd8, 0x01,
	0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41,
	0x49, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x2a, 0xea, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1a,
	0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x46, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e,
	0x44, 0x45, 0x44, 0x10, 0x07, 0x2a, 0x7c, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x46, 0x46, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x04, 0x2a, 0x91, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49,
	0x44, 0x45, 0x4f, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x2a, 0xd5, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x44,
	0x49, 0x4f, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x07, 0x2a,
	0x9c, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4f, 0x53, 0x10, 0x03, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x53, 0x4b, 0x54, 0x4f, 0x50, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x2a, 0xd0,
	0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03,
	0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x10,
	0x05, 0x2a, 0xd0, 0x01, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x04, 0x12, 0x19,
	0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x4f,
	0x52, 0x54, 0x10, 0x06, 0x2a, 0xaf, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x03,
	0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x2a, 0xbd, 0x01, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53,
	0x55, 0x50, 0x45, 0x52, 0x10, 0x05, 0x42, 0x6b, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x42, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x24, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x3b, 0x65, 0x6e, 0x75, 0x6d, 0xa2, 0x02, 0x03, 0x45, 0x58, 0x58, 0xaa, 0x02, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0xca, 0x02, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0xe2, 0x02, 0x10, 0x45, 0x6e, 0x75, 0x6d,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_common_enum_enum_proto_rawDescOnce sync.Once
	file_common_enum_enum_proto_rawDescData []byte
)

func file_common_enum_enum_proto_rawDescGZIP() []byte {
	file_common_enum_enum_proto_rawDescOnce.Do(func() {
		file_common_enum_enum_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_common_enum_enum_proto_rawDesc), len(file_common_enum_enum_proto_rawDesc)))
	})
	return file_common_enum_enum_proto_rawDescData
}

var file_common_enum_enum_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_common_enum_enum_proto_goTypes = []any{
	(Status)(0),           // 0: enum.Status
	(SortOrder)(0),        // 1: enum.SortOrder
	(State)(0),            // 2: enum.State
	(FeatureFlag)(0),      // 3: enum.FeatureFlag
	(Gender)(0),           // 4: enum.Gender
	(AuditStatus)(0),      // 5: enum.AuditStatus
	(PaymentStatus)(0),    // 6: enum.PaymentStatus
	(OrderStatus)(0),      // 7: enum.OrderStatus
	(UserType)(0),         // 8: enum.UserType
	(FileType)(0),         // 9: enum.FileType
	(MessageType)(0),      // 10: enum.MessageType
	(DeviceType)(0),       // 11: enum.DeviceType
	(NotificationType)(0), // 12: enum.NotificationType
	(OperationType)(0),    // 13: enum.OperationType
	(ResourceType)(0),     // 14: enum.ResourceType
	(PermissionLevel)(0),  // 15: enum.PermissionLevel
}
var file_common_enum_enum_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_enum_enum_proto_init() }
func file_common_enum_enum_proto_init() {
	if File_common_enum_enum_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_common_enum_enum_proto_rawDesc), len(file_common_enum_enum_proto_rawDesc)),
			NumEnums:      16,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_enum_enum_proto_goTypes,
		DependencyIndexes: file_common_enum_enum_proto_depIdxs,
		EnumInfos:         file_common_enum_enum_proto_enumTypes,
	}.Build()
	File_common_enum_enum_proto = out.File
	file_common_enum_enum_proto_goTypes = nil
	file_common_enum_enum_proto_depIdxs = nil
}
