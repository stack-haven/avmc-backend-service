// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/service/v1/domain.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enum "backend-service/api/common/enum"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enum.Status(0)
)

// Validate checks the field values on Domain with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Domain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Domain with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DomainMultiError, or nil if none found.
func (m *Domain) ValidateAll() error {
	return m.validate(true)
}

func (m *Domain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Sort != nil {
		// no validation rules for Sort
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Remark != nil {
		// no validation rules for Remark
	}

	if m.CreatedAt != nil {
		// no validation rules for CreatedAt
	}

	if m.UpdatedAt != nil {
		// no validation rules for UpdatedAt
	}

	if len(errors) > 0 {
		return DomainMultiError(errors)
	}

	return nil
}

// DomainMultiError is an error wrapping multiple validation errors returned by
// Domain.ValidateAll() if the designated constraints aren't met.
type DomainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DomainMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DomainMultiError) AllErrors() []error { return m }

// DomainValidationError is the validation error returned by Domain.Validate if
// the designated constraints aren't met.
type DomainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DomainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DomainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DomainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DomainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DomainValidationError) ErrorName() string { return "DomainValidationError" }

// Error satisfies the builtin error interface
func (e DomainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDomain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DomainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DomainValidationError{}

// Validate checks the field values on CreateDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDomainRequestMultiError, or nil if none found.
func (m *CreateDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDomain()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDomainRequestValidationError{
					field:  "Domain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDomainRequestValidationError{
					field:  "Domain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDomain()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDomainRequestValidationError{
				field:  "Domain",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return CreateDomainRequestMultiError(errors)
	}

	return nil
}

// CreateDomainRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDomainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDomainRequestMultiError) AllErrors() []error { return m }

// CreateDomainRequestValidationError is the validation error returned by
// CreateDomainRequest.Validate if the designated constraints aren't met.
type CreateDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDomainRequestValidationError) ErrorName() string {
	return "CreateDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDomainRequestValidationError{}

// Validate checks the field values on CreateDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDomainResponseMultiError, or nil if none found.
func (m *CreateDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateDomainResponseMultiError(errors)
	}

	return nil
}

// CreateDomainResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDomainResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDomainResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDomainResponseMultiError) AllErrors() []error { return m }

// CreateDomainResponseValidationError is the validation error returned by
// CreateDomainResponse.Validate if the designated constraints aren't met.
type CreateDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDomainResponseValidationError) ErrorName() string {
	return "CreateDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDomainResponseValidationError{}

// Validate checks the field values on UpdateDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDomainRequestMultiError, or nil if none found.
func (m *UpdateDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetDomain()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDomainRequestValidationError{
					field:  "Domain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDomainRequestValidationError{
					field:  "Domain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDomain()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDomainRequestValidationError{
				field:  "Domain",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return UpdateDomainRequestMultiError(errors)
	}

	return nil
}

// UpdateDomainRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDomainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDomainRequestMultiError) AllErrors() []error { return m }

// UpdateDomainRequestValidationError is the validation error returned by
// UpdateDomainRequest.Validate if the designated constraints aren't met.
type UpdateDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDomainRequestValidationError) ErrorName() string {
	return "UpdateDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDomainRequestValidationError{}

// Validate checks the field values on UpdateDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDomainResponseMultiError, or nil if none found.
func (m *UpdateDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateDomainResponseMultiError(errors)
	}

	return nil
}

// UpdateDomainResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDomainResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDomainResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDomainResponseMultiError) AllErrors() []error { return m }

// UpdateDomainResponseValidationError is the validation error returned by
// UpdateDomainResponse.Validate if the designated constraints aren't met.
type UpdateDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDomainResponseValidationError) ErrorName() string {
	return "UpdateDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDomainResponseValidationError{}

// Validate checks the field values on DeleteDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDomainRequestMultiError, or nil if none found.
func (m *DeleteDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return DeleteDomainRequestMultiError(errors)
	}

	return nil
}

// DeleteDomainRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDomainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDomainRequestMultiError) AllErrors() []error { return m }

// DeleteDomainRequestValidationError is the validation error returned by
// DeleteDomainRequest.Validate if the designated constraints aren't met.
type DeleteDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDomainRequestValidationError) ErrorName() string {
	return "DeleteDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDomainRequestValidationError{}

// Validate checks the field values on DeleteDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDomainResponseMultiError, or nil if none found.
func (m *DeleteDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteDomainResponseMultiError(errors)
	}

	return nil
}

// DeleteDomainResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDomainResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDomainResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDomainResponseMultiError) AllErrors() []error { return m }

// DeleteDomainResponseValidationError is the validation error returned by
// DeleteDomainResponse.Validate if the designated constraints aren't met.
type DeleteDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDomainResponseValidationError) ErrorName() string {
	return "DeleteDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDomainResponseValidationError{}

// Validate checks the field values on GetDomainRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDomainRequestMultiError, or nil if none found.
func (m *GetDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetDomainRequestMultiError(errors)
	}

	return nil
}

// GetDomainRequestMultiError is an error wrapping multiple validation errors
// returned by GetDomainRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDomainRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDomainRequestMultiError) AllErrors() []error { return m }

// GetDomainRequestValidationError is the validation error returned by
// GetDomainRequest.Validate if the designated constraints aren't met.
type GetDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDomainRequestValidationError) ErrorName() string { return "GetDomainRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDomainRequestValidationError{}

// Validate checks the field values on GetDomainResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDomainResponseMultiError, or nil if none found.
func (m *GetDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDomain()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDomainResponseValidationError{
					field:  "Domain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDomainResponseValidationError{
					field:  "Domain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDomain()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDomainResponseValidationError{
				field:  "Domain",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDomainResponseMultiError(errors)
	}

	return nil
}

// GetDomainResponseMultiError is an error wrapping multiple validation errors
// returned by GetDomainResponse.ValidateAll() if the designated constraints
// aren't met.
type GetDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDomainResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDomainResponseMultiError) AllErrors() []error { return m }

// GetDomainResponseValidationError is the validation error returned by
// GetDomainResponse.Validate if the designated constraints aren't met.
type GetDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDomainResponseValidationError) ErrorName() string {
	return "GetDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDomainResponseValidationError{}

// Validate checks the field values on ListDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDomainResponseMultiError, or nil if none found.
func (m *ListDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDomainResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDomainResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDomainResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListDomainResponseMultiError(errors)
	}

	return nil
}

// ListDomainResponseMultiError is an error wrapping multiple validation errors
// returned by ListDomainResponse.ValidateAll() if the designated constraints
// aren't met.
type ListDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDomainResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDomainResponseMultiError) AllErrors() []error { return m }

// ListDomainResponseValidationError is the validation error returned by
// ListDomainResponse.Validate if the designated constraints aren't met.
type ListDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDomainResponseValidationError) ErrorName() string {
	return "ListDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDomainResponseValidationError{}
