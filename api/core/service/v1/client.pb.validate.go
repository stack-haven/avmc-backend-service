// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/service/v1/client.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	enum "backend-service/api/common/enum"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = enum.Status(0)
)

// Validate checks the field values on Client with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Client) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Client with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ClientMultiError, or nil if none found.
func (m *Client) ValidateAll() error {
	return m.validate(true)
}

func (m *Client) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Name != nil {

		if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 20 {
			err := ClientValidationError{
				field:  "Name",
				reason: "value length must be between 1 and 20 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Sort != nil {
		// no validation rules for Sort
	}

	if m.Status != nil {

		if _, ok := enum.Status_name[int32(m.GetStatus())]; !ok {
			err := ClientValidationError{
				field:  "Status",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Remark != nil {
		// no validation rules for Remark
	}

	if m.CreatedAt != nil {
		// no validation rules for CreatedAt
	}

	if m.UpdatedAt != nil {
		// no validation rules for UpdatedAt
	}

	if len(errors) > 0 {
		return ClientMultiError(errors)
	}

	return nil
}

// ClientMultiError is an error wrapping multiple validation errors returned by
// Client.ValidateAll() if the designated constraints aren't met.
type ClientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientMultiError) AllErrors() []error { return m }

// ClientValidationError is the validation error returned by Client.Validate if
// the designated constraints aren't met.
type ClientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientValidationError) ErrorName() string { return "ClientValidationError" }

// Error satisfies the builtin error interface
func (e ClientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientValidationError{}

// Validate checks the field values on CreateClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateClientRequestMultiError, or nil if none found.
func (m *CreateClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateClientRequestValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateClientRequestValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateClientRequestValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return CreateClientRequestMultiError(errors)
	}

	return nil
}

// CreateClientRequestMultiError is an error wrapping multiple validation
// errors returned by CreateClientRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateClientRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateClientRequestMultiError) AllErrors() []error { return m }

// CreateClientRequestValidationError is the validation error returned by
// CreateClientRequest.Validate if the designated constraints aren't met.
type CreateClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClientRequestValidationError) ErrorName() string {
	return "CreateClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClientRequestValidationError{}

// Validate checks the field values on CreateClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateClientResponseMultiError, or nil if none found.
func (m *CreateClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateClientResponseMultiError(errors)
	}

	return nil
}

// CreateClientResponseMultiError is an error wrapping multiple validation
// errors returned by CreateClientResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateClientResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateClientResponseMultiError) AllErrors() []error { return m }

// CreateClientResponseValidationError is the validation error returned by
// CreateClientResponse.Validate if the designated constraints aren't met.
type CreateClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClientResponseValidationError) ErrorName() string {
	return "CreateClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClientResponseValidationError{}

// Validate checks the field values on UpdateClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateClientRequestMultiError, or nil if none found.
func (m *UpdateClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateClientRequestValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateClientRequestValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClientRequestValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return UpdateClientRequestMultiError(errors)
	}

	return nil
}

// UpdateClientRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateClientRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateClientRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateClientRequestMultiError) AllErrors() []error { return m }

// UpdateClientRequestValidationError is the validation error returned by
// UpdateClientRequest.Validate if the designated constraints aren't met.
type UpdateClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClientRequestValidationError) ErrorName() string {
	return "UpdateClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClientRequestValidationError{}

// Validate checks the field values on UpdateClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateClientResponseMultiError, or nil if none found.
func (m *UpdateClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateClientResponseMultiError(errors)
	}

	return nil
}

// UpdateClientResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateClientResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateClientResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateClientResponseMultiError) AllErrors() []error { return m }

// UpdateClientResponseValidationError is the validation error returned by
// UpdateClientResponse.Validate if the designated constraints aren't met.
type UpdateClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClientResponseValidationError) ErrorName() string {
	return "UpdateClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClientResponseValidationError{}

// Validate checks the field values on DeleteClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteClientRequestMultiError, or nil if none found.
func (m *DeleteClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OperatorId

	if len(errors) > 0 {
		return DeleteClientRequestMultiError(errors)
	}

	return nil
}

// DeleteClientRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteClientRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteClientRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteClientRequestMultiError) AllErrors() []error { return m }

// DeleteClientRequestValidationError is the validation error returned by
// DeleteClientRequest.Validate if the designated constraints aren't met.
type DeleteClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClientRequestValidationError) ErrorName() string {
	return "DeleteClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClientRequestValidationError{}

// Validate checks the field values on DeleteClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteClientResponseMultiError, or nil if none found.
func (m *DeleteClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteClientResponseMultiError(errors)
	}

	return nil
}

// DeleteClientResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteClientResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteClientResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteClientResponseMultiError) AllErrors() []error { return m }

// DeleteClientResponseValidationError is the validation error returned by
// DeleteClientResponse.Validate if the designated constraints aren't met.
type DeleteClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClientResponseValidationError) ErrorName() string {
	return "DeleteClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClientResponseValidationError{}

// Validate checks the field values on GetClientRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClientRequestMultiError, or nil if none found.
func (m *GetClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetClientRequestMultiError(errors)
	}

	return nil
}

// GetClientRequestMultiError is an error wrapping multiple validation errors
// returned by GetClientRequest.ValidateAll() if the designated constraints
// aren't met.
type GetClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientRequestMultiError) AllErrors() []error { return m }

// GetClientRequestValidationError is the validation error returned by
// GetClientRequest.Validate if the designated constraints aren't met.
type GetClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientRequestValidationError) ErrorName() string { return "GetClientRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientRequestValidationError{}

// Validate checks the field values on GetClientResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClientResponseMultiError, or nil if none found.
func (m *GetClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClientResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClientResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClientResponseValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetClientResponseMultiError(errors)
	}

	return nil
}

// GetClientResponseMultiError is an error wrapping multiple validation errors
// returned by GetClientResponse.ValidateAll() if the designated constraints
// aren't met.
type GetClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientResponseMultiError) AllErrors() []error { return m }

// GetClientResponseValidationError is the validation error returned by
// GetClientResponse.Validate if the designated constraints aren't met.
type GetClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientResponseValidationError) ErrorName() string {
	return "GetClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientResponseValidationError{}

// Validate checks the field values on ListClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListClientResponseMultiError, or nil if none found.
func (m *ListClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListClientResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListClientResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClientResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListClientResponseMultiError(errors)
	}

	return nil
}

// ListClientResponseMultiError is an error wrapping multiple validation errors
// returned by ListClientResponse.ValidateAll() if the designated constraints
// aren't met.
type ListClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClientResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClientResponseMultiError) AllErrors() []error { return m }

// ListClientResponseValidationError is the validation error returned by
// ListClientResponse.Validate if the designated constraints aren't met.
type ListClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClientResponseValidationError) ErrorName() string {
	return "ListClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClientResponseValidationError{}
