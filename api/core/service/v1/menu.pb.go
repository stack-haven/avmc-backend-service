// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: core/service/v1/menu.proto

package v1

import (
	enum "backend-service/api/common/enum"
	pagination "backend-service/api/common/pagination"
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MenuType int32

const (
	MenuType_MENU_TYPE_UNSPECIFIED MenuType = 0
	// 目录
	MenuType_MENU_TYPE_DIR MenuType = 1
	// 菜单
	MenuType_MENU_TYPE_MENU MenuType = 2
	// 按钮·
	MenuType_MENU_TYPE_BUTTON MenuType = 3
)

// Enum value maps for MenuType.
var (
	MenuType_name = map[int32]string{
		0: "MENU_TYPE_UNSPECIFIED",
		1: "MENU_TYPE_DIR",
		2: "MENU_TYPE_MENU",
		3: "MENU_TYPE_BUTTON",
	}
	MenuType_value = map[string]int32{
		"MENU_TYPE_UNSPECIFIED": 0,
		"MENU_TYPE_DIR":         1,
		"MENU_TYPE_MENU":        2,
		"MENU_TYPE_BUTTON":      3,
	}
)

func (x MenuType) Enum() *MenuType {
	p := new(MenuType)
	*p = x
	return p
}

func (x MenuType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MenuType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_service_v1_menu_proto_enumTypes[0].Descriptor()
}

func (MenuType) Type() protoreflect.EnumType {
	return &file_core_service_v1_menu_proto_enumTypes[0]
}

func (x MenuType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MenuType.Descriptor instead.
func (MenuType) EnumDescriptor() ([]byte, []int) {
	return file_core_service_v1_menu_proto_rawDescGZIP(), []int{0}
}

type Menu struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 菜单ID
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 菜单名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 路由路径
	Path *string `protobuf:"bytes,3,opt,name=path,proto3,oneof" json:"path,omitempty"`
	// 后端权限标识
	AuthCode *string `protobuf:"bytes,4,opt,name=auth_code,json=authCode,proto3,oneof" json:"auth_code,omitempty"`
	// 菜单元数据
	Meta *MenuMeta `protobuf:"bytes,5,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
	// 子级
	Children []*Menu `protobuf:"bytes,6,rep,name=children,proto3" json:"children,omitempty"`
	// 组件
	Component *string `protobuf:"bytes,7,opt,name=component,proto3,oneof" json:"component,omitempty"`
	// 父级ID
	Pid uint32 `protobuf:"varint,8,opt,name=pid,proto3" json:"pid,omitempty"`
	// 重定向
	Redirect *string `protobuf:"bytes,9,opt,name=redirect,proto3,oneof" json:"redirect,omitempty"`
	// 菜单类型
	Type int32 `protobuf:"varint,10,opt,name=type,proto3" json:"type,omitempty"`
	// 菜单状态 1 启用 2 禁用
	Status *enum.Status `protobuf:"varint,11,opt,name=status,proto3,enum=enum.Status,oneof" json:"status,omitempty"`
	// 创建时间
	CreatedAt *string `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt     *string `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Menu) Reset() {
	*x = Menu{}
	mi := &file_core_service_v1_menu_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Menu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Menu) ProtoMessage() {}

func (x *Menu) ProtoReflect() protoreflect.Message {
	mi := &file_core_service_v1_menu_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Menu.ProtoReflect.Descriptor instead.
func (*Menu) Descriptor() ([]byte, []int) {
	return file_core_service_v1_menu_proto_rawDescGZIP(), []int{0}
}

func (x *Menu) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Menu) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Menu) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *Menu) GetAuthCode() string {
	if x != nil && x.AuthCode != nil {
		return *x.AuthCode
	}
	return ""
}

func (x *Menu) GetMeta() *MenuMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Menu) GetChildren() []*Menu {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Menu) GetComponent() string {
	if x != nil && x.Component != nil {
		return *x.Component
	}
	return ""
}

func (x *Menu) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Menu) GetRedirect() string {
	if x != nil && x.Redirect != nil {
		return *x.Redirect
	}
	return ""
}

func (x *Menu) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Menu) GetStatus() enum.Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return enum.Status(0)
}

func (x *Menu) GetCreatedAt() string {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return ""
}

func (x *Menu) GetUpdatedAt() string {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return ""
}

// 菜单元数据
type MenuMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 激活时显示的图标
	ActiveIcon *string `protobuf:"bytes,1,opt,name=active_icon,json=activeIcon,proto3,oneof" json:"active_icon,omitempty"`
	// 作为路由时，需要激活的菜单的Path
	ActivePath *string `protobuf:"bytes,2,opt,name=active_path,json=activePath,proto3,oneof" json:"active_path,omitempty"`
	// 固定在标签栏
	AffixTab *bool `protobuf:"varint,3,opt,name=affix_tab,json=affixTab,proto3,oneof" json:"affix_tab,omitempty"`
	// 在标签栏固定的顺序
	AffixTabOrder *int32 `protobuf:"varint,4,opt,name=affix_tab_order,json=affixTabOrder,proto3,oneof" json:"affix_tab_order,omitempty"`
	// 徽标内容(当徽标类型为normal时有效)
	Badge *string `protobuf:"bytes,5,opt,name=badge,proto3,oneof" json:"badge,omitempty"`
	// 徽标类型
	BadgeType *int32 `protobuf:"varint,6,opt,name=badge_type,json=badgeType,proto3,oneof" json:"badge_type,omitempty"`
	// 徽标颜色
	BadgeVariants *int32 `protobuf:"varint,7,opt,name=badge_variants,json=badgeVariants,proto3,oneof" json:"badge_variants,omitempty"`
	// 在菜单中隐藏下级
	HideChildrenInMenu *bool `protobuf:"varint,8,opt,name=hide_children_in_menu,json=hideChildrenInMenu,proto3,oneof" json:"hide_children_in_menu,omitempty"`
	// 在面包屑中隐藏
	HideInBreadcrumb *bool `protobuf:"varint,9,opt,name=hide_in_breadcrumb,json=hideInBreadcrumb,proto3,oneof" json:"hide_in_breadcrumb,omitempty"`
	// 在菜单中隐藏
	HideInMenu *bool `protobuf:"varint,10,opt,name=hide_in_menu,json=hideInMenu,proto3,oneof" json:"hide_in_menu,omitempty"`
	// 在标签栏中隐藏
	HideInTab *bool `protobuf:"varint,11,opt,name=hide_in_tab,json=hideInTab,proto3,oneof" json:"hide_in_tab,omitempty"`
	// 菜单图标
	Icon *string `protobuf:"bytes,12,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	// 内嵌Iframe的URL
	IframeSrc *string `protobuf:"bytes,13,opt,name=iframe_src,json=iframeSrc,proto3,oneof" json:"iframe_src,omitempty"`
	// 是否缓存页面
	KeepAlive *bool `protobuf:"varint,14,opt,name=keep_alive,json=keepAlive,proto3,oneof" json:"keep_alive,omitempty"`
	// 外链页面的URL
	Link *string `protobuf:"bytes,15,opt,name=link,proto3,oneof" json:"link,omitempty"`
	// 同一个路由最大打开的标签数
	MaxNumOfOpenTab *int32 `protobuf:"varint,16,opt,name=max_num_of_open_tab,json=maxNumOfOpenTab,proto3,oneof" json:"max_num_of_open_tab,omitempty"`
	// 无需基础布局
	NoBasicLayout *bool `protobuf:"varint,17,opt,name=no_basic_layout,json=noBasicLayout,proto3,oneof" json:"no_basic_layout,omitempty"`
	// 是否在新窗口打开
	OpenInNewWindow *bool `protobuf:"varint,18,opt,name=open_in_new_window,json=openInNewWindow,proto3,oneof" json:"open_in_new_window,omitempty"`
	// 菜单排序
	Order *int32 `protobuf:"varint,19,opt,name=order,proto3,oneof" json:"order,omitempty"`
	// 额外的路由参数
	Query *string `protobuf:"bytes,20,opt,name=query,proto3,oneof" json:"query,omitempty"`
	// 菜单标题
	Title         *string `protobuf:"bytes,21,opt,name=title,proto3,oneof" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MenuMeta) Reset() {
	*x = MenuMeta{}
	mi := &file_core_service_v1_menu_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuMeta) ProtoMessage() {}

func (x *MenuMeta) ProtoReflect() protoreflect.Message {
	mi := &file_core_service_v1_menu_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuMeta.ProtoReflect.Descriptor instead.
func (*MenuMeta) Descriptor() ([]byte, []int) {
	return file_core_service_v1_menu_proto_rawDescGZIP(), []int{1}
}

func (x *MenuMeta) GetActiveIcon() string {
	if x != nil && x.ActiveIcon != nil {
		return *x.ActiveIcon
	}
	return ""
}

func (x *MenuMeta) GetActivePath() string {
	if x != nil && x.ActivePath != nil {
		return *x.ActivePath
	}
	return ""
}

func (x *MenuMeta) GetAffixTab() bool {
	if x != nil && x.AffixTab != nil {
		return *x.AffixTab
	}
	return false
}

func (x *MenuMeta) GetAffixTabOrder() int32 {
	if x != nil && x.AffixTabOrder != nil {
		return *x.AffixTabOrder
	}
	return 0
}

func (x *MenuMeta) GetBadge() string {
	if x != nil && x.Badge != nil {
		return *x.Badge
	}
	return ""
}

func (x *MenuMeta) GetBadgeType() int32 {
	if x != nil && x.BadgeType != nil {
		return *x.BadgeType
	}
	return 0
}

func (x *MenuMeta) GetBadgeVariants() int32 {
	if x != nil && x.BadgeVariants != nil {
		return *x.BadgeVariants
	}
	return 0
}

func (x *MenuMeta) GetHideChildrenInMenu() bool {
	if x != nil && x.HideChildrenInMenu != nil {
		return *x.HideChildrenInMenu
	}
	return false
}

func (x *MenuMeta) GetHideInBreadcrumb() bool {
	if x != nil && x.HideInBreadcrumb != nil {
		return *x.HideInBreadcrumb
	}
	return false
}

func (x *MenuMeta) GetHideInMenu() bool {
	if x != nil && x.HideInMenu != nil {
		return *x.HideInMenu
	}
	return false
}

func (x *MenuMeta) GetHideInTab() bool {
	if x != nil && x.HideInTab != nil {
		return *x.HideInTab
	}
	return false
}

func (x *MenuMeta) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *MenuMeta) GetIframeSrc() string {
	if x != nil && x.IframeSrc != nil {
		return *x.IframeSrc
	}
	return ""
}

func (x *MenuMeta) GetKeepAlive() bool {
	if x != nil && x.KeepAlive != nil {
		return *x.KeepAlive
	}
	return false
}

func (x *MenuMeta) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *MenuMeta) GetMaxNumOfOpenTab() int32 {
	if x != nil && x.MaxNumOfOpenTab != nil {
		return *x.MaxNumOfOpenTab
	}
	return 0
}

func (x *MenuMeta) GetNoBasicLayout() bool {
	if x != nil && x.NoBasicLayout != nil {
		return *x.NoBasicLayout
	}
	return false
}

func (x *MenuMeta) GetOpenInNewWindow() bool {
	if x != nil && x.OpenInNewWindow != nil {
		return *x.OpenInNewWindow
	}
	return false
}

func (x *MenuMeta) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *MenuMeta) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *MenuMeta) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

// 创建菜单请求
type CreateMenuRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Menu          *Menu                  `protobuf:"bytes,1,opt,name=menu,proto3" json:"menu,omitempty"`
	OperatorId    uint32                 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMenuRequest) Reset() {
	*x = CreateMenuRequest{}
	mi := &file_core_service_v1_menu_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMenuRequest) ProtoMessage() {}

func (x *CreateMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_service_v1_menu_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMenuRequest.ProtoReflect.Descriptor instead.
func (*CreateMenuRequest) Descriptor() ([]byte, []int) {
	return file_core_service_v1_menu_proto_rawDescGZIP(), []int{2}
}

func (x *CreateMenuRequest) GetMenu() *Menu {
	if x != nil {
		return x.Menu
	}
	return nil
}

func (x *CreateMenuRequest) GetOperatorId() uint32 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

// 创建菜单响应
type CreateMenuResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMenuResponse) Reset() {
	*x = CreateMenuResponse{}
	mi := &file_core_service_v1_menu_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMenuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMenuResponse) ProtoMessage() {}

func (x *CreateMenuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_service_v1_menu_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMenuResponse.ProtoReflect.Descriptor instead.
func (*CreateMenuResponse) Descriptor() ([]byte, []int) {
	return file_core_service_v1_menu_proto_rawDescGZIP(), []int{3}
}

// 更新菜单请求
type UpdateMenuRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Menu          *Menu                  `protobuf:"bytes,2,opt,name=menu,proto3" json:"menu,omitempty"`
	OperatorId    uint32                 `protobuf:"varint,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMenuRequest) Reset() {
	*x = UpdateMenuRequest{}
	mi := &file_core_service_v1_menu_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMenuRequest) ProtoMessage() {}

func (x *UpdateMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_service_v1_menu_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMenuRequest.ProtoReflect.Descriptor instead.
func (*UpdateMenuRequest) Descriptor() ([]byte, []int) {
	return file_core_service_v1_menu_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateMenuRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateMenuRequest) GetMenu() *Menu {
	if x != nil {
		return x.Menu
	}
	return nil
}

func (x *UpdateMenuRequest) GetOperatorId() uint32 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

// 更新菜单响应
type UpdateMenuResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMenuResponse) Reset() {
	*x = UpdateMenuResponse{}
	mi := &file_core_service_v1_menu_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMenuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMenuResponse) ProtoMessage() {}

func (x *UpdateMenuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_service_v1_menu_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMenuResponse.ProtoReflect.Descriptor instead.
func (*UpdateMenuResponse) Descriptor() ([]byte, []int) {
	return file_core_service_v1_menu_proto_rawDescGZIP(), []int{5}
}

// 删除菜单请求
type DeleteMenuRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OperatorId    uint32                 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMenuRequest) Reset() {
	*x = DeleteMenuRequest{}
	mi := &file_core_service_v1_menu_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMenuRequest) ProtoMessage() {}

func (x *DeleteMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_service_v1_menu_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMenuRequest.ProtoReflect.Descriptor instead.
func (*DeleteMenuRequest) Descriptor() ([]byte, []int) {
	return file_core_service_v1_menu_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteMenuRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteMenuRequest) GetOperatorId() uint32 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

// 删除菜单响应
type DeleteMenuResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMenuResponse) Reset() {
	*x = DeleteMenuResponse{}
	mi := &file_core_service_v1_menu_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMenuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMenuResponse) ProtoMessage() {}

func (x *DeleteMenuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_service_v1_menu_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMenuResponse.ProtoReflect.Descriptor instead.
func (*DeleteMenuResponse) Descriptor() ([]byte, []int) {
	return file_core_service_v1_menu_proto_rawDescGZIP(), []int{7}
}

// 获取菜单请求
type GetMenuRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMenuRequest) Reset() {
	*x = GetMenuRequest{}
	mi := &file_core_service_v1_menu_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMenuRequest) ProtoMessage() {}

func (x *GetMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_service_v1_menu_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMenuRequest.ProtoReflect.Descriptor instead.
func (*GetMenuRequest) Descriptor() ([]byte, []int) {
	return file_core_service_v1_menu_proto_rawDescGZIP(), []int{8}
}

func (x *GetMenuRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 获取菜单响应
type GetMenuResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Menu          *Menu                  `protobuf:"bytes,1,opt,name=menu,proto3" json:"menu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMenuResponse) Reset() {
	*x = GetMenuResponse{}
	mi := &file_core_service_v1_menu_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMenuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMenuResponse) ProtoMessage() {}

func (x *GetMenuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_service_v1_menu_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMenuResponse.ProtoReflect.Descriptor instead.
func (*GetMenuResponse) Descriptor() ([]byte, []int) {
	return file_core_service_v1_menu_proto_rawDescGZIP(), []int{9}
}

func (x *GetMenuResponse) GetMenu() *Menu {
	if x != nil {
		return x.Menu
	}
	return nil
}

// 分页查询菜单请求
type ListMenuRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Pagination    *pagination.PagingRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Name          *string                   `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Type          *int32                    `protobuf:"varint,3,opt,name=type,proto3,oneof" json:"type,omitempty"`
	State         *int32                    `protobuf:"varint,4,opt,name=state,proto3,oneof" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMenuRequest) Reset() {
	*x = ListMenuRequest{}
	mi := &file_core_service_v1_menu_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMenuRequest) ProtoMessage() {}

func (x *ListMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_service_v1_menu_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMenuRequest.ProtoReflect.Descriptor instead.
func (*ListMenuRequest) Descriptor() ([]byte, []int) {
	return file_core_service_v1_menu_proto_rawDescGZIP(), []int{10}
}

func (x *ListMenuRequest) GetPagination() *pagination.PagingRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListMenuRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ListMenuRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *ListMenuRequest) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

// 分页查询菜单响应
type ListMenuResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Menu                `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMenuResponse) Reset() {
	*x = ListMenuResponse{}
	mi := &file_core_service_v1_menu_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMenuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMenuResponse) ProtoMessage() {}

func (x *ListMenuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_service_v1_menu_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMenuResponse.ProtoReflect.Descriptor instead.
func (*ListMenuResponse) Descriptor() ([]byte, []int) {
	return file_core_service_v1_menu_proto_rawDescGZIP(), []int{11}
}

func (x *ListMenuResponse) GetItems() []*Menu {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListMenuResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 获取菜单树请求
type ListMenuTreeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pid           uint32                 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMenuTreeRequest) Reset() {
	*x = ListMenuTreeRequest{}
	mi := &file_core_service_v1_menu_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMenuTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMenuTreeRequest) ProtoMessage() {}

func (x *ListMenuTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_service_v1_menu_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMenuTreeRequest.ProtoReflect.Descriptor instead.
func (*ListMenuTreeRequest) Descriptor() ([]byte, []int) {
	return file_core_service_v1_menu_proto_rawDescGZIP(), []int{12}
}

func (x *ListMenuTreeRequest) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

// 获取菜单树响应
type ListMenuTreeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Menu                `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMenuTreeResponse) Reset() {
	*x = ListMenuTreeResponse{}
	mi := &file_core_service_v1_menu_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMenuTreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMenuTreeResponse) ProtoMessage() {}

func (x *ListMenuTreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_service_v1_menu_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMenuTreeResponse.ProtoReflect.Descriptor instead.
func (*ListMenuTreeResponse) Descriptor() ([]byte, []int) {
	return file_core_service_v1_menu_proto_rawDescGZIP(), []int{13}
}

func (x *ListMenuTreeResponse) GetItems() []*Menu {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_core_service_v1_menu_proto protoreflect.FileDescriptor

var file_core_service_v1_menu_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x6e, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62,
	0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x06, 0x0a,
	0x04, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x15, 0xba, 0x47, 0x0b, 0x92, 0x02, 0x08, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0x49,
	0x44, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x47, 0x0f, 0x92,
	0x02, 0x0c, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x18, 0x14, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xba, 0x47, 0x0f, 0x92, 0x02,
	0x0c, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0xba, 0x48, 0x05,
	0x72, 0x03, 0x18, 0xc8, 0x01, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe6, 0x9d, 0x83, 0xe9, 0x99,
	0x90, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x14, 0x48, 0x01,
	0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x6e, 0x75, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x15, 0xba, 0x47, 0x12, 0x92, 0x02, 0x0f, 0xe8, 0x8f,
	0x9c, 0xe5, 0x8d, 0x95, 0xe5, 0x85, 0x83, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x48, 0x02, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6e,
	0x75, 0x42, 0x0c, 0xba, 0x47, 0x09, 0x92, 0x02, 0x06, 0xe5, 0xad, 0x90, 0xe7, 0xba, 0xa7, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xba, 0x47,
	0x09, 0x92, 0x02, 0x06, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18,
	0xc8, 0x01, 0x48, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x15, 0xba, 0x47, 0x0b, 0x92, 0x02, 0x08, 0xe7, 0x88, 0xb6, 0xe7, 0xba, 0xa7, 0x49, 0x44, 0xba,
	0x48, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba,
	0x47, 0x0c, 0x92, 0x02, 0x09, 0xe9, 0x87, 0x8d, 0xe5, 0xae, 0x9a, 0xe5, 0x90, 0x91, 0xba, 0x48,
	0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x48, 0x04, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x1e, 0xba, 0x47, 0x1b, 0x8a, 0x02, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xf0, 0x3f, 0x92, 0x02, 0x0c, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x63, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x38, 0xba, 0x47, 0x2d, 0x8a, 0x02, 0x09, 0x09,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x92, 0x02, 0x1e, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d,
	0x95, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x20, 0x31, 0x20, 0xe5, 0x90, 0xaf, 0xe7, 0x94, 0xa8,
	0x20, 0x32, 0x20, 0xe7, 0xa6, 0x81, 0xe7, 0x94, 0xa8, 0xba, 0x48, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x48, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba,
	0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x48, 0x06, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92,
	0x02, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x48, 0x07,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x22, 0xb3, 0x0e, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x4b, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xba, 0x47, 0x1b, 0x92, 0x02, 0x18, 0xe6, 0xbf, 0x80, 0xe6,
	0xb4, 0xbb, 0xe6, 0x97, 0xb6, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe7, 0x9a, 0x84, 0xe5, 0x9b,
	0xbe, 0xe6, 0xa0, 0x87, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x32, 0x48, 0x00, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3c, 0xba, 0x47, 0x31, 0x92, 0x02, 0x2e, 0xe4, 0xbd, 0x9c, 0xe4, 0xb8, 0xba, 0xe8,
	0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe6, 0x97, 0xb6, 0xef, 0xbc, 0x8c, 0xe9, 0x9c, 0x80, 0xe8, 0xa6,
	0x81, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0xe7, 0x9a, 0x84, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95,
	0xe7, 0x9a, 0x84, 0x50, 0x61, 0x74, 0x68, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x48,
	0x01, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x09, 0x61, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x61, 0x62, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x18, 0xba, 0x47, 0x15, 0x92, 0x02, 0x12, 0xe5, 0x9b, 0xba, 0xe5, 0xae,
	0x9a, 0xe5, 0x9c, 0xa8, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe6, 0xa0, 0x8f, 0x48, 0x02, 0x52,
	0x08, 0x61, 0x66, 0x66, 0x69, 0x78, 0x54, 0x61, 0x62, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0f,
	0x61, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x21, 0xba, 0x47, 0x1e, 0x92, 0x02, 0x1b, 0xe5, 0x9c, 0xa8,
	0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe6, 0xa0, 0x8f, 0xe5, 0x9b, 0xba, 0xe5, 0xae, 0x9a, 0xe7,
	0x9a, 0x84, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0x48, 0x03, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69,
	0x78, 0x54, 0x61, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x05,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xba, 0x47, 0x32,
	0x92, 0x02, 0x2f, 0xe5, 0xbe, 0xbd, 0xe6, 0xa0, 0x87, 0xe5, 0x86, 0x85, 0xe5, 0xae, 0xb9, 0x28,
	0xe5, 0xbd, 0x93, 0xe5, 0xbe, 0xbd, 0xe6, 0xa0, 0x87, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4,
	0xb8, 0xba, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0xe6, 0x97, 0xb6, 0xe6, 0x9c, 0x89, 0xe6, 0x95,
	0x88, 0x29, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x14, 0x48, 0x04, 0x52, 0x05, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0a, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02,
	0x0c, 0xe5, 0xbe, 0xbd, 0xe6, 0xa0, 0x87, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x48, 0x05, 0x52,
	0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a,
	0x0e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe5, 0xbe, 0xbd,
	0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x9c, 0xe8, 0x89, 0xb2, 0x48, 0x06, 0x52, 0x0d, 0x62, 0x61, 0x64,
	0x67, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a,
	0x15, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 0x69,
	0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1e, 0xba, 0x47,
	0x1b, 0x92, 0x02, 0x18, 0xe5, 0x9c, 0xa8, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xad,
	0xe9, 0x9a, 0x90, 0xe8, 0x97, 0x8f, 0xe4, 0xb8, 0x8b, 0xe7, 0xba, 0xa7, 0x48, 0x07, 0x52, 0x12,
	0x68, 0x69, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x49, 0x6e, 0x4d, 0x65,
	0x6e, 0x75, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x12, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x62, 0x72, 0x65, 0x61, 0x64, 0x63, 0x72, 0x75, 0x6d, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x1b, 0xba, 0x47, 0x18, 0x92, 0x02, 0x15, 0xe5, 0x9c, 0xa8, 0xe9, 0x9d, 0xa2, 0xe5,
	0x8c, 0x85, 0xe5, 0xb1, 0x91, 0xe4, 0xb8, 0xad, 0xe9, 0x9a, 0x90, 0xe8, 0x97, 0x8f, 0x48, 0x08,
	0x52, 0x10, 0x68, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x42, 0x72, 0x65, 0x61, 0x64, 0x63, 0x72, 0x75,
	0x6d, 0x62, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0c, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0xba, 0x47, 0x15,
	0x92, 0x02, 0x12, 0xe5, 0x9c, 0xa8, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xad, 0xe9,
	0x9a, 0x90, 0xe8, 0x97, 0x8f, 0x48, 0x09, 0x52, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x4d,
	0x65, 0x6e, 0x75, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x74, 0x61, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1b, 0xba, 0x47, 0x18,
	0x92, 0x02, 0x15, 0xe5, 0x9c, 0xa8, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe6, 0xa0, 0x8f, 0xe4,
	0xb8, 0xad, 0xe9, 0x9a, 0x90, 0xe8, 0x97, 0x8f, 0x48, 0x0a, 0x52, 0x09, 0x68, 0x69, 0x64, 0x65,
	0x49, 0x6e, 0x54, 0x61, 0x62, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe8, 0x8f,
	0x9c, 0xe5, 0x8d, 0x95, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18,
	0x32, 0x48, 0x0b, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0a,
	0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x20, 0xba, 0x47, 0x15, 0x92, 0x02, 0x12, 0xe5, 0x86, 0x85, 0xe5, 0xb5, 0x8c, 0x49, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0xe7, 0x9a, 0x84, 0x55, 0x52, 0x4c, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18,
	0xc8, 0x01, 0x48, 0x0c, 0x52, 0x09, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x72, 0x63, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0xba, 0x47, 0x15, 0x92, 0x02, 0x12, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe7, 0xbc, 0x93, 0xe5, 0xad, 0x98, 0xe9, 0xa1, 0xb5, 0xe9, 0x9d, 0xa2,
	0x48, 0x0d, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0xba, 0x47, 0x15, 0x92, 0x02, 0x12, 0xe5, 0xa4, 0x96, 0xe9, 0x93, 0xbe, 0xe9, 0xa1, 0xb5, 0xe9,
	0x9d, 0xa2, 0xe7, 0x9a, 0x84, 0x55, 0x52, 0x4c, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01,
	0x48, 0x0e, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x13, 0x6d,
	0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74,
	0x61, 0x62, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2d, 0xba, 0x47, 0x2a, 0x92, 0x02, 0x27,
	0xe5, 0x90, 0x8c, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe6,
	0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe6, 0x89, 0x93, 0xe5, 0xbc, 0x80, 0xe7, 0x9a, 0x84, 0xe6, 0xa0,
	0x87, 0xe7, 0xad, 0xbe, 0xe6, 0x95, 0xb0, 0x48, 0x0f, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4e, 0x75,
	0x6d, 0x4f, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x61, 0x62, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a,
	0x0f, 0x6e, 0x6f, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0xba, 0x47, 0x15, 0x92, 0x02, 0x12, 0xe6, 0x97,
	0xa0, 0xe9, 0x9c, 0x80, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe5, 0xb8, 0x83, 0xe5, 0xb1, 0x80,
	0x48, 0x10, 0x52, 0x0d, 0x6e, 0x6f, 0x42, 0x61, 0x73, 0x69, 0x63, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x1e, 0xba, 0x47, 0x1b, 0x92, 0x02, 0x18, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0x9c,
	0xa8, 0xe6, 0x96, 0xb0, 0xe7, 0xaa, 0x97, 0xe5, 0x8f, 0xa3, 0xe6, 0x89, 0x93, 0xe5, 0xbc, 0x80,
	0x48, 0x11, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x4e, 0x65, 0x77, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1e, 0xba, 0x47, 0x1b, 0x8a, 0x02, 0x09, 0x09, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x92, 0x02, 0x0c, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe6,
	0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x48, 0x12, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x23, 0xba, 0x47, 0x18, 0x92, 0x02, 0x15, 0xe9, 0xa2, 0x9d, 0xe5, 0xa4, 0x96, 0xe7, 0x9a,
	0x84, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x8f, 0x82, 0xe6, 0x95, 0xb0, 0xba, 0x48, 0x05,
	0x72, 0x03, 0x18, 0xc8, 0x01, 0x48, 0x13, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x19, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe6, 0xa0,
	0x87, 0xe9, 0xa2, 0x98, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x14, 0x48, 0x14, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x66, 0x66, 0x69,
	0x78, 0x5f, 0x74, 0x61, 0x62, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x78, 0x5f,
	0x74, 0x61, 0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x72, 0x65, 0x61,
	0x64, 0x63, 0x72, 0x75, 0x6d, 0x62, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x69, 0x64, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x72, 0x63, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x6f, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x6e, 0x75, 0x42, 0x12, 0xba, 0x47, 0x09, 0x92, 0x02, 0x06, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d,
	0x95, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x12, 0x39, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x18, 0xba, 0x47, 0x0e, 0x92, 0x02, 0x0b, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c,
	0xe4, 0xba, 0xba, 0x49, 0x44, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89,
	0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a,
	0x04, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x6e, 0x75, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x6e, 0x75,
	0x12, 0x28, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x56, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x2a, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04,
	0x6d, 0x65, 0x6e, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6e,
	0x75, 0x52, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x22, 0xc6, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x18, 0x14, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x55, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x3e, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x6e, 0x75, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x15, 0xba, 0x47, 0x0b,
	0x92, 0x02, 0x08, 0xe7, 0x88, 0xb6, 0xe7, 0xba, 0xa7, 0x49, 0x44, 0xba, 0x48, 0x04, 0x2a, 0x02,
	0x28, 0x00, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x6e, 0x75, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x0f, 0xba, 0x47, 0x0c, 0x92, 0x02, 0x09, 0xe8, 0x8f, 0x9c,
	0xe5, 0x8d, 0x95, 0xe6, 0xa0, 0x91, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2a, 0x62, 0x0a,
	0x08, 0x4d, 0x65, 0x6e, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x4e,
	0x55, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x45, 0x4e, 0x55, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x49, 0x52, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x45, 0x4e, 0x55, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x4e, 0x55, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d,
	0x45, 0x4e, 0x55, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10,
	0x03, 0x32, 0x87, 0x04, 0x0a, 0x0b, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x55, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12,
	0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x22, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e,
	0x75, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6e, 0x75,
	0x12, 0x19, 0x2e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x54, 0x72, 0x65, 0x65, 0x12, 0x24,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x54,
	0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xa6, 0x01, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x42, 0x09, 0x4d, 0x65, 0x6e, 0x75, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x26, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x53, 0x58, 0xaa, 0x02,
	0x0f, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x0f, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x1b, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x11, 0x43, 0x6f, 0x72, 0x65, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_core_service_v1_menu_proto_rawDescOnce sync.Once
	file_core_service_v1_menu_proto_rawDescData []byte
)

func file_core_service_v1_menu_proto_rawDescGZIP() []byte {
	file_core_service_v1_menu_proto_rawDescOnce.Do(func() {
		file_core_service_v1_menu_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_core_service_v1_menu_proto_rawDesc), len(file_core_service_v1_menu_proto_rawDesc)))
	})
	return file_core_service_v1_menu_proto_rawDescData
}

var file_core_service_v1_menu_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_core_service_v1_menu_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_core_service_v1_menu_proto_goTypes = []any{
	(MenuType)(0),                    // 0: core.service.v1.MenuType
	(*Menu)(nil),                     // 1: core.service.v1.Menu
	(*MenuMeta)(nil),                 // 2: core.service.v1.MenuMeta
	(*CreateMenuRequest)(nil),        // 3: core.service.v1.CreateMenuRequest
	(*CreateMenuResponse)(nil),       // 4: core.service.v1.CreateMenuResponse
	(*UpdateMenuRequest)(nil),        // 5: core.service.v1.UpdateMenuRequest
	(*UpdateMenuResponse)(nil),       // 6: core.service.v1.UpdateMenuResponse
	(*DeleteMenuRequest)(nil),        // 7: core.service.v1.DeleteMenuRequest
	(*DeleteMenuResponse)(nil),       // 8: core.service.v1.DeleteMenuResponse
	(*GetMenuRequest)(nil),           // 9: core.service.v1.GetMenuRequest
	(*GetMenuResponse)(nil),          // 10: core.service.v1.GetMenuResponse
	(*ListMenuRequest)(nil),          // 11: core.service.v1.ListMenuRequest
	(*ListMenuResponse)(nil),         // 12: core.service.v1.ListMenuResponse
	(*ListMenuTreeRequest)(nil),      // 13: core.service.v1.ListMenuTreeRequest
	(*ListMenuTreeResponse)(nil),     // 14: core.service.v1.ListMenuTreeResponse
	(enum.Status)(0),                 // 15: enum.Status
	(*pagination.PagingRequest)(nil), // 16: pagination.PagingRequest
}
var file_core_service_v1_menu_proto_depIdxs = []int32{
	2,  // 0: core.service.v1.Menu.meta:type_name -> core.service.v1.MenuMeta
	1,  // 1: core.service.v1.Menu.children:type_name -> core.service.v1.Menu
	15, // 2: core.service.v1.Menu.status:type_name -> enum.Status
	1,  // 3: core.service.v1.CreateMenuRequest.menu:type_name -> core.service.v1.Menu
	1,  // 4: core.service.v1.UpdateMenuRequest.menu:type_name -> core.service.v1.Menu
	1,  // 5: core.service.v1.GetMenuResponse.menu:type_name -> core.service.v1.Menu
	16, // 6: core.service.v1.ListMenuRequest.pagination:type_name -> pagination.PagingRequest
	1,  // 7: core.service.v1.ListMenuResponse.items:type_name -> core.service.v1.Menu
	1,  // 8: core.service.v1.ListMenuTreeResponse.items:type_name -> core.service.v1.Menu
	3,  // 9: core.service.v1.MenuService.CreateMenu:input_type -> core.service.v1.CreateMenuRequest
	5,  // 10: core.service.v1.MenuService.UpdateMenu:input_type -> core.service.v1.UpdateMenuRequest
	7,  // 11: core.service.v1.MenuService.DeleteMenu:input_type -> core.service.v1.DeleteMenuRequest
	9,  // 12: core.service.v1.MenuService.GetMenu:input_type -> core.service.v1.GetMenuRequest
	16, // 13: core.service.v1.MenuService.ListMenu:input_type -> pagination.PagingRequest
	13, // 14: core.service.v1.MenuService.ListMenuTree:input_type -> core.service.v1.ListMenuTreeRequest
	4,  // 15: core.service.v1.MenuService.CreateMenu:output_type -> core.service.v1.CreateMenuResponse
	6,  // 16: core.service.v1.MenuService.UpdateMenu:output_type -> core.service.v1.UpdateMenuResponse
	8,  // 17: core.service.v1.MenuService.DeleteMenu:output_type -> core.service.v1.DeleteMenuResponse
	10, // 18: core.service.v1.MenuService.GetMenu:output_type -> core.service.v1.GetMenuResponse
	12, // 19: core.service.v1.MenuService.ListMenu:output_type -> core.service.v1.ListMenuResponse
	14, // 20: core.service.v1.MenuService.ListMenuTree:output_type -> core.service.v1.ListMenuTreeResponse
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_core_service_v1_menu_proto_init() }
func file_core_service_v1_menu_proto_init() {
	if File_core_service_v1_menu_proto != nil {
		return
	}
	file_core_service_v1_menu_proto_msgTypes[0].OneofWrappers = []any{}
	file_core_service_v1_menu_proto_msgTypes[1].OneofWrappers = []any{}
	file_core_service_v1_menu_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_core_service_v1_menu_proto_rawDesc), len(file_core_service_v1_menu_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_core_service_v1_menu_proto_goTypes,
		DependencyIndexes: file_core_service_v1_menu_proto_depIdxs,
		EnumInfos:         file_core_service_v1_menu_proto_enumTypes,
		MessageInfos:      file_core_service_v1_menu_proto_msgTypes,
	}.Build()
	File_core_service_v1_menu_proto = out.File
	file_core_service_v1_menu_proto_goTypes = nil
	file_core_service_v1_menu_proto_depIdxs = nil
}
