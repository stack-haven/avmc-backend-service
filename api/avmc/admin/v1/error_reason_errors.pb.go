// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 客户端请求格式错误，服务器无法理解
func IsBadRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BAD_REQUEST.String() && e.Code == 400
}

// 客户端请求格式错误，服务器无法理解
func ErrorBadRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_BAD_REQUEST.String(), fmt.Sprintf(format, args...))
}

// 用户未登录，尝试访问需要认证的资源
func IsNotLoggedIn(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NOT_LOGGED_IN.String() && e.Code == 401
}

// 用户未登录，尝试访问需要认证的资源
func ErrorNotLoggedIn(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_NOT_LOGGED_IN.String(), fmt.Sprintf(format, args...))
}

// 用户没有权限访问请求的资源
func IsAccessForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ACCESS_FORBIDDEN.String() && e.Code == 403
}

// 用户没有权限访问请求的资源
func ErrorAccessForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_ACCESS_FORBIDDEN.String(), fmt.Sprintf(format, args...))
}

// 请求的资源在服务器上不存在
func IsResourceNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RESOURCE_NOT_FOUND.String() && e.Code == 404
}

// 请求的资源在服务器上不存在
func ErrorResourceNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_RESOURCE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 请求的方法不被资源支持
func IsMethodNotAllowed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_METHOD_NOT_ALLOWED.String() && e.Code == 405
}

// 请求的方法不被资源支持
func ErrorMethodNotAllowed(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_METHOD_NOT_ALLOWED.String(), fmt.Sprintf(format, args...))
}

// 客户端请求超时，服务器未在规定时间内收到完整请求
func IsRequestTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REQUEST_TIMEOUT.String() && e.Code == 408
}

// 客户端请求超时，服务器未在规定时间内收到完整请求
func ErrorRequestTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(408, ErrorReason_REQUEST_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

// 服务器内部发生错误，无法完成请求
func IsInternalServerError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INTERNAL_SERVER_ERROR.String() && e.Code == 500
}

// 服务器内部发生错误，无法完成请求
func ErrorInternalServerError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_INTERNAL_SERVER_ERROR.String(), fmt.Sprintf(format, args...))
}

// 请求的功能尚未在服务器上实现
func IsNotImplemented(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NOT_IMPLEMENTED.String() && e.Code == 501
}

// 请求的功能尚未在服务器上实现
func ErrorNotImplemented(format string, args ...interface{}) *errors.Error {
	return errors.New(501, ErrorReason_NOT_IMPLEMENTED.String(), fmt.Sprintf(format, args...))
}

// 网络连接出现问题，无法与其他服务通信
func IsNetworkError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NETWORK_ERROR.String() && e.Code == 502
}

// 网络连接出现问题，无法与其他服务通信
func ErrorNetworkError(format string, args ...interface{}) *errors.Error {
	return errors.New(502, ErrorReason_NETWORK_ERROR.String(), fmt.Sprintf(format, args...))
}

// 服务器当前无法处理请求，可能处于过载或维护状态
func IsServiceUnavailable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SERVICE_UNAVAILABLE.String() && e.Code == 503
}

// 服务器当前无法处理请求，可能处于过载或维护状态
func ErrorServiceUnavailable(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ErrorReason_SERVICE_UNAVAILABLE.String(), fmt.Sprintf(format, args...))
}

// 网络请求超时，与其他服务通信时未在规定时间内得到响应
func IsNetworkTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NETWORK_TIMEOUT.String() && e.Code == 504
}

// 网络请求超时，与其他服务通信时未在规定时间内得到响应
func ErrorNetworkTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(504, ErrorReason_NETWORK_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

// 服务器不支持请求的协议版本或功能
func IsRequestNotSupport(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REQUEST_NOT_SUPPORT.String() && e.Code == 505
}

// 服务器不支持请求的协议版本或功能
func ErrorRequestNotSupport(format string, args ...interface{}) *errors.Error {
	return errors.New(505, ErrorReason_REQUEST_NOT_SUPPORT.String(), fmt.Sprintf(format, args...))
}

// 认证相关错误
// 认证令牌已过期，需要重新获取
func IsAuthTokenExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AUTH_TOKEN_EXPIRED.String() && e.Code == 103
}

// 认证相关错误
// 认证令牌已过期，需要重新获取
func ErrorAuthTokenExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(103, ErrorReason_AUTH_TOKEN_EXPIRED.String(), fmt.Sprintf(format, args...))
}

// 提供的认证令牌无效，可能格式错误或已被撤销
func IsAuthInvalidToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AUTH_INVALID_TOKEN.String() && e.Code == 104
}

// 提供的认证令牌无效，可能格式错误或已被撤销
func ErrorAuthInvalidToken(format string, args ...interface{}) *errors.Error {
	return errors.New(104, ErrorReason_AUTH_INVALID_TOKEN.String(), fmt.Sprintf(format, args...))
}

// 请求中未包含认证令牌
func IsAuthTokenNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AUTH_TOKEN_NOT_EXIST.String() && e.Code == 105
}

// 请求中未包含认证令牌
func ErrorAuthTokenNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(105, ErrorReason_AUTH_TOKEN_NOT_EXIST.String(), fmt.Sprintf(format, args...))
}

// 用户相关错误
// 未找到指定的用户记录
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 110
}

// 用户相关错误
// 未找到指定的用户记录
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(110, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 用户不存在于系统中
func IsUserNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_EXIST.String() && e.Code == 112
}

// 用户不存在于系统中
func ErrorUserNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(112, ErrorReason_USER_NOT_EXIST.String(), fmt.Sprintf(format, args...))
}

// 用户输入的密码错误
func IsUserIncorrectPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_INCORRECT_PASSWORD.String() && e.Code == 113
}

// 用户输入的密码错误
func ErrorUserIncorrectPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(113, ErrorReason_USER_INCORRECT_PASSWORD.String(), fmt.Sprintf(format, args...))
}

// 用户账户已被冻结，无法进行操作
func IsUserFreeze(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_FREEZE.String() && e.Code == 114
}

// 用户账户已被冻结，无法进行操作
func ErrorUserFreeze(format string, args ...interface{}) *errors.Error {
	return errors.New(114, ErrorReason_USER_FREEZE.String(), fmt.Sprintf(format, args...))
}

// 提供的用户ID无效，可能格式错误或不存在
func IsUserInvalidId(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_INVALID_ID.String() && e.Code == 115
}

// 提供的用户ID无效，可能格式错误或不存在
func ErrorUserInvalidId(format string, args ...interface{}) *errors.Error {
	return errors.New(115, ErrorReason_USER_INVALID_ID.String(), fmt.Sprintf(format, args...))
}

// 尝试创建的用户已经存在于系统中
func IsUserAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_ALREADY_EXISTS.String() && e.Code == 117
}

// 尝试创建的用户已经存在于系统中
func ErrorUserAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(117, ErrorReason_USER_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 用户邮箱未经过验证
func IsUserEmailUnverified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_EMAIL_UNVERIFIED.String() && e.Code == 118
}

// 用户邮箱未经过验证
func ErrorUserEmailUnverified(format string, args ...interface{}) *errors.Error {
	return errors.New(118, ErrorReason_USER_EMAIL_UNVERIFIED.String(), fmt.Sprintf(format, args...))
}

// 用户手机号未经过验证
func IsUserPhoneUnverified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_PHONE_UNVERIFIED.String() && e.Code == 119
}

// 用户手机号未经过验证
func ErrorUserPhoneUnverified(format string, args ...interface{}) *errors.Error {
	return errors.New(119, ErrorReason_USER_PHONE_UNVERIFIED.String(), fmt.Sprintf(format, args...))
}

// 用户账户已被锁定，可能由于多次尝试失败
func IsUserAccountLocked(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_ACCOUNT_LOCKED.String() && e.Code == 120
}

// 用户账户已被锁定，可能由于多次尝试失败
func ErrorUserAccountLocked(format string, args ...interface{}) *errors.Error {
	return errors.New(120, ErrorReason_USER_ACCOUNT_LOCKED.String(), fmt.Sprintf(format, args...))
}

// 用户登录尝试次数过多，账户暂时被锁定
func IsUserTooManyLoginAttempts(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_TOO_MANY_LOGIN_ATTEMPTS.String() && e.Code == 121
}

// 用户登录尝试次数过多，账户暂时被锁定
func ErrorUserTooManyLoginAttempts(format string, args ...interface{}) *errors.Error {
	return errors.New(121, ErrorReason_USER_TOO_MANY_LOGIN_ATTEMPTS.String(), fmt.Sprintf(format, args...))
}

// 用户密码已过期，需要重置
func IsUserPasswordExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_PASSWORD_EXPIRED.String() && e.Code == 122
}

// 用户密码已过期，需要重置
func ErrorUserPasswordExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(122, ErrorReason_USER_PASSWORD_EXPIRED.String(), fmt.Sprintf(format, args...))
}

// 用户必须重置密码才能继续使用账户
func IsUserMustResetPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_MUST_RESET_PASSWORD.String() && e.Code == 123
}

// 用户必须重置密码才能继续使用账户
func ErrorUserMustResetPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(123, ErrorReason_USER_MUST_RESET_PASSWORD.String(), fmt.Sprintf(format, args...))
}

// 用户没有足够的权限执行请求的操作
func IsUserPermissionDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_PERMISSION_DENIED.String() && e.Code == 124
}

// 用户没有足够的权限执行请求的操作
func ErrorUserPermissionDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(124, ErrorReason_USER_PERMISSION_DENIED.String(), fmt.Sprintf(format, args...))
}

// 用户账户已被禁用
func IsUserDisabled(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_DISABLED.String() && e.Code == 125
}

// 用户账户已被禁用
func ErrorUserDisabled(format string, args ...interface{}) *errors.Error {
	return errors.New(125, ErrorReason_USER_DISABLED.String(), fmt.Sprintf(format, args...))
}

// 用户注册功能已被禁用
func IsUserRegistrationDisabled(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_REGISTRATION_DISABLED.String() && e.Code == 126
}

// 用户注册功能已被禁用
func ErrorUserRegistrationDisabled(format string, args ...interface{}) *errors.Error {
	return errors.New(126, ErrorReason_USER_REGISTRATION_DISABLED.String(), fmt.Sprintf(format, args...))
}

// 用户提供的邮箱格式无效
func IsUserInvalidEmailFormat(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_INVALID_EMAIL_FORMAT.String() && e.Code == 127
}

// 用户提供的邮箱格式无效
func ErrorUserInvalidEmailFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(127, ErrorReason_USER_INVALID_EMAIL_FORMAT.String(), fmt.Sprintf(format, args...))
}

// 用户提供的手机号格式无效
func IsUserInvalidPhoneFormat(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_INVALID_PHONE_FORMAT.String() && e.Code == 128
}

// 用户提供的手机号格式无效
func ErrorUserInvalidPhoneFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(128, ErrorReason_USER_INVALID_PHONE_FORMAT.String(), fmt.Sprintf(format, args...))
}

// 用户社交登录失败
func IsUserSocialLoginFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_SOCIAL_LOGIN_FAILED.String() && e.Code == 129
}

// 用户社交登录失败
func ErrorUserSocialLoginFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(129, ErrorReason_USER_SOCIAL_LOGIN_FAILED.String(), fmt.Sprintf(format, args...))
}

// 数据库相关错误
// 无法建立与数据库的连接
func IsDbConnectionError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DB_CONNECTION_ERROR.String() && e.Code == 200
}

// 数据库相关错误
// 无法建立与数据库的连接
func ErrorDbConnectionError(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_DB_CONNECTION_ERROR.String(), fmt.Sprintf(format, args...))
}

// 数据库查询操作失败
func IsDbQueryError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DB_QUERY_ERROR.String() && e.Code == 201
}

// 数据库查询操作失败
func ErrorDbQueryError(format string, args ...interface{}) *errors.Error {
	return errors.New(201, ErrorReason_DB_QUERY_ERROR.String(), fmt.Sprintf(format, args...))
}

// 数据库插入操作失败
func IsDbInsertError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DB_INSERT_ERROR.String() && e.Code == 202
}

// 数据库插入操作失败
func ErrorDbInsertError(format string, args ...interface{}) *errors.Error {
	return errors.New(202, ErrorReason_DB_INSERT_ERROR.String(), fmt.Sprintf(format, args...))
}

// 数据库更新操作失败
func IsDbUpdateError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DB_UPDATE_ERROR.String() && e.Code == 203
}

// 数据库更新操作失败
func ErrorDbUpdateError(format string, args ...interface{}) *errors.Error {
	return errors.New(203, ErrorReason_DB_UPDATE_ERROR.String(), fmt.Sprintf(format, args...))
}

// 数据库删除操作失败
func IsDbDeleteError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DB_DELETE_ERROR.String() && e.Code == 204
}

// 数据库删除操作失败
func ErrorDbDeleteError(format string, args ...interface{}) *errors.Error {
	return errors.New(204, ErrorReason_DB_DELETE_ERROR.String(), fmt.Sprintf(format, args...))
}

// 缓存相关错误
// 无法建立与缓存服务的连接
func IsCacheConnectionError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CACHE_CONNECTION_ERROR.String() && e.Code == 210
}

// 缓存相关错误
// 无法建立与缓存服务的连接
func ErrorCacheConnectionError(format string, args ...interface{}) *errors.Error {
	return errors.New(210, ErrorReason_CACHE_CONNECTION_ERROR.String(), fmt.Sprintf(format, args...))
}

// 从缓存中获取数据失败
func IsCacheGetError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CACHE_GET_ERROR.String() && e.Code == 211
}

// 从缓存中获取数据失败
func ErrorCacheGetError(format string, args ...interface{}) *errors.Error {
	return errors.New(211, ErrorReason_CACHE_GET_ERROR.String(), fmt.Sprintf(format, args...))
}

// 向缓存中设置数据失败
func IsCacheSetError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CACHE_SET_ERROR.String() && e.Code == 212
}

// 向缓存中设置数据失败
func ErrorCacheSetError(format string, args ...interface{}) *errors.Error {
	return errors.New(212, ErrorReason_CACHE_SET_ERROR.String(), fmt.Sprintf(format, args...))
}

// 从缓存中删除数据失败
func IsCacheDeleteError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CACHE_DELETE_ERROR.String() && e.Code == 213
}

// 从缓存中删除数据失败
func ErrorCacheDeleteError(format string, args ...interface{}) *errors.Error {
	return errors.New(213, ErrorReason_CACHE_DELETE_ERROR.String(), fmt.Sprintf(format, args...))
}

// 文件操作相关错误
// 读取文件时发生错误
func IsFileReadError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FILE_READ_ERROR.String() && e.Code == 220
}

// 文件操作相关错误
// 读取文件时发生错误
func ErrorFileReadError(format string, args ...interface{}) *errors.Error {
	return errors.New(220, ErrorReason_FILE_READ_ERROR.String(), fmt.Sprintf(format, args...))
}

// 写入文件时发生错误
func IsFileWriteError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FILE_WRITE_ERROR.String() && e.Code == 221
}

// 写入文件时发生错误
func ErrorFileWriteError(format string, args ...interface{}) *errors.Error {
	return errors.New(221, ErrorReason_FILE_WRITE_ERROR.String(), fmt.Sprintf(format, args...))
}

// 删除文件时发生错误
func IsFileDeleteError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FILE_DELETE_ERROR.String() && e.Code == 222
}

// 删除文件时发生错误
func ErrorFileDeleteError(format string, args ...interface{}) *errors.Error {
	return errors.New(222, ErrorReason_FILE_DELETE_ERROR.String(), fmt.Sprintf(format, args...))
}

// 请求的文件在系统中不存在
func IsFileNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FILE_NOT_FOUND.String() && e.Code == 223
}

// 请求的文件在系统中不存在
func ErrorFileNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(223, ErrorReason_FILE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 消息队列相关错误
// 无法建立与消息队列的连接
func IsMqConnectionError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MQ_CONNECTION_ERROR.String() && e.Code == 230
}

// 消息队列相关错误
// 无法建立与消息队列的连接
func ErrorMqConnectionError(format string, args ...interface{}) *errors.Error {
	return errors.New(230, ErrorReason_MQ_CONNECTION_ERROR.String(), fmt.Sprintf(format, args...))
}

// 向消息队列发送消息失败
func IsMqSendError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MQ_SEND_ERROR.String() && e.Code == 231
}

// 向消息队列发送消息失败
func ErrorMqSendError(format string, args ...interface{}) *errors.Error {
	return errors.New(231, ErrorReason_MQ_SEND_ERROR.String(), fmt.Sprintf(format, args...))
}

// 从消息队列接收消息失败
func IsMqReceiveError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_MQ_RECEIVE_ERROR.String() && e.Code == 232
}

// 从消息队列接收消息失败
func ErrorMqReceiveError(format string, args ...interface{}) *errors.Error {
	return errors.New(232, ErrorReason_MQ_RECEIVE_ERROR.String(), fmt.Sprintf(format, args...))
}

// 第三方服务相关错误
// 调用第三方服务时发生错误
func IsThirdPartyServiceError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_THIRD_PARTY_SERVICE_ERROR.String() && e.Code == 240
}

// 第三方服务相关错误
// 调用第三方服务时发生错误
func ErrorThirdPartyServiceError(format string, args ...interface{}) *errors.Error {
	return errors.New(240, ErrorReason_THIRD_PARTY_SERVICE_ERROR.String(), fmt.Sprintf(format, args...))
}

// 调用第三方服务时超时，未在规定时间内得到响应
func IsThirdPartyTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_THIRD_PARTY_TIMEOUT.String() && e.Code == 241
}

// 调用第三方服务时超时，未在规定时间内得到响应
func ErrorThirdPartyTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(241, ErrorReason_THIRD_PARTY_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

// 调用第三方服务时未获得授权
func IsThirdPartyUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_THIRD_PARTY_UNAUTHORIZED.String() && e.Code == 242
}

// 调用第三方服务时未获得授权
func ErrorThirdPartyUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(242, ErrorReason_THIRD_PARTY_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}
