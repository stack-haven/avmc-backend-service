// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: avmc/admin/v1/error_reason.proto

package v1

import (
	_ "github.com/go-kratos/kratos/v2/errors"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 错误原因枚举，定义系统中可能出现的各种错误情况
type ErrorReason int32

const (
	// 客户端请求格式错误，服务器无法理解
	ErrorReason_BAD_REQUEST ErrorReason = 0
	// 用户未登录，尝试访问需要认证的资源
	ErrorReason_NOT_LOGGED_IN ErrorReason = 1
	// 用户没有权限访问请求的资源
	ErrorReason_ACCESS_FORBIDDEN ErrorReason = 2
	// 请求的资源在服务器上不存在
	ErrorReason_RESOURCE_NOT_FOUND ErrorReason = 3
	// 请求的方法不被资源支持
	ErrorReason_METHOD_NOT_ALLOWED ErrorReason = 4
	// 客户端请求超时，服务器未在规定时间内收到完整请求
	ErrorReason_REQUEST_TIMEOUT ErrorReason = 5
	// 服务器内部发生错误，无法完成请求
	ErrorReason_INTERNAL_SERVER_ERROR ErrorReason = 10
	// 请求的功能尚未在服务器上实现
	ErrorReason_NOT_IMPLEMENTED ErrorReason = 11
	// 网络连接出现问题，无法与其他服务通信
	ErrorReason_NETWORK_ERROR ErrorReason = 12
	// 服务器当前无法处理请求，可能处于过载或维护状态
	ErrorReason_SERVICE_UNAVAILABLE ErrorReason = 13
	// 网络请求超时，与其他服务通信时未在规定时间内得到响应
	ErrorReason_NETWORK_TIMEOUT ErrorReason = 14
	// 服务器不支持请求的协议版本或功能
	ErrorReason_REQUEST_NOT_SUPPORT ErrorReason = 15
	// 认证相关错误
	// 认证令牌已过期，需要重新获取
	ErrorReason_AUTH_TOKEN_EXPIRED ErrorReason = 30
	// 提供的认证令牌无效，可能格式错误或已被撤销
	ErrorReason_AUTH_INVALID_TOKEN ErrorReason = 31
	// 请求中未包含认证令牌
	ErrorReason_AUTH_TOKEN_NOT_EXIST ErrorReason = 32
	// 用户相关错误
	// 未找到指定的用户记录
	ErrorReason_USER_NOT_FOUND ErrorReason = 50
	// 用户不存在于系统中
	ErrorReason_USER_NOT_EXIST ErrorReason = 51
	// 用户输入的密码错误
	ErrorReason_USER_INCORRECT_PASSWORD ErrorReason = 52
	// 用户账户已被冻结，无法进行操作
	ErrorReason_USER_FREEZE ErrorReason = 53
	// 提供的用户ID无效，可能格式错误或不存在
	ErrorReason_USER_INVALID_ID ErrorReason = 54
	// 尝试创建的用户已经存在于系统中
	ErrorReason_USER_ALREADY_EXISTS ErrorReason = 56
	// 用户邮箱未经过验证
	ErrorReason_USER_EMAIL_UNVERIFIED ErrorReason = 57
	// 用户手机号未经过验证
	ErrorReason_USER_PHONE_UNVERIFIED ErrorReason = 58
	// 用户账户已被锁定，可能由于多次尝试失败
	ErrorReason_USER_ACCOUNT_LOCKED ErrorReason = 59
	// 用户登录尝试次数过多，账户暂时被锁定
	ErrorReason_USER_TOO_MANY_LOGIN_ATTEMPTS ErrorReason = 60
	// 用户密码已过期，需要重置
	ErrorReason_USER_PASSWORD_EXPIRED ErrorReason = 61
	// 用户必须重置密码才能继续使用账户
	ErrorReason_USER_MUST_RESET_PASSWORD ErrorReason = 62
	// 用户没有足够的权限执行请求的操作
	ErrorReason_USER_PERMISSION_DENIED ErrorReason = 63
	// 用户账户已被禁用
	ErrorReason_USER_DISABLED ErrorReason = 64
	// 用户注册功能已被禁用
	ErrorReason_USER_REGISTRATION_DISABLED ErrorReason = 65
	// 用户提供的邮箱格式无效
	ErrorReason_USER_INVALID_EMAIL_FORMAT ErrorReason = 66
	// 用户提供的手机号格式无效
	ErrorReason_USER_INVALID_PHONE_FORMAT ErrorReason = 67
	// 用户社交登录失败
	ErrorReason_USER_SOCIAL_LOGIN_FAILED ErrorReason = 68
	// 数据库相关错误
	// 无法建立与数据库的连接
	ErrorReason_DB_CONNECTION_ERROR ErrorReason = 100
	// 数据库查询操作失败
	ErrorReason_DB_QUERY_ERROR ErrorReason = 101
	// 数据库插入操作失败
	ErrorReason_DB_INSERT_ERROR ErrorReason = 102
	// 数据库更新操作失败
	ErrorReason_DB_UPDATE_ERROR ErrorReason = 103
	// 数据库删除操作失败
	ErrorReason_DB_DELETE_ERROR ErrorReason = 104
	// 缓存相关错误
	// 无法建立与缓存服务的连接
	ErrorReason_CACHE_CONNECTION_ERROR ErrorReason = 110
	// 从缓存中获取数据失败
	ErrorReason_CACHE_GET_ERROR ErrorReason = 111
	// 向缓存中设置数据失败
	ErrorReason_CACHE_SET_ERROR ErrorReason = 112
	// 从缓存中删除数据失败
	ErrorReason_CACHE_DELETE_ERROR ErrorReason = 113
	// 文件操作相关错误
	// 读取文件时发生错误
	ErrorReason_FILE_READ_ERROR ErrorReason = 120
	// 写入文件时发生错误
	ErrorReason_FILE_WRITE_ERROR ErrorReason = 121
	// 删除文件时发生错误
	ErrorReason_FILE_DELETE_ERROR ErrorReason = 122
	// 请求的文件在系统中不存在
	ErrorReason_FILE_NOT_FOUND ErrorReason = 123
	// 消息队列相关错误
	// 无法建立与消息队列的连接
	ErrorReason_MQ_CONNECTION_ERROR ErrorReason = 130
	// 向消息队列发送消息失败
	ErrorReason_MQ_SEND_ERROR ErrorReason = 131
	// 从消息队列接收消息失败
	ErrorReason_MQ_RECEIVE_ERROR ErrorReason = 132
	// 第三方服务相关错误
	// 调用第三方服务时发生错误
	ErrorReason_THIRD_PARTY_SERVICE_ERROR ErrorReason = 140
	// 调用第三方服务时超时，未在规定时间内得到响应
	ErrorReason_THIRD_PARTY_TIMEOUT ErrorReason = 141
	// 调用第三方服务时未获得授权
	ErrorReason_THIRD_PARTY_UNAUTHORIZED ErrorReason = 142
)

// Enum value maps for ErrorReason.
var (
	ErrorReason_name = map[int32]string{
		0:   "BAD_REQUEST",
		1:   "NOT_LOGGED_IN",
		2:   "ACCESS_FORBIDDEN",
		3:   "RESOURCE_NOT_FOUND",
		4:   "METHOD_NOT_ALLOWED",
		5:   "REQUEST_TIMEOUT",
		10:  "INTERNAL_SERVER_ERROR",
		11:  "NOT_IMPLEMENTED",
		12:  "NETWORK_ERROR",
		13:  "SERVICE_UNAVAILABLE",
		14:  "NETWORK_TIMEOUT",
		15:  "REQUEST_NOT_SUPPORT",
		30:  "AUTH_TOKEN_EXPIRED",
		31:  "AUTH_INVALID_TOKEN",
		32:  "AUTH_TOKEN_NOT_EXIST",
		50:  "USER_NOT_FOUND",
		51:  "USER_NOT_EXIST",
		52:  "USER_INCORRECT_PASSWORD",
		53:  "USER_FREEZE",
		54:  "USER_INVALID_ID",
		56:  "USER_ALREADY_EXISTS",
		57:  "USER_EMAIL_UNVERIFIED",
		58:  "USER_PHONE_UNVERIFIED",
		59:  "USER_ACCOUNT_LOCKED",
		60:  "USER_TOO_MANY_LOGIN_ATTEMPTS",
		61:  "USER_PASSWORD_EXPIRED",
		62:  "USER_MUST_RESET_PASSWORD",
		63:  "USER_PERMISSION_DENIED",
		64:  "USER_DISABLED",
		65:  "USER_REGISTRATION_DISABLED",
		66:  "USER_INVALID_EMAIL_FORMAT",
		67:  "USER_INVALID_PHONE_FORMAT",
		68:  "USER_SOCIAL_LOGIN_FAILED",
		100: "DB_CONNECTION_ERROR",
		101: "DB_QUERY_ERROR",
		102: "DB_INSERT_ERROR",
		103: "DB_UPDATE_ERROR",
		104: "DB_DELETE_ERROR",
		110: "CACHE_CONNECTION_ERROR",
		111: "CACHE_GET_ERROR",
		112: "CACHE_SET_ERROR",
		113: "CACHE_DELETE_ERROR",
		120: "FILE_READ_ERROR",
		121: "FILE_WRITE_ERROR",
		122: "FILE_DELETE_ERROR",
		123: "FILE_NOT_FOUND",
		130: "MQ_CONNECTION_ERROR",
		131: "MQ_SEND_ERROR",
		132: "MQ_RECEIVE_ERROR",
		140: "THIRD_PARTY_SERVICE_ERROR",
		141: "THIRD_PARTY_TIMEOUT",
		142: "THIRD_PARTY_UNAUTHORIZED",
	}
	ErrorReason_value = map[string]int32{
		"BAD_REQUEST":                  0,
		"NOT_LOGGED_IN":                1,
		"ACCESS_FORBIDDEN":             2,
		"RESOURCE_NOT_FOUND":           3,
		"METHOD_NOT_ALLOWED":           4,
		"REQUEST_TIMEOUT":              5,
		"INTERNAL_SERVER_ERROR":        10,
		"NOT_IMPLEMENTED":              11,
		"NETWORK_ERROR":                12,
		"SERVICE_UNAVAILABLE":          13,
		"NETWORK_TIMEOUT":              14,
		"REQUEST_NOT_SUPPORT":          15,
		"AUTH_TOKEN_EXPIRED":           30,
		"AUTH_INVALID_TOKEN":           31,
		"AUTH_TOKEN_NOT_EXIST":         32,
		"USER_NOT_FOUND":               50,
		"USER_NOT_EXIST":               51,
		"USER_INCORRECT_PASSWORD":      52,
		"USER_FREEZE":                  53,
		"USER_INVALID_ID":              54,
		"USER_ALREADY_EXISTS":          56,
		"USER_EMAIL_UNVERIFIED":        57,
		"USER_PHONE_UNVERIFIED":        58,
		"USER_ACCOUNT_LOCKED":          59,
		"USER_TOO_MANY_LOGIN_ATTEMPTS": 60,
		"USER_PASSWORD_EXPIRED":        61,
		"USER_MUST_RESET_PASSWORD":     62,
		"USER_PERMISSION_DENIED":       63,
		"USER_DISABLED":                64,
		"USER_REGISTRATION_DISABLED":   65,
		"USER_INVALID_EMAIL_FORMAT":    66,
		"USER_INVALID_PHONE_FORMAT":    67,
		"USER_SOCIAL_LOGIN_FAILED":     68,
		"DB_CONNECTION_ERROR":          100,
		"DB_QUERY_ERROR":               101,
		"DB_INSERT_ERROR":              102,
		"DB_UPDATE_ERROR":              103,
		"DB_DELETE_ERROR":              104,
		"CACHE_CONNECTION_ERROR":       110,
		"CACHE_GET_ERROR":              111,
		"CACHE_SET_ERROR":              112,
		"CACHE_DELETE_ERROR":           113,
		"FILE_READ_ERROR":              120,
		"FILE_WRITE_ERROR":             121,
		"FILE_DELETE_ERROR":            122,
		"FILE_NOT_FOUND":               123,
		"MQ_CONNECTION_ERROR":          130,
		"MQ_SEND_ERROR":                131,
		"MQ_RECEIVE_ERROR":             132,
		"THIRD_PARTY_SERVICE_ERROR":    140,
		"THIRD_PARTY_TIMEOUT":          141,
		"THIRD_PARTY_UNAUTHORIZED":     142,
	}
)

func (x ErrorReason) Enum() *ErrorReason {
	p := new(ErrorReason)
	*p = x
	return p
}

func (x ErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_avmc_admin_v1_error_reason_proto_enumTypes[0].Descriptor()
}

func (ErrorReason) Type() protoreflect.EnumType {
	return &file_avmc_admin_v1_error_reason_proto_enumTypes[0]
}

func (x ErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorReason.Descriptor instead.
func (ErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_avmc_admin_v1_error_reason_proto_rawDescGZIP(), []int{0}
}

var File_avmc_admin_v1_error_reason_proto protoreflect.FileDescriptor

var file_avmc_admin_v1_error_reason_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x61, 0x76, 0x6d, 0x63, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x1a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xa2, 0x0c, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x00, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x17, 0x0a,
	0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x01,
	0x1a, 0x04, 0xa8, 0x45, 0x91, 0x03, 0x12, 0x1a, 0x0a, 0x10, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x02, 0x1a, 0x04, 0xa8, 0x45,
	0x93, 0x03, 0x12, 0x1c, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x1a, 0x04, 0xa8, 0x45, 0x94, 0x03,
	0x12, 0x1c, 0x0a, 0x12, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x04, 0xa8, 0x45, 0x95, 0x03, 0x12, 0x19,
	0x0a, 0x0f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x10, 0x05, 0x1a, 0x04, 0xa8, 0x45, 0x98, 0x03, 0x12, 0x1f, 0x0a, 0x15, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x0a, 0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x19, 0x0a, 0x0f, 0x4e, 0x4f,
	0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x1a,
	0x04, 0xa8, 0x45, 0xf5, 0x03, 0x12, 0x17, 0x0a, 0x0d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0c, 0x1a, 0x04, 0xa8, 0x45, 0xf6, 0x03, 0x12, 0x1d,
	0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0d, 0x1a, 0x04, 0xa8, 0x45, 0xf7, 0x03, 0x12, 0x19, 0x0a,
	0x0f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x10, 0x0e, 0x1a, 0x04, 0xa8, 0x45, 0xf8, 0x03, 0x12, 0x1d, 0x0a, 0x13, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x0f, 0x1a, 0x04, 0xa8, 0x45, 0xf9, 0x03, 0x12, 0x1b, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x1e, 0x1a,
	0x03, 0xa8, 0x45, 0x67, 0x12, 0x1b, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x1f, 0x1a, 0x03, 0xa8, 0x45,
	0x68, 0x12, 0x1d, 0x0a, 0x14, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x20, 0x1a, 0x03, 0xa8, 0x45, 0x69,
	0x12, 0x17, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x32, 0x1a, 0x03, 0xa8, 0x45, 0x6e, 0x12, 0x17, 0x0a, 0x0e, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x33, 0x1a, 0x03, 0xa8,
	0x45, 0x70, 0x12, 0x20, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x34, 0x1a,
	0x03, 0xa8, 0x45, 0x71, 0x12, 0x14, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x52, 0x45,
	0x45, 0x5a, 0x45, 0x10, 0x35, 0x1a, 0x03, 0xa8, 0x45, 0x72, 0x12, 0x18, 0x0a, 0x0f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x36, 0x1a,
	0x03, 0xa8, 0x45, 0x73, 0x12, 0x1c, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x38, 0x1a, 0x03, 0xa8,
	0x45, 0x75, 0x12, 0x1e, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x39, 0x1a, 0x03, 0xa8,
	0x45, 0x76, 0x12, 0x1e, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45,
	0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x3a, 0x1a, 0x03, 0xa8,
	0x45, 0x77, 0x12, 0x1c, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x3b, 0x1a, 0x03, 0xa8, 0x45, 0x78,
	0x12, 0x25, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e,
	0x59, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x53,
	0x10, 0x3c, 0x1a, 0x03, 0xa8, 0x45, 0x79, 0x12, 0x1e, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x3d, 0x1a, 0x03, 0xa8, 0x45, 0x7a, 0x12, 0x21, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4d, 0x55, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57,
	0x4f, 0x52, 0x44, 0x10, 0x3e, 0x1a, 0x03, 0xa8, 0x45, 0x7b, 0x12, 0x1f, 0x0a, 0x16, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x4e, 0x49, 0x45, 0x44, 0x10, 0x3f, 0x1a, 0x03, 0xa8, 0x45, 0x7c, 0x12, 0x16, 0x0a, 0x0d, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x40, 0x1a, 0x03,
	0xa8, 0x45, 0x7d, 0x12, 0x23, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x41, 0x1a, 0x03, 0xa8, 0x45, 0x7e, 0x12, 0x22, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x42, 0x1a, 0x03, 0xa8, 0x45, 0x7f, 0x12, 0x23, 0x0a, 0x19,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x48, 0x4f,
	0x4e, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x43, 0x1a, 0x04, 0xa8, 0x45, 0x80,
	0x01, 0x12, 0x22, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c,
	0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x44, 0x1a,
	0x04, 0xa8, 0x45, 0x81, 0x01, 0x12, 0x1d, 0x0a, 0x13, 0x44, 0x42, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x64, 0x1a, 0x04,
	0xa8, 0x45, 0xc8, 0x01, 0x12, 0x18, 0x0a, 0x0e, 0x44, 0x42, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x65, 0x1a, 0x04, 0xa8, 0x45, 0xc9, 0x01, 0x12, 0x19,
	0x0a, 0x0f, 0x44, 0x42, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x66, 0x1a, 0x04, 0xa8, 0x45, 0xca, 0x01, 0x12, 0x19, 0x0a, 0x0f, 0x44, 0x42, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x67, 0x1a, 0x04,
	0xa8, 0x45, 0xcb, 0x01, 0x12, 0x19, 0x0a, 0x0f, 0x44, 0x42, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x68, 0x1a, 0x04, 0xa8, 0x45, 0xcc, 0x01, 0x12,
	0x20, 0x0a, 0x16, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x6e, 0x1a, 0x04, 0xa8, 0x45, 0xd2,
	0x01, 0x12, 0x19, 0x0a, 0x0f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x6f, 0x1a, 0x04, 0xa8, 0x45, 0xd3, 0x01, 0x12, 0x19, 0x0a, 0x0f,
	0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x70, 0x1a, 0x04, 0xa8, 0x45, 0xd4, 0x01, 0x12, 0x1c, 0x0a, 0x12, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x71, 0x1a,
	0x04, 0xa8, 0x45, 0xd5, 0x01, 0x12, 0x19, 0x0a, 0x0f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x78, 0x1a, 0x04, 0xa8, 0x45, 0xdc, 0x01,
	0x12, 0x1a, 0x0a, 0x10, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x79, 0x1a, 0x04, 0xa8, 0x45, 0xdd, 0x01, 0x12, 0x1b, 0x0a, 0x11,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x7a, 0x1a, 0x04, 0xa8, 0x45, 0xde, 0x01, 0x12, 0x18, 0x0a, 0x0e, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x7b, 0x1a, 0x04, 0xa8,
	0x45, 0xdf, 0x01, 0x12, 0x1e, 0x0a, 0x13, 0x4d, 0x51, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x82, 0x01, 0x1a, 0x04, 0xa8,
	0x45, 0xe6, 0x01, 0x12, 0x18, 0x0a, 0x0d, 0x4d, 0x51, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x83, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0xe7, 0x01, 0x12, 0x1b, 0x0a,
	0x10, 0x4d, 0x51, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x84, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0xe8, 0x01, 0x12, 0x24, 0x0a, 0x19, 0x54, 0x48,
	0x49, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x8c, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0xf0, 0x01,
	0x12, 0x1e, 0x0a, 0x13, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x8d, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0xf1, 0x01,
	0x12, 0x23, 0x0a, 0x18, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f,
	0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x8e, 0x01, 0x1a,
	0x04, 0xa8, 0x45, 0xf2, 0x01, 0x1a, 0x04, 0xa0, 0x45, 0xf4, 0x03, 0x42, 0xa1, 0x01, 0x0a, 0x11,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x42, 0x10, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x76, 0x6d, 0x63, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x41,
	0x58, 0xaa, 0x02, 0x0d, 0x41, 0x76, 0x6d, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x0d, 0x41, 0x76, 0x6d, 0x63, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x19, 0x41, 0x76, 0x6d, 0x63, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f,
	0x41, 0x76, 0x6d, 0x63, 0x3a, 0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_avmc_admin_v1_error_reason_proto_rawDescOnce sync.Once
	file_avmc_admin_v1_error_reason_proto_rawDescData []byte
)

func file_avmc_admin_v1_error_reason_proto_rawDescGZIP() []byte {
	file_avmc_admin_v1_error_reason_proto_rawDescOnce.Do(func() {
		file_avmc_admin_v1_error_reason_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_avmc_admin_v1_error_reason_proto_rawDesc), len(file_avmc_admin_v1_error_reason_proto_rawDesc)))
	})
	return file_avmc_admin_v1_error_reason_proto_rawDescData
}

var file_avmc_admin_v1_error_reason_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_avmc_admin_v1_error_reason_proto_goTypes = []any{
	(ErrorReason)(0), // 0: avmc.admin.v1.ErrorReason
}
var file_avmc_admin_v1_error_reason_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_avmc_admin_v1_error_reason_proto_init() }
func file_avmc_admin_v1_error_reason_proto_init() {
	if File_avmc_admin_v1_error_reason_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_avmc_admin_v1_error_reason_proto_rawDesc), len(file_avmc_admin_v1_error_reason_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_avmc_admin_v1_error_reason_proto_goTypes,
		DependencyIndexes: file_avmc_admin_v1_error_reason_proto_depIdxs,
		EnumInfos:         file_avmc_admin_v1_error_reason_proto_enumTypes,
	}.Build()
	File_avmc_admin_v1_error_reason_proto = out.File
	file_avmc_admin_v1_error_reason_proto_goTypes = nil
	file_avmc_admin_v1_error_reason_proto_depIdxs = nil
}
