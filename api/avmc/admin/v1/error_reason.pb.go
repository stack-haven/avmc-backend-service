// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: avmc/admin/v1/error_reason.proto

package v1

import (
	_ "github.com/go-kratos/kratos/v2/errors"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 错误原因枚举，定义系统中可能出现的各种错误情况
type ErrorReason int32

const (
	// =======================================
	// HTTP标准错误 (0-99)
	// =======================================
	// 保留的默认错误值
	ErrorReason_RESERVED_DEFAULT ErrorReason = 0
	// 客户端请求格式错误，服务器无法理解
	ErrorReason_BAD_REQUEST ErrorReason = 1
	// 用户未登录，尝试访问需要认证的资源
	ErrorReason_NOT_LOGGED_IN ErrorReason = 2
	// 用户没有权限访问请求的资源
	ErrorReason_ACCESS_FORBIDDEN ErrorReason = 3
	// 请求的资源在服务器上不存在
	ErrorReason_RESOURCE_NOT_FOUND ErrorReason = 4
	// 请求的方法不被资源支持
	ErrorReason_METHOD_NOT_ALLOWED ErrorReason = 5
	// 客户端请求超时，服务器未在规定时间内收到完整请求
	ErrorReason_REQUEST_TIMEOUT ErrorReason = 6
	// 服务器内部发生错误，无法完成请求
	ErrorReason_INTERNAL_SERVER_ERROR ErrorReason = 7
	// 请求的功能尚未在服务器上实现
	ErrorReason_NOT_IMPLEMENTED ErrorReason = 8
	// 网络连接出现问题，无法与其他服务通信
	ErrorReason_NETWORK_ERROR ErrorReason = 9
	// 服务器当前无法处理请求，可能处于过载或维护状态
	ErrorReason_SERVICE_UNAVAILABLE ErrorReason = 10
	// 网络请求超时，与其他服务通信时未在规定时间内得到响应
	ErrorReason_NETWORK_TIMEOUT ErrorReason = 11
	// 服务器不支持请求的协议版本或功能
	ErrorReason_REQUEST_NOT_SUPPORT ErrorReason = 12
	// =======================================
	// 认证与授权错误 (100-199)
	// =======================================
	// 认证令牌已过期，需要重新获取
	ErrorReason_AUTH_TOKEN_EXPIRED ErrorReason = 100
	// 提供的认证令牌无效，可能格式错误或已被撤销
	ErrorReason_AUTH_INVALID_TOKEN ErrorReason = 101
	// 请求中未包含认证令牌
	ErrorReason_AUTH_TOKEN_NOT_EXIST ErrorReason = 102
	// 认证失败，用户名或密码错误
	ErrorReason_AUTH_FAILED ErrorReason = 103
	// 授权失败，用户没有足够权限
	ErrorReason_AUTHORIZATION_FAILED ErrorReason = 104
	// 权限不足，无法执行操作
	ErrorReason_PERMISSION_DENIED ErrorReason = 105
	// 会话已过期，需要重新登录
	ErrorReason_SESSION_EXPIRED ErrorReason = 106
	// 账号已在其他地方登录
	ErrorReason_ACCOUNT_LOGGED_IN_ELSEWHERE ErrorReason = 107
	// =======================================
	// 用户管理错误 (200-299)
	// =======================================
	// 未找到指定的用户记录
	ErrorReason_USER_NOT_FOUND ErrorReason = 200
	// 用户不存在于系统中
	ErrorReason_USER_NOT_EXIST ErrorReason = 201
	// 用户输入的密码错误
	ErrorReason_USER_INCORRECT_PASSWORD ErrorReason = 202
	// 用户账户已被冻结，无法进行操作
	ErrorReason_USER_FROZEN ErrorReason = 203
	// 提供的用户ID无效，可能格式错误或不存在
	ErrorReason_USER_INVALID_ID ErrorReason = 204
	// 尝试创建的用户已经存在于系统中
	ErrorReason_USER_ALREADY_EXISTS ErrorReason = 205
	// 用户邮箱未经过验证
	ErrorReason_USER_EMAIL_UNVERIFIED ErrorReason = 206
	// 用户手机号未经过验证
	ErrorReason_USER_PHONE_UNVERIFIED ErrorReason = 207
	// 用户账户已被锁定，可能由于多次尝试失败
	ErrorReason_USER_ACCOUNT_LOCKED ErrorReason = 208
	// 用户登录尝试次数过多，账户暂时被锁定
	ErrorReason_USER_TOO_MANY_LOGIN_ATTEMPTS ErrorReason = 209
	// 用户密码已过期，需要重置
	ErrorReason_USER_PASSWORD_EXPIRED ErrorReason = 210
	// 用户必须重置密码才能继续使用账户
	ErrorReason_USER_MUST_RESET_PASSWORD ErrorReason = 211
	// 用户账户已被禁用
	ErrorReason_USER_DISABLED ErrorReason = 212
	// 用户注册功能已被禁用
	ErrorReason_USER_REGISTRATION_DISABLED ErrorReason = 213
	// 用户提供的邮箱格式无效
	ErrorReason_USER_INVALID_EMAIL_FORMAT ErrorReason = 214
	// 用户提供的手机号格式无效
	ErrorReason_USER_INVALID_PHONE_FORMAT ErrorReason = 215
	// 用户社交登录失败
	ErrorReason_USER_SOCIAL_LOGIN_FAILED ErrorReason = 216
	// =======================================
	// 角色管理错误 (300-399)
	// =======================================
	// 角色不存在
	ErrorReason_ROLE_NOT_FOUND ErrorReason = 300
	// 角色ID无效
	ErrorReason_ROLE_INVALID_ID ErrorReason = 301
	// 角色已存在
	ErrorReason_ROLE_ALREADY_EXISTS ErrorReason = 302
	// 无法删除系统内置角色
	ErrorReason_ROLE_CANNOT_DELETE_BUILTIN ErrorReason = 303
	// 角色名称不能为空
	ErrorReason_ROLE_NAME_CANNOT_BE_EMPTY ErrorReason = 304
	// 角色描述不能为空
	ErrorReason_ROLE_DESCRIPTION_CANNOT_BE_EMPTY ErrorReason = 305
	// 角色权限设置无效
	ErrorReason_ROLE_PERMISSION_INVALID ErrorReason = 306
	// =======================================
	// 岗位管理错误 (400-499)
	// =======================================
	// 岗位不存在
	ErrorReason_POST_NOT_FOUND ErrorReason = 400
	// 岗位ID无效
	ErrorReason_POST_INVALID_ID ErrorReason = 401
	// 岗位已存在
	ErrorReason_POST_ALREADY_EXISTS ErrorReason = 402
	// 岗位名称不能为空
	ErrorReason_POST_NAME_CANNOT_BE_EMPTY ErrorReason = 403
	// 岗位描述不能为空
	ErrorReason_POST_DESCRIPTION_CANNOT_BE_EMPTY ErrorReason = 404
	// =======================================
	// 菜单管理错误 (500-599)
	// =======================================
	// 菜单不存在
	ErrorReason_MENU_NOT_FOUND ErrorReason = 500
	// 菜单ID无效
	ErrorReason_MENU_INVALID_ID ErrorReason = 501
	// 菜单已存在
	ErrorReason_MENU_ALREADY_EXISTS ErrorReason = 502
	// 菜单名称不能为空
	ErrorReason_MENU_NAME_CANNOT_BE_EMPTY ErrorReason = 503
	// 菜单路径不能为空
	ErrorReason_MENU_PATH_CANNOT_BE_EMPTY ErrorReason = 504
	// 菜单组件不能为空
	ErrorReason_MENU_COMPONENT_CANNOT_BE_EMPTY ErrorReason = 505
	// 无法删除有子菜单的菜单
	ErrorReason_MENU_CANNOT_DELETE_WITH_CHILDREN ErrorReason = 506
	// =======================================
	// 部门管理错误 (600-699)
	// =======================================
	// 部门不存在
	ErrorReason_DEPT_NOT_FOUND ErrorReason = 600
	// 部门ID无效
	ErrorReason_DEPT_INVALID_ID ErrorReason = 601
	// 部门已存在
	ErrorReason_DEPT_ALREADY_EXISTS ErrorReason = 602
	// 部门名称不能为空
	ErrorReason_DEPT_NAME_CANNOT_BE_EMPTY ErrorReason = 603
	// 无法删除有子部门的部门
	ErrorReason_DEPT_CANNOT_DELETE_WITH_CHILDREN ErrorReason = 604
	// 无法删除包含用户的部门
	ErrorReason_DEPT_CANNOT_DELETE_WITH_USERS ErrorReason = 605
	// =======================================
	// 数据层错误 (700-799)
	// =======================================
	// 无法建立与数据库的连接
	ErrorReason_DB_CONNECTION_ERROR ErrorReason = 700
	// 数据库查询操作失败
	ErrorReason_DB_QUERY_ERROR ErrorReason = 701
	// 数据库插入操作失败
	ErrorReason_DB_INSERT_ERROR ErrorReason = 702
	// 数据库更新操作失败
	ErrorReason_DB_UPDATE_ERROR ErrorReason = 703
	// 数据库删除操作失败
	ErrorReason_DB_DELETE_ERROR ErrorReason = 704
	// 数据库事务执行失败
	ErrorReason_DB_TRANSACTION_ERROR ErrorReason = 705
	// 数据校验失败
	ErrorReason_DATA_VALIDATION_ERROR ErrorReason = 706
	// =======================================
	// 缓存错误 (800-899)
	// =======================================
	// 无法建立与缓存服务的连接
	ErrorReason_CACHE_CONNECTION_ERROR ErrorReason = 800
	// 从缓存中获取数据失败
	ErrorReason_CACHE_GET_ERROR ErrorReason = 801
	// 向缓存中设置数据失败
	ErrorReason_CACHE_SET_ERROR ErrorReason = 802
	// 从缓存中删除数据失败
	ErrorReason_CACHE_DELETE_ERROR ErrorReason = 803
	// =======================================
	// 文件操作错误 (900-999)
	// =======================================
	// 读取文件时发生错误
	ErrorReason_FILE_READ_ERROR ErrorReason = 900
	// 写入文件时发生错误
	ErrorReason_FILE_WRITE_ERROR ErrorReason = 901
	// 删除文件时发生错误
	ErrorReason_FILE_DELETE_ERROR ErrorReason = 902
	// 请求的文件在系统中不存在
	ErrorReason_FILE_NOT_FOUND ErrorReason = 903
	// 文件大小超过限制
	ErrorReason_FILE_SIZE_EXCEEDED ErrorReason = 904
	// 文件格式不支持
	ErrorReason_FILE_FORMAT_NOT_SUPPORTED ErrorReason = 905
	// =======================================
	// 消息队列错误 (1000-1099)
	// =======================================
	// 无法建立与消息队列的连接
	ErrorReason_MQ_CONNECTION_ERROR ErrorReason = 1000
	// 向消息队列发送消息失败
	ErrorReason_MQ_SEND_ERROR ErrorReason = 1001
	// 从消息队列接收消息失败
	ErrorReason_MQ_RECEIVE_ERROR ErrorReason = 1002
	// =======================================
	// 第三方服务错误 (1100-1199)
	// =======================================
	// 调用第三方服务时发生错误
	ErrorReason_THIRD_PARTY_SERVICE_ERROR ErrorReason = 1100
	// 调用第三方服务时超时，未在规定时间内得到响应
	ErrorReason_THIRD_PARTY_TIMEOUT ErrorReason = 1101
	// 调用第三方服务时未获得授权
	ErrorReason_THIRD_PARTY_UNAUTHORIZED ErrorReason = 1102
)

// Enum value maps for ErrorReason.
var (
	ErrorReason_name = map[int32]string{
		0:    "RESERVED_DEFAULT",
		1:    "BAD_REQUEST",
		2:    "NOT_LOGGED_IN",
		3:    "ACCESS_FORBIDDEN",
		4:    "RESOURCE_NOT_FOUND",
		5:    "METHOD_NOT_ALLOWED",
		6:    "REQUEST_TIMEOUT",
		7:    "INTERNAL_SERVER_ERROR",
		8:    "NOT_IMPLEMENTED",
		9:    "NETWORK_ERROR",
		10:   "SERVICE_UNAVAILABLE",
		11:   "NETWORK_TIMEOUT",
		12:   "REQUEST_NOT_SUPPORT",
		100:  "AUTH_TOKEN_EXPIRED",
		101:  "AUTH_INVALID_TOKEN",
		102:  "AUTH_TOKEN_NOT_EXIST",
		103:  "AUTH_FAILED",
		104:  "AUTHORIZATION_FAILED",
		105:  "PERMISSION_DENIED",
		106:  "SESSION_EXPIRED",
		107:  "ACCOUNT_LOGGED_IN_ELSEWHERE",
		200:  "USER_NOT_FOUND",
		201:  "USER_NOT_EXIST",
		202:  "USER_INCORRECT_PASSWORD",
		203:  "USER_FROZEN",
		204:  "USER_INVALID_ID",
		205:  "USER_ALREADY_EXISTS",
		206:  "USER_EMAIL_UNVERIFIED",
		207:  "USER_PHONE_UNVERIFIED",
		208:  "USER_ACCOUNT_LOCKED",
		209:  "USER_TOO_MANY_LOGIN_ATTEMPTS",
		210:  "USER_PASSWORD_EXPIRED",
		211:  "USER_MUST_RESET_PASSWORD",
		212:  "USER_DISABLED",
		213:  "USER_REGISTRATION_DISABLED",
		214:  "USER_INVALID_EMAIL_FORMAT",
		215:  "USER_INVALID_PHONE_FORMAT",
		216:  "USER_SOCIAL_LOGIN_FAILED",
		300:  "ROLE_NOT_FOUND",
		301:  "ROLE_INVALID_ID",
		302:  "ROLE_ALREADY_EXISTS",
		303:  "ROLE_CANNOT_DELETE_BUILTIN",
		304:  "ROLE_NAME_CANNOT_BE_EMPTY",
		305:  "ROLE_DESCRIPTION_CANNOT_BE_EMPTY",
		306:  "ROLE_PERMISSION_INVALID",
		400:  "POST_NOT_FOUND",
		401:  "POST_INVALID_ID",
		402:  "POST_ALREADY_EXISTS",
		403:  "POST_NAME_CANNOT_BE_EMPTY",
		404:  "POST_DESCRIPTION_CANNOT_BE_EMPTY",
		500:  "MENU_NOT_FOUND",
		501:  "MENU_INVALID_ID",
		502:  "MENU_ALREADY_EXISTS",
		503:  "MENU_NAME_CANNOT_BE_EMPTY",
		504:  "MENU_PATH_CANNOT_BE_EMPTY",
		505:  "MENU_COMPONENT_CANNOT_BE_EMPTY",
		506:  "MENU_CANNOT_DELETE_WITH_CHILDREN",
		600:  "DEPT_NOT_FOUND",
		601:  "DEPT_INVALID_ID",
		602:  "DEPT_ALREADY_EXISTS",
		603:  "DEPT_NAME_CANNOT_BE_EMPTY",
		604:  "DEPT_CANNOT_DELETE_WITH_CHILDREN",
		605:  "DEPT_CANNOT_DELETE_WITH_USERS",
		700:  "DB_CONNECTION_ERROR",
		701:  "DB_QUERY_ERROR",
		702:  "DB_INSERT_ERROR",
		703:  "DB_UPDATE_ERROR",
		704:  "DB_DELETE_ERROR",
		705:  "DB_TRANSACTION_ERROR",
		706:  "DATA_VALIDATION_ERROR",
		800:  "CACHE_CONNECTION_ERROR",
		801:  "CACHE_GET_ERROR",
		802:  "CACHE_SET_ERROR",
		803:  "CACHE_DELETE_ERROR",
		900:  "FILE_READ_ERROR",
		901:  "FILE_WRITE_ERROR",
		902:  "FILE_DELETE_ERROR",
		903:  "FILE_NOT_FOUND",
		904:  "FILE_SIZE_EXCEEDED",
		905:  "FILE_FORMAT_NOT_SUPPORTED",
		1000: "MQ_CONNECTION_ERROR",
		1001: "MQ_SEND_ERROR",
		1002: "MQ_RECEIVE_ERROR",
		1100: "THIRD_PARTY_SERVICE_ERROR",
		1101: "THIRD_PARTY_TIMEOUT",
		1102: "THIRD_PARTY_UNAUTHORIZED",
	}
	ErrorReason_value = map[string]int32{
		"RESERVED_DEFAULT":                 0,
		"BAD_REQUEST":                      1,
		"NOT_LOGGED_IN":                    2,
		"ACCESS_FORBIDDEN":                 3,
		"RESOURCE_NOT_FOUND":               4,
		"METHOD_NOT_ALLOWED":               5,
		"REQUEST_TIMEOUT":                  6,
		"INTERNAL_SERVER_ERROR":            7,
		"NOT_IMPLEMENTED":                  8,
		"NETWORK_ERROR":                    9,
		"SERVICE_UNAVAILABLE":              10,
		"NETWORK_TIMEOUT":                  11,
		"REQUEST_NOT_SUPPORT":              12,
		"AUTH_TOKEN_EXPIRED":               100,
		"AUTH_INVALID_TOKEN":               101,
		"AUTH_TOKEN_NOT_EXIST":             102,
		"AUTH_FAILED":                      103,
		"AUTHORIZATION_FAILED":             104,
		"PERMISSION_DENIED":                105,
		"SESSION_EXPIRED":                  106,
		"ACCOUNT_LOGGED_IN_ELSEWHERE":      107,
		"USER_NOT_FOUND":                   200,
		"USER_NOT_EXIST":                   201,
		"USER_INCORRECT_PASSWORD":          202,
		"USER_FROZEN":                      203,
		"USER_INVALID_ID":                  204,
		"USER_ALREADY_EXISTS":              205,
		"USER_EMAIL_UNVERIFIED":            206,
		"USER_PHONE_UNVERIFIED":            207,
		"USER_ACCOUNT_LOCKED":              208,
		"USER_TOO_MANY_LOGIN_ATTEMPTS":     209,
		"USER_PASSWORD_EXPIRED":            210,
		"USER_MUST_RESET_PASSWORD":         211,
		"USER_DISABLED":                    212,
		"USER_REGISTRATION_DISABLED":       213,
		"USER_INVALID_EMAIL_FORMAT":        214,
		"USER_INVALID_PHONE_FORMAT":        215,
		"USER_SOCIAL_LOGIN_FAILED":         216,
		"ROLE_NOT_FOUND":                   300,
		"ROLE_INVALID_ID":                  301,
		"ROLE_ALREADY_EXISTS":              302,
		"ROLE_CANNOT_DELETE_BUILTIN":       303,
		"ROLE_NAME_CANNOT_BE_EMPTY":        304,
		"ROLE_DESCRIPTION_CANNOT_BE_EMPTY": 305,
		"ROLE_PERMISSION_INVALID":          306,
		"POST_NOT_FOUND":                   400,
		"POST_INVALID_ID":                  401,
		"POST_ALREADY_EXISTS":              402,
		"POST_NAME_CANNOT_BE_EMPTY":        403,
		"POST_DESCRIPTION_CANNOT_BE_EMPTY": 404,
		"MENU_NOT_FOUND":                   500,
		"MENU_INVALID_ID":                  501,
		"MENU_ALREADY_EXISTS":              502,
		"MENU_NAME_CANNOT_BE_EMPTY":        503,
		"MENU_PATH_CANNOT_BE_EMPTY":        504,
		"MENU_COMPONENT_CANNOT_BE_EMPTY":   505,
		"MENU_CANNOT_DELETE_WITH_CHILDREN": 506,
		"DEPT_NOT_FOUND":                   600,
		"DEPT_INVALID_ID":                  601,
		"DEPT_ALREADY_EXISTS":              602,
		"DEPT_NAME_CANNOT_BE_EMPTY":        603,
		"DEPT_CANNOT_DELETE_WITH_CHILDREN": 604,
		"DEPT_CANNOT_DELETE_WITH_USERS":    605,
		"DB_CONNECTION_ERROR":              700,
		"DB_QUERY_ERROR":                   701,
		"DB_INSERT_ERROR":                  702,
		"DB_UPDATE_ERROR":                  703,
		"DB_DELETE_ERROR":                  704,
		"DB_TRANSACTION_ERROR":             705,
		"DATA_VALIDATION_ERROR":            706,
		"CACHE_CONNECTION_ERROR":           800,
		"CACHE_GET_ERROR":                  801,
		"CACHE_SET_ERROR":                  802,
		"CACHE_DELETE_ERROR":               803,
		"FILE_READ_ERROR":                  900,
		"FILE_WRITE_ERROR":                 901,
		"FILE_DELETE_ERROR":                902,
		"FILE_NOT_FOUND":                   903,
		"FILE_SIZE_EXCEEDED":               904,
		"FILE_FORMAT_NOT_SUPPORTED":        905,
		"MQ_CONNECTION_ERROR":              1000,
		"MQ_SEND_ERROR":                    1001,
		"MQ_RECEIVE_ERROR":                 1002,
		"THIRD_PARTY_SERVICE_ERROR":        1100,
		"THIRD_PARTY_TIMEOUT":              1101,
		"THIRD_PARTY_UNAUTHORIZED":         1102,
	}
)

func (x ErrorReason) Enum() *ErrorReason {
	p := new(ErrorReason)
	*p = x
	return p
}

func (x ErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_avmc_admin_v1_error_reason_proto_enumTypes[0].Descriptor()
}

func (ErrorReason) Type() protoreflect.EnumType {
	return &file_avmc_admin_v1_error_reason_proto_enumTypes[0]
}

func (x ErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorReason.Descriptor instead.
func (ErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_avmc_admin_v1_error_reason_proto_rawDescGZIP(), []int{0}
}

var File_avmc_admin_v1_error_reason_proto protoreflect.FileDescriptor

var file_avmc_admin_v1_error_reason_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x61, 0x76, 0x6d, 0x63, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x1a, 0x13, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xd9, 0x15, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x1a, 0x04, 0xa8, 0x45,
	0xf4, 0x03, 0x12, 0x15, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x17, 0x0a, 0x0d, 0x4e, 0x4f, 0x54,
	0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x02, 0x1a, 0x04, 0xa8, 0x45,
	0x91, 0x03, 0x12, 0x1a, 0x0a, 0x10, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x4f, 0x52,
	0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x03, 0x1a, 0x04, 0xa8, 0x45, 0x93, 0x03, 0x12, 0x1c,
	0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x1a, 0x04, 0xa8, 0x45, 0x94, 0x03, 0x12, 0x1c, 0x0a, 0x12,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57,
	0x45, 0x44, 0x10, 0x05, 0x1a, 0x04, 0xa8, 0x45, 0x95, 0x03, 0x12, 0x19, 0x0a, 0x0f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x06, 0x1a,
	0x04, 0xa8, 0x45, 0x98, 0x03, 0x12, 0x1f, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07,
	0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x19, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4d,
	0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x08, 0x1a, 0x04, 0xa8, 0x45, 0xf5,
	0x03, 0x12, 0x17, 0x0a, 0x0d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x09, 0x1a, 0x04, 0xa8, 0x45, 0xf6, 0x03, 0x12, 0x1d, 0x0a, 0x13, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x0a, 0x1a, 0x04, 0xa8, 0x45, 0xf7, 0x03, 0x12, 0x19, 0x0a, 0x0f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x0b, 0x1a, 0x04,
	0xa8, 0x45, 0xf8, 0x03, 0x12, 0x1d, 0x0a, 0x13, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0c, 0x1a, 0x04, 0xa8,
	0x45, 0xf9, 0x03, 0x12, 0x1c, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x64, 0x1a, 0x04, 0xa8, 0x45, 0x91,
	0x03, 0x12, 0x1c, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x65, 0x1a, 0x04, 0xa8, 0x45, 0x91, 0x03, 0x12,
	0x1e, 0x0a, 0x14, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x66, 0x1a, 0x04, 0xa8, 0x45, 0x91, 0x03, 0x12,
	0x15, 0x0a, 0x0b, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x67,
	0x1a, 0x04, 0xa8, 0x45, 0x91, 0x03, 0x12, 0x1e, 0x0a, 0x14, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x68,
	0x1a, 0x04, 0xa8, 0x45, 0x93, 0x03, 0x12, 0x1b, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x69, 0x1a, 0x04, 0xa8,
	0x45, 0x93, 0x03, 0x12, 0x19, 0x0a, 0x0f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x6a, 0x1a, 0x04, 0xa8, 0x45, 0x91, 0x03, 0x12, 0x25,
	0x0a, 0x1b, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x4c, 0x53, 0x45, 0x57, 0x48, 0x45, 0x52, 0x45, 0x10, 0x6b, 0x1a,
	0x04, 0xa8, 0x45, 0x91, 0x03, 0x12, 0x19, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xc8, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x94, 0x03,
	0x12, 0x19, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x10, 0xc9, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x94, 0x03, 0x12, 0x22, 0x0a, 0x17, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x41,
	0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0xca, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12,
	0x16, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10, 0xcb,
	0x01, 0x1a, 0x04, 0xa8, 0x45, 0x93, 0x03, 0x12, 0x1a, 0x0a, 0x0f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xcc, 0x01, 0x1a, 0x04, 0xa8,
	0x45, 0x90, 0x03, 0x12, 0x1e, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xcd, 0x01, 0x1a, 0x04, 0xa8,
	0x45, 0x90, 0x03, 0x12, 0x20, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0xce, 0x01, 0x1a,
	0x04, 0xa8, 0x45, 0x93, 0x03, 0x12, 0x20, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x48,
	0x4f, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0xcf,
	0x01, 0x1a, 0x04, 0xa8, 0x45, 0x93, 0x03, 0x12, 0x1e, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0xd0,
	0x01, 0x1a, 0x04, 0xa8, 0x45, 0x93, 0x03, 0x12, 0x27, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x41,
	0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x53, 0x10, 0xd1, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x93, 0x03,
	0x12, 0x20, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52,
	0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0xd2, 0x01, 0x1a, 0x04, 0xa8, 0x45,
	0x93, 0x03, 0x12, 0x23, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0xd3,
	0x01, 0x1a, 0x04, 0xa8, 0x45, 0x93, 0x03, 0x12, 0x18, 0x0a, 0x0d, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0xd4, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x93,
	0x03, 0x12, 0x25, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0xd5, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x93, 0x03, 0x12, 0x24, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0xd6, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x24,
	0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0xd7, 0x01, 0x1a, 0x04,
	0xa8, 0x45, 0x90, 0x03, 0x12, 0x23, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x43,
	0x49, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0xd8, 0x01, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x19, 0x0a, 0x0e, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xac, 0x02, 0x1a, 0x04,
	0xa8, 0x45, 0x94, 0x03, 0x12, 0x1a, 0x0a, 0x0f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xad, 0x02, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03,
	0x12, 0x1e, 0x0a, 0x13, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xae, 0x02, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03,
	0x12, 0x25, 0x0a, 0x1a, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x10, 0xaf,
	0x02, 0x1a, 0x04, 0xa8, 0x45, 0x93, 0x03, 0x12, 0x24, 0x0a, 0x19, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x45,
	0x4d, 0x50, 0x54, 0x59, 0x10, 0xb0, 0x02, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x2b, 0x0a,
	0x20, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54,
	0x59, 0x10, 0xb1, 0x02, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x22, 0x0a, 0x17, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xb2, 0x02, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x19,
	0x0a, 0x0e, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x90, 0x03, 0x1a, 0x04, 0xa8, 0x45, 0x94, 0x03, 0x12, 0x1a, 0x0a, 0x0f, 0x50, 0x4f, 0x53,
	0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x91, 0x03, 0x1a,
	0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1e, 0x0a, 0x13, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x92, 0x03, 0x1a,
	0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x24, 0x0a, 0x19, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x45, 0x4d, 0x50,
	0x54, 0x59, 0x10, 0x93, 0x03, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x2b, 0x0a, 0x20, 0x50,
	0x4f, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10,
	0x94, 0x03, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x19, 0x0a, 0x0e, 0x4d, 0x45, 0x4e, 0x55,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xf4, 0x03, 0x1a, 0x04, 0xa8,
	0x45, 0x94, 0x03, 0x12, 0x1a, 0x0a, 0x0f, 0x4d, 0x45, 0x4e, 0x55, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xf5, 0x03, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12,
	0x1e, 0x0a, 0x13, 0x4d, 0x45, 0x4e, 0x55, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xf6, 0x03, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12,
	0x24, 0x0a, 0x19, 0x4d, 0x45, 0x4e, 0x55, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x41, 0x4e,
	0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0xf7, 0x03, 0x1a,
	0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x24, 0x0a, 0x19, 0x4d, 0x45, 0x4e, 0x55, 0x5f, 0x50, 0x41,
	0x54, 0x48, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x45, 0x4d, 0x50,
	0x54, 0x59, 0x10, 0xf8, 0x03, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x29, 0x0a, 0x1e, 0x4d,
	0x45, 0x4e, 0x55, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41,
	0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0xf9, 0x03,
	0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x2b, 0x0a, 0x20, 0x4d, 0x45, 0x4e, 0x55, 0x5f, 0x43,
	0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x52, 0x45, 0x4e, 0x10, 0xfa, 0x03, 0x1a, 0x04, 0xa8,
	0x45, 0x93, 0x03, 0x12, 0x19, 0x0a, 0x0e, 0x44, 0x45, 0x50, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xd8, 0x04, 0x1a, 0x04, 0xa8, 0x45, 0x94, 0x03, 0x12, 0x1a,
	0x0a, 0x0f, 0x44, 0x45, 0x50, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49,
	0x44, 0x10, 0xd9, 0x04, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1e, 0x0a, 0x13, 0x44, 0x45,
	0x50, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0xda, 0x04, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x24, 0x0a, 0x19, 0x44, 0x45,
	0x50, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x42,
	0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0xdb, 0x04, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03,
	0x12, 0x2b, 0x0a, 0x20, 0x44, 0x45, 0x50, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x49, 0x4c,
	0x44, 0x52, 0x45, 0x4e, 0x10, 0xdc, 0x04, 0x1a, 0x04, 0xa8, 0x45, 0x93, 0x03, 0x12, 0x28, 0x0a,
	0x1d, 0x44, 0x45, 0x50, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x10, 0xdd,
	0x04, 0x1a, 0x04, 0xa8, 0x45, 0x93, 0x03, 0x12, 0x1e, 0x0a, 0x13, 0x44, 0x42, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xbc,
	0x05, 0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x19, 0x0a, 0x0e, 0x44, 0x42, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xbd, 0x05, 0x1a, 0x04, 0xa8, 0x45,
	0xf4, 0x03, 0x12, 0x1a, 0x0a, 0x0f, 0x44, 0x42, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xbe, 0x05, 0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x1a,
	0x0a, 0x0f, 0x44, 0x42, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0xbf, 0x05, 0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x1a, 0x0a, 0x0f, 0x44, 0x42,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xc0, 0x05,
	0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x1f, 0x0a, 0x14, 0x44, 0x42, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xc1,
	0x05, 0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x20, 0x0a, 0x15, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0xc2, 0x05, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x21, 0x0a, 0x16, 0x43, 0x41, 0x43,
	0x48, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0xa0, 0x06, 0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x1a, 0x0a, 0x0f,
	0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0xa1, 0x06, 0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x1a, 0x0a, 0x0f, 0x43, 0x41, 0x43, 0x48,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa2, 0x06, 0x1a, 0x04,
	0xa8, 0x45, 0xf4, 0x03, 0x12, 0x1d, 0x0a, 0x12, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa3, 0x06, 0x1a, 0x04, 0xa8,
	0x45, 0xf4, 0x03, 0x12, 0x1a, 0x0a, 0x0f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x84, 0x07, 0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12,
	0x1b, 0x0a, 0x10, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x85, 0x07, 0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x1c, 0x0a, 0x11,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x86, 0x07, 0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x19, 0x0a, 0x0e, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x87, 0x07, 0x1a,
	0x04, 0xa8, 0x45, 0x94, 0x03, 0x12, 0x1d, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x49,
	0x5a, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x88, 0x07, 0x1a, 0x04,
	0xa8, 0x45, 0x90, 0x03, 0x12, 0x24, 0x0a, 0x19, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x89, 0x07, 0x1a, 0x04, 0xa8, 0x45, 0x90, 0x03, 0x12, 0x1e, 0x0a, 0x13, 0x4d, 0x51,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0xe8, 0x07, 0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x18, 0x0a, 0x0d, 0x4d, 0x51,
	0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xe9, 0x07, 0x1a, 0x04,
	0xa8, 0x45, 0xf4, 0x03, 0x12, 0x1b, 0x0a, 0x10, 0x4d, 0x51, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xea, 0x07, 0x1a, 0x04, 0xa8, 0x45, 0xf4,
	0x03, 0x12, 0x24, 0x0a, 0x19, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xcc,
	0x08, 0x1a, 0x04, 0xa8, 0x45, 0xf4, 0x03, 0x12, 0x1e, 0x0a, 0x13, 0x54, 0x48, 0x49, 0x52, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0xcd,
	0x08, 0x1a, 0x04, 0xa8, 0x45, 0xf8, 0x03, 0x12, 0x23, 0x0a, 0x18, 0x54, 0x48, 0x49, 0x52, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0xce, 0x08, 0x1a, 0x04, 0xa8, 0x45, 0x91, 0x03, 0x1a, 0x04, 0xa0, 0x45,
	0xf4, 0x03, 0x42, 0xa1, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x76, 0x6d, 0x63, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x76, 0x6d, 0x63, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x3b,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x41, 0x58, 0xaa, 0x02, 0x0d, 0x41, 0x76, 0x6d, 0x63, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x41, 0x76, 0x6d, 0x63, 0x5c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x41, 0x76, 0x6d, 0x63, 0x5c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x41, 0x76, 0x6d, 0x63, 0x3a, 0x3a, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_avmc_admin_v1_error_reason_proto_rawDescOnce sync.Once
	file_avmc_admin_v1_error_reason_proto_rawDescData []byte
)

func file_avmc_admin_v1_error_reason_proto_rawDescGZIP() []byte {
	file_avmc_admin_v1_error_reason_proto_rawDescOnce.Do(func() {
		file_avmc_admin_v1_error_reason_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_avmc_admin_v1_error_reason_proto_rawDesc), len(file_avmc_admin_v1_error_reason_proto_rawDesc)))
	})
	return file_avmc_admin_v1_error_reason_proto_rawDescData
}

var file_avmc_admin_v1_error_reason_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_avmc_admin_v1_error_reason_proto_goTypes = []any{
	(ErrorReason)(0), // 0: avmc.admin.v1.ErrorReason
}
var file_avmc_admin_v1_error_reason_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_avmc_admin_v1_error_reason_proto_init() }
func file_avmc_admin_v1_error_reason_proto_init() {
	if File_avmc_admin_v1_error_reason_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_avmc_admin_v1_error_reason_proto_rawDesc), len(file_avmc_admin_v1_error_reason_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_avmc_admin_v1_error_reason_proto_goTypes,
		DependencyIndexes: file_avmc_admin_v1_error_reason_proto_depIdxs,
		EnumInfos:         file_avmc_admin_v1_error_reason_proto_enumTypes,
	}.Build()
	File_avmc_admin_v1_error_reason_proto = out.File
	file_avmc_admin_v1_error_reason_proto_goTypes = nil
	file_avmc_admin_v1_error_reason_proto_depIdxs = nil
}
