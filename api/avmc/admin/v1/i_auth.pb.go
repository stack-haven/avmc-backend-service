// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: avmc/admin/v1/i_auth.proto

package v1

import (
	v1 "backend-service/api/core/service/v1"
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 授权类型
type GrandType int32

const (
	GrandType_GRAND_TYPE_UNSPECIFIED GrandType = 0 // 未指定
	GrandType_GRAND_TYPE_PASSWORD    GrandType = 1 // 密码
	GrandType_GRAND_TYPE_CODE        GrandType = 2 // 验证码
)

// Enum value maps for GrandType.
var (
	GrandType_name = map[int32]string{
		0: "GRAND_TYPE_UNSPECIFIED",
		1: "GRAND_TYPE_PASSWORD",
		2: "GRAND_TYPE_CODE",
	}
	GrandType_value = map[string]int32{
		"GRAND_TYPE_UNSPECIFIED": 0,
		"GRAND_TYPE_PASSWORD":    1,
		"GRAND_TYPE_CODE":        2,
	}
)

func (x GrandType) Enum() *GrandType {
	p := new(GrandType)
	*p = x
	return p
}

func (x GrandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrandType) Descriptor() protoreflect.EnumDescriptor {
	return file_avmc_admin_v1_i_auth_proto_enumTypes[0].Descriptor()
}

func (GrandType) Type() protoreflect.EnumType {
	return &file_avmc_admin_v1_i_auth_proto_enumTypes[0]
}

func (x GrandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrandType.Descriptor instead.
func (GrandType) EnumDescriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{0}
}

// 徽标类型
type BadgeType int32

const (
	// 未指定
	BadgeType_BADGE_TYPE_UNSPECIFIED BadgeType = 0
	// 点类型徽标
	BadgeType_BADGE_TYPE_DOT BadgeType = 1
	// 普通类型徽标
	BadgeType_BADGE_TYPE_NORMAL BadgeType = 2
)

// Enum value maps for BadgeType.
var (
	BadgeType_name = map[int32]string{
		0: "BADGE_TYPE_UNSPECIFIED",
		1: "BADGE_TYPE_DOT",
		2: "BADGE_TYPE_NORMAL",
	}
	BadgeType_value = map[string]int32{
		"BADGE_TYPE_UNSPECIFIED": 0,
		"BADGE_TYPE_DOT":         1,
		"BADGE_TYPE_NORMAL":      2,
	}
)

func (x BadgeType) Enum() *BadgeType {
	p := new(BadgeType)
	*p = x
	return p
}

func (x BadgeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BadgeType) Descriptor() protoreflect.EnumDescriptor {
	return file_avmc_admin_v1_i_auth_proto_enumTypes[1].Descriptor()
}

func (BadgeType) Type() protoreflect.EnumType {
	return &file_avmc_admin_v1_i_auth_proto_enumTypes[1]
}

func (x BadgeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BadgeType.Descriptor instead.
func (BadgeType) EnumDescriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{1}
}

// 徽标颜色
type BadgeVariants int32

const (
	// 未指定
	BadgeVariants_BADGE_VARIANTS_UNSPECIFIED BadgeVariants = 0
	// 默认颜色
	BadgeVariants_BADGE_VARIANTS_DEFAULT BadgeVariants = 1
	// 破坏性颜色
	BadgeVariants_BADGE_VARIANTS_DESTRUCTIVE BadgeVariants = 2
	// 主要颜色
	BadgeVariants_BADGE_VARIANTS_PRIMARY BadgeVariants = 3
	// 成功颜色
	BadgeVariants_BADGE_VARIANTS_SUCCESS BadgeVariants = 4
	// 警告颜色
	BadgeVariants_BADGE_VARIANTS_WARNING BadgeVariants = 5
)

// Enum value maps for BadgeVariants.
var (
	BadgeVariants_name = map[int32]string{
		0: "BADGE_VARIANTS_UNSPECIFIED",
		1: "BADGE_VARIANTS_DEFAULT",
		2: "BADGE_VARIANTS_DESTRUCTIVE",
		3: "BADGE_VARIANTS_PRIMARY",
		4: "BADGE_VARIANTS_SUCCESS",
		5: "BADGE_VARIANTS_WARNING",
	}
	BadgeVariants_value = map[string]int32{
		"BADGE_VARIANTS_UNSPECIFIED": 0,
		"BADGE_VARIANTS_DEFAULT":     1,
		"BADGE_VARIANTS_DESTRUCTIVE": 2,
		"BADGE_VARIANTS_PRIMARY":     3,
		"BADGE_VARIANTS_SUCCESS":     4,
		"BADGE_VARIANTS_WARNING":     5,
	}
)

func (x BadgeVariants) Enum() *BadgeVariants {
	p := new(BadgeVariants)
	*p = x
	return p
}

func (x BadgeVariants) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BadgeVariants) Descriptor() protoreflect.EnumDescriptor {
	return file_avmc_admin_v1_i_auth_proto_enumTypes[2].Descriptor()
}

func (BadgeVariants) Type() protoreflect.EnumType {
	return &file_avmc_admin_v1_i_auth_proto_enumTypes[2]
}

func (x BadgeVariants) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BadgeVariants.Descriptor instead.
func (BadgeVariants) EnumDescriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{2}
}

type Auth struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`                  // 认证名称
	UserId        uint32                 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 用户ID
	DomainId      uint32                 `protobuf:"varint,3,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"` // 域ID
	Roles         []string               `protobuf:"bytes,4,rep,name=roles,proto3" json:"roles,omitempty"`                        // 角色
	Permissions   []string               `protobuf:"bytes,5,rep,name=permissions,proto3" json:"permissions,omitempty"`            // 权限
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Auth) Reset() {
	*x = Auth{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth) ProtoMessage() {}

func (x *Auth) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth.ProtoReflect.Descriptor instead.
func (*Auth) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{0}
}

func (x *Auth) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Auth) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Auth) GetDomainId() uint32 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *Auth) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Auth) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// 登录密码
type LoginPassword struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"` // 用户名
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"` // 密码
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginPassword) Reset() {
	*x = LoginPassword{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginPassword) ProtoMessage() {}

func (x *LoginPassword) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginPassword.ProtoReflect.Descriptor instead.
func (*LoginPassword) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{1}
}

func (x *LoginPassword) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginPassword) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// 登录验证码
type LoginCode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Phone         string                 `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"` // 手机号
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`   // 验证码
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginCode) Reset() {
	*x = LoginCode{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginCode) ProtoMessage() {}

func (x *LoginCode) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginCode.ProtoReflect.Descriptor instead.
func (*LoginCode) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{2}
}

func (x *LoginCode) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *LoginCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// 用户后台登陆 - 请求
type LoginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Password      *LoginPassword         `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	Code          *LoginCode             `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	DomainId      *uint32                `protobuf:"varint,3,opt,name=domain_id,json=domainId,proto3,oneof" json:"domain_id,omitempty"`                                 // 域ID
	GrandType     *GrandType             `protobuf:"varint,4,opt,name=grand_type,json=grandType,proto3,enum=avmc.admin.v1.GrandType,oneof" json:"grand_type,omitempty"` // 授权类型，一直为：password
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{3}
}

func (x *LoginRequest) GetPassword() *LoginPassword {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *LoginRequest) GetCode() *LoginCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *LoginRequest) GetDomainId() uint32 {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return 0
}

func (x *LoginRequest) GetGrandType() GrandType {
	if x != nil && x.GrandType != nil {
		return *x.GrandType
	}
	return GrandType_GRAND_TYPE_UNSPECIFIED
}

// 用户后台登陆 - 回应
type LoginResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                        // 用户ID
	Name          *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`                               // 用户名
	TokenType     *string                `protobuf:"bytes,3,opt,name=token_type,json=tokenType,proto3,oneof" json:"token_type,omitempty"`    // 令牌类型
	AccessToken   string                 `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`    // 访问令牌
	RefreshToken  string                 `protobuf:"bytes,5,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"` // 刷新令牌
	ExpiresIn     *string                `protobuf:"bytes,6,opt,name=expires_in,json=expiresIn,proto3,oneof" json:"expires_in,omitempty"`    // 访问令牌过期时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{4}
}

func (x *LoginResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LoginResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *LoginResponse) GetTokenType() string {
	if x != nil && x.TokenType != nil {
		return *x.TokenType
	}
	return ""
}

func (x *LoginResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *LoginResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *LoginResponse) GetExpiresIn() string {
	if x != nil && x.ExpiresIn != nil {
		return *x.ExpiresIn
	}
	return ""
}

// 请求 - 刷新令牌
type RefreshTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RefreshToken  string                 `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"` // 刷新令牌
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshTokenRequest) Reset() {
	*x = RefreshTokenRequest{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenRequest) ProtoMessage() {}

func (x *RefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*RefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{5}
}

func (x *RefreshTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

// 回应 - 刷新令牌
type RefreshTokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessToken   string                 `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`    // 新的访问令牌
	RefreshToken  string                 `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"` // 新的刷新令牌
	ExpiresIn     *string                `protobuf:"bytes,3,opt,name=expires_in,json=expiresIn,proto3,oneof" json:"expires_in,omitempty"`    // 访问令牌过期时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshTokenResponse) Reset() {
	*x = RefreshTokenResponse{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenResponse) ProtoMessage() {}

func (x *RefreshTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenResponse.ProtoReflect.Descriptor instead.
func (*RefreshTokenResponse) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{6}
}

func (x *RefreshTokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *RefreshTokenResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *RefreshTokenResponse) GetExpiresIn() string {
	if x != nil && x.ExpiresIn != nil {
		return *x.ExpiresIn
	}
	return ""
}

// 用户后台登出 - 请求
type LogoutRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoutRequest) Reset() {
	*x = LogoutRequest{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRequest) ProtoMessage() {}

func (x *LogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRequest.ProtoReflect.Descriptor instead.
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{7}
}

// 用户后台登出 - 回应
type LogoutResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoutResponse) Reset() {
	*x = LogoutResponse{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResponse) ProtoMessage() {}

func (x *LogoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResponse.ProtoReflect.Descriptor instead.
func (*LogoutResponse) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{8}
}

// 登录用户简介信息 - 请求
type ProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileRequest) Reset() {
	*x = ProfileRequest{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileRequest) ProtoMessage() {}

func (x *ProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileRequest.ProtoReflect.Descriptor instead.
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{9}
}

// 登录用户简介信息 - 回应
type ProfileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *v1.User               `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`               // 登录用户简介信息
	Role          *v1.Role               `protobuf:"bytes,2,opt,name=role,proto3,oneof" json:"role,omitempty"`         // 登录用户角色信息
	Roles         []string               `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`             // 登录用户角色列表信息
	Permissions   []string               `protobuf:"bytes,4,rep,name=permissions,proto3" json:"permissions,omitempty"` // 登录用户权限列表信息
	Menus         []string               `protobuf:"bytes,5,rep,name=menus,proto3" json:"menus,omitempty"`             // 登录用户菜单信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileResponse) Reset() {
	*x = ProfileResponse{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileResponse) ProtoMessage() {}

func (x *ProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileResponse.ProtoReflect.Descriptor instead.
func (*ProfileResponse) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{10}
}

func (x *ProfileResponse) GetUser() *v1.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ProfileResponse) GetRole() *v1.Role {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *ProfileResponse) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *ProfileResponse) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *ProfileResponse) GetMenus() []string {
	if x != nil {
		return x.Menus
	}
	return nil
}

// 登录用户Vben简介信息 - 请求
type VbenProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VbenProfileRequest) Reset() {
	*x = VbenProfileRequest{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VbenProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VbenProfileRequest) ProtoMessage() {}

func (x *VbenProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VbenProfileRequest.ProtoReflect.Descriptor instead.
func (*VbenProfileRequest) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{11}
}

// 登录用户Vben简介信息 - 回应
type VbenProfileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username      *string                `protobuf:"bytes,2,opt,name=username,proto3,oneof" json:"username,omitempty"`
	RealName      *string                `protobuf:"bytes,3,opt,name=real_name,json=realName,proto3,oneof" json:"real_name,omitempty"`
	Avatar        *string                `protobuf:"bytes,4,opt,name=avatar,proto3,oneof" json:"avatar,omitempty"`
	HomePath      *string                `protobuf:"bytes,5,opt,name=home_path,json=homePath,proto3,oneof" json:"home_path,omitempty"`
	Desc          *string                `protobuf:"bytes,6,opt,name=desc,proto3,oneof" json:"desc,omitempty"`
	Role          *v1.Role               `protobuf:"bytes,7,opt,name=role,proto3,oneof" json:"role,omitempty"` // 登录用户角色信息
	Roles         []string               `protobuf:"bytes,8,rep,name=roles,proto3" json:"roles,omitempty"`     // 登录用户角色列表信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VbenProfileResponse) Reset() {
	*x = VbenProfileResponse{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VbenProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VbenProfileResponse) ProtoMessage() {}

func (x *VbenProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VbenProfileResponse.ProtoReflect.Descriptor instead.
func (*VbenProfileResponse) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{12}
}

func (x *VbenProfileResponse) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *VbenProfileResponse) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *VbenProfileResponse) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *VbenProfileResponse) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *VbenProfileResponse) GetHomePath() string {
	if x != nil && x.HomePath != nil {
		return *x.HomePath
	}
	return ""
}

func (x *VbenProfileResponse) GetDesc() string {
	if x != nil && x.Desc != nil {
		return *x.Desc
	}
	return ""
}

func (x *VbenProfileResponse) GetRole() *v1.Role {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *VbenProfileResponse) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

// 登录用户权限码 - 请求
type CodesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodesRequest) Reset() {
	*x = CodesRequest{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodesRequest) ProtoMessage() {}

func (x *CodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodesRequest.ProtoReflect.Descriptor instead.
func (*CodesRequest) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{13}
}

// 登录用户权限码 - 回应
type CodesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Codes         []string               `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes,omitempty"` // 登录用户权限码
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodesResponse) Reset() {
	*x = CodesResponse{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodesResponse) ProtoMessage() {}

func (x *CodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodesResponse.ProtoReflect.Descriptor instead.
func (*CodesResponse) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{14}
}

func (x *CodesResponse) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

// 登录用户菜单 - 请求
type MenusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MenusRequest) Reset() {
	*x = MenusRequest{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenusRequest) ProtoMessage() {}

func (x *MenusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenusRequest.ProtoReflect.Descriptor instead.
func (*MenusRequest) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{15}
}

// 登录用户菜单 - 回应
type MenusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Routes        []*RouteResponse       `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MenusResponse) Reset() {
	*x = MenusResponse{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenusResponse) ProtoMessage() {}

func (x *MenusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenusResponse.ProtoReflect.Descriptor instead.
func (*MenusResponse) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{16}
}

func (x *MenusResponse) GetRoutes() []*RouteResponse {
	if x != nil {
		return x.Routes
	}
	return nil
}

type RouteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Redirect      *string                `protobuf:"bytes,3,opt,name=redirect,proto3,oneof" json:"redirect,omitempty"`
	Component     *string                `protobuf:"bytes,4,opt,name=component,proto3,oneof" json:"component,omitempty"`
	Meta          *MenuMetaResponse      `protobuf:"bytes,5,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
	Children      []*RouteResponse       `protobuf:"bytes,6,rep,name=children,proto3" json:"children,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteResponse) Reset() {
	*x = RouteResponse{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteResponse) ProtoMessage() {}

func (x *RouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteResponse.ProtoReflect.Descriptor instead.
func (*RouteResponse) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{17}
}

func (x *RouteResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouteResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RouteResponse) GetRedirect() string {
	if x != nil && x.Redirect != nil {
		return *x.Redirect
	}
	return ""
}

func (x *RouteResponse) GetComponent() string {
	if x != nil && x.Component != nil {
		return *x.Component
	}
	return ""
}

func (x *RouteResponse) GetMeta() *MenuMetaResponse {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *RouteResponse) GetChildren() []*RouteResponse {
	if x != nil {
		return x.Children
	}
	return nil
}

// 登录用户菜单元数据 - 回应
type MenuMetaResponse struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	ActiveIcon               *string                `protobuf:"bytes,1,opt,name=active_icon,json=activeIcon,proto3,oneof" json:"active_icon,omitempty"`                                                 // 激活图标（菜单）
	ActivePath               *string                `protobuf:"bytes,2,opt,name=active_path,json=activePath,proto3,oneof" json:"active_path,omitempty"`                                                 // 当前激活的菜单，有时候不想激活现有菜单，需要激活父级菜单时使用
	AffixTab                 *bool                  `protobuf:"varint,3,opt,name=affix_tab,json=affixTab,proto3,oneof" json:"affix_tab,omitempty"`                                                      // 是否固定标签页
	AffixTabOrder            *int32                 `protobuf:"varint,4,opt,name=affix_tab_order,json=affixTabOrder,proto3,oneof" json:"affix_tab_order,omitempty"`                                     // 固定标签页的顺序
	Authority                []string               `protobuf:"bytes,5,rep,name=authority,proto3" json:"authority,omitempty"`                                                                           // 需要特定的角色标识才可以访问
	Badge                    *string                `protobuf:"bytes,6,opt,name=badge,proto3,oneof" json:"badge,omitempty"`                                                                             // 徽标
	BadgeType                *string                `protobuf:"bytes,7,opt,name=badge_type,json=badgeType,proto3,oneof" json:"badge_type,omitempty"`                                                    // 徽标类型
	BadgeVariants            *string                `protobuf:"bytes,8,opt,name=badge_variants,json=badgeVariants,proto3,oneof" json:"badge_variants,omitempty"`                                        // 徽标颜色
	FullPathKey              *bool                  `protobuf:"varint,9,opt,name=full_path_key,json=fullPathKey,proto3,oneof" json:"full_path_key,omitempty"`                                           // 路由的完整路径作为key（默认true）
	HideChildrenInMenu       *bool                  `protobuf:"varint,10,opt,name=hide_children_in_menu,json=hideChildrenInMenu,proto3,oneof" json:"hide_children_in_menu,omitempty"`                   // 当前路由的子级在菜单中不展现
	HideInBreadcrumb         *bool                  `protobuf:"varint,11,opt,name=hide_in_breadcrumb,json=hideInBreadcrumb,proto3,oneof" json:"hide_in_breadcrumb,omitempty"`                           // 当前路由在面包屑中不展现
	HideInMenu               *bool                  `protobuf:"varint,12,opt,name=hide_in_menu,json=hideInMenu,proto3,oneof" json:"hide_in_menu,omitempty"`                                             // 当前路由在菜单中不展现
	HideInTab                *bool                  `protobuf:"varint,13,opt,name=hide_in_tab,json=hideInTab,proto3,oneof" json:"hide_in_tab,omitempty"`                                                // 当前路由在标签页不展现
	Icon                     *string                `protobuf:"bytes,14,opt,name=icon,proto3,oneof" json:"icon,omitempty"`                                                                              // 图标（菜单/tab）
	IframeSrc                *string                `protobuf:"bytes,15,opt,name=iframe_src,json=iframeSrc,proto3,oneof" json:"iframe_src,omitempty"`                                                   // iframe 地址
	IgnoreAccess             *bool                  `protobuf:"varint,16,opt,name=ignore_access,json=ignoreAccess,proto3,oneof" json:"ignore_access,omitempty"`                                         // 忽略权限，直接可以访问
	KeepAlive                *bool                  `protobuf:"varint,17,opt,name=keep_alive,json=keepAlive,proto3,oneof" json:"keep_alive,omitempty"`                                                  // 开启KeepAlive缓存
	Link                     *string                `protobuf:"bytes,18,opt,name=link,proto3,oneof" json:"link,omitempty"`                                                                              // 外链-跳转路径
	Loaded                   *bool                  `protobuf:"varint,19,opt,name=loaded,proto3,oneof" json:"loaded,omitempty"`                                                                         // 路由是否已经加载过
	MaxNumOfOpenTab          *int32                 `protobuf:"varint,20,opt,name=max_num_of_open_tab,json=maxNumOfOpenTab,proto3,oneof" json:"max_num_of_open_tab,omitempty"`                          // 标签页最大打开数量
	MenuVisibleWithForbidden *bool                  `protobuf:"varint,21,opt,name=menu_visible_with_forbidden,json=menuVisibleWithForbidden,proto3,oneof" json:"menu_visible_with_forbidden,omitempty"` // 菜单可以看到，但是访问会被重定向到403
	NoBasicLayout            *bool                  `protobuf:"varint,22,opt,name=no_basic_layout,json=noBasicLayout,proto3,oneof" json:"no_basic_layout,omitempty"`                                    // 当前路由不使用基础布局（仅在顶级生效）
	OpenInNewWindow          *bool                  `protobuf:"varint,23,opt,name=open_in_new_window,json=openInNewWindow,proto3,oneof" json:"open_in_new_window,omitempty"`                            // 在新窗口打开
	Order                    *int32                 `protobuf:"varint,24,opt,name=order,proto3,oneof" json:"order,omitempty"`                                                                           // 用于路由->菜单排序
	Query                    *string                `protobuf:"bytes,25,opt,name=query,proto3,oneof" json:"query,omitempty"`                                                                            // 菜单所携带的参数
	Title                    string                 `protobuf:"bytes,26,opt,name=title,proto3" json:"title,omitempty"`                                                                                  // 标题名称
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *MenuMetaResponse) Reset() {
	*x = MenuMetaResponse{}
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuMetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuMetaResponse) ProtoMessage() {}

func (x *MenuMetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_avmc_admin_v1_i_auth_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuMetaResponse.ProtoReflect.Descriptor instead.
func (*MenuMetaResponse) Descriptor() ([]byte, []int) {
	return file_avmc_admin_v1_i_auth_proto_rawDescGZIP(), []int{18}
}

func (x *MenuMetaResponse) GetActiveIcon() string {
	if x != nil && x.ActiveIcon != nil {
		return *x.ActiveIcon
	}
	return ""
}

func (x *MenuMetaResponse) GetActivePath() string {
	if x != nil && x.ActivePath != nil {
		return *x.ActivePath
	}
	return ""
}

func (x *MenuMetaResponse) GetAffixTab() bool {
	if x != nil && x.AffixTab != nil {
		return *x.AffixTab
	}
	return false
}

func (x *MenuMetaResponse) GetAffixTabOrder() int32 {
	if x != nil && x.AffixTabOrder != nil {
		return *x.AffixTabOrder
	}
	return 0
}

func (x *MenuMetaResponse) GetAuthority() []string {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *MenuMetaResponse) GetBadge() string {
	if x != nil && x.Badge != nil {
		return *x.Badge
	}
	return ""
}

func (x *MenuMetaResponse) GetBadgeType() string {
	if x != nil && x.BadgeType != nil {
		return *x.BadgeType
	}
	return ""
}

func (x *MenuMetaResponse) GetBadgeVariants() string {
	if x != nil && x.BadgeVariants != nil {
		return *x.BadgeVariants
	}
	return ""
}

func (x *MenuMetaResponse) GetFullPathKey() bool {
	if x != nil && x.FullPathKey != nil {
		return *x.FullPathKey
	}
	return false
}

func (x *MenuMetaResponse) GetHideChildrenInMenu() bool {
	if x != nil && x.HideChildrenInMenu != nil {
		return *x.HideChildrenInMenu
	}
	return false
}

func (x *MenuMetaResponse) GetHideInBreadcrumb() bool {
	if x != nil && x.HideInBreadcrumb != nil {
		return *x.HideInBreadcrumb
	}
	return false
}

func (x *MenuMetaResponse) GetHideInMenu() bool {
	if x != nil && x.HideInMenu != nil {
		return *x.HideInMenu
	}
	return false
}

func (x *MenuMetaResponse) GetHideInTab() bool {
	if x != nil && x.HideInTab != nil {
		return *x.HideInTab
	}
	return false
}

func (x *MenuMetaResponse) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *MenuMetaResponse) GetIframeSrc() string {
	if x != nil && x.IframeSrc != nil {
		return *x.IframeSrc
	}
	return ""
}

func (x *MenuMetaResponse) GetIgnoreAccess() bool {
	if x != nil && x.IgnoreAccess != nil {
		return *x.IgnoreAccess
	}
	return false
}

func (x *MenuMetaResponse) GetKeepAlive() bool {
	if x != nil && x.KeepAlive != nil {
		return *x.KeepAlive
	}
	return false
}

func (x *MenuMetaResponse) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *MenuMetaResponse) GetLoaded() bool {
	if x != nil && x.Loaded != nil {
		return *x.Loaded
	}
	return false
}

func (x *MenuMetaResponse) GetMaxNumOfOpenTab() int32 {
	if x != nil && x.MaxNumOfOpenTab != nil {
		return *x.MaxNumOfOpenTab
	}
	return 0
}

func (x *MenuMetaResponse) GetMenuVisibleWithForbidden() bool {
	if x != nil && x.MenuVisibleWithForbidden != nil {
		return *x.MenuVisibleWithForbidden
	}
	return false
}

func (x *MenuMetaResponse) GetNoBasicLayout() bool {
	if x != nil && x.NoBasicLayout != nil {
		return *x.NoBasicLayout
	}
	return false
}

func (x *MenuMetaResponse) GetOpenInNewWindow() bool {
	if x != nil && x.OpenInNewWindow != nil {
		return *x.OpenInNewWindow
	}
	return false
}

func (x *MenuMetaResponse) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *MenuMetaResponse) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *MenuMetaResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

var File_avmc_admin_v1_i_auth_proto protoreflect.FileDescriptor

var file_avmc_admin_v1_i_auth_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x61, 0x76, 0x6d, 0x63, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x76,
	0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x33,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xdd, 0x01, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba,
	0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xba, 0x47,
	0x0b, 0x92, 0x02, 0x08, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xba, 0x47, 0x08, 0x92, 0x02, 0x05, 0xe5,
	0x9f, 0x9f, 0x49, 0x44, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0xba,
	0x47, 0x09, 0x92, 0x02, 0x06, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0x52, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x47, 0x09, 0x92, 0x02, 0x06, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x47, 0x12, 0x92, 0x02, 0x0f, 0xe7, 0x99,
	0xbb, 0xe5, 0xbd, 0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x90, 0x8d, 0xba, 0x48, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x0a, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95,
	0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x06, 0x18, 0x19, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x75, 0x0a, 0x09, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x47, 0x12, 0x92, 0x02, 0x0f, 0xe7, 0x99, 0xbb,
	0xe5, 0xbd, 0x95, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xba, 0x48, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x0a, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x47, 0x12, 0x92,
	0x02, 0x0f, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0,
	0x81, 0xba, 0x48, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x0a, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xa2, 0x02, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x76, 0x6d, 0x63,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xba, 0x47,
	0x0f, 0x92, 0x02, 0x0c, 0xe7, 0xa7, 0x9f, 0xe6, 0x88, 0xb7, 0x2f, 0xe5, 0x9f, 0x9f, 0x49, 0x44,
	0xba, 0x48, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x76, 0x6d,
	0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe6, 0x8e, 0x88, 0xe6,
	0x9d, 0x83, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x48, 0x01, 0x52, 0x09, 0x67, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xec, 0x02, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x0e, 0xba, 0x47, 0x0b, 0x92, 0x02, 0x08, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xba, 0x47, 0x0c, 0x92, 0x02, 0x09, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe5, 0x90, 0x8d, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe4, 0xbb, 0xa4,
	0xe7, 0x89, 0x8c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x48, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4,
	0xe7, 0x89, 0x8c, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe5,
	0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba,
	0x47, 0x1b, 0x92, 0x02, 0x18, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89,
	0x8c, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x48, 0x02, 0x52,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x22, 0x4e, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0,
	0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe5, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0x92, 0x02, 0x12, 0xe6, 0x96, 0xb0, 0xe7, 0x9a,
	0x84, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x0d, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0x92, 0x02, 0x12, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0xe5,
	0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba,
	0x47, 0x1b, 0x92, 0x02, 0x18, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89,
	0x8c, 0xe8, 0xbf, 0x87, 0xe6, 0x9c, 0x9f, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x48, 0x00, 0x52,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x22, 0x0f, 0x0a, 0x0d,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x10, 0x0a,
	0x0e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x10, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xef, 0x02, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x1e, 0xba, 0x47, 0x1b, 0x92,
	0x02, 0x18, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0xae,
	0x80, 0xe4, 0xbb, 0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x4e, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x1e, 0xba, 0x47, 0x1b, 0x92, 0x02, 0x18, 0xe7, 0x99, 0xbb,
	0xe5, 0xbd, 0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x24, 0xba, 0x47, 0x21, 0x92, 0x02, 0x1e, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0b,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x24, 0xba, 0x47, 0x21, 0x92, 0x02, 0x1e, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe5, 0x88, 0x97, 0xe8, 0xa1,
	0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x47, 0x1b, 0x92, 0x02, 0x18, 0xe7, 0x99, 0xbb, 0xe5, 0xbd,
	0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0x52, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x56, 0x62, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x80, 0x04, 0x0a, 0x13, 0x56, 0x62,
	0x65, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0e, 0xba, 0x47, 0x0b, 0x92, 0x02, 0x08, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0x49, 0x44, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xba, 0x47,
	0x0c, 0x92, 0x02, 0x09, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x90, 0x8d, 0x48, 0x00, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe7, 0x9c, 0x9f, 0xe5, 0xae, 0x9e, 0xe5, 0xa7, 0x93,
	0xe5, 0x90, 0x8d, 0x48, 0x01, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xba, 0x47, 0x09, 0x92, 0x02, 0x06, 0xe5, 0xa4, 0xb4, 0xe5, 0x83, 0x8f,
	0x48, 0x02, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe9, 0xa6, 0x96, 0xe9, 0xa1, 0xb5, 0xe8, 0xb7,
	0xaf, 0xe5, 0xbe, 0x84, 0x48, 0x03, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xba, 0x47, 0x09, 0x92, 0x02, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x48,
	0x04, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42,
	0x1e, 0xba, 0x47, 0x1b, 0x92, 0x02, 0x18, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x48,
	0x05, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x24, 0xba, 0x47, 0x21, 0x92, 0x02,
	0x1e, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0xa7, 0x92,
	0xe8, 0x89, 0xb2, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x52,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x0e, 0x0a, 0x0c,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x0d,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x47,
	0x18, 0x92, 0x02, 0x15, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0xa0, 0x81, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0x0e, 0x0a, 0x0c, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x5f, 0x0a, 0x0d, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x18, 0xba, 0x47, 0x15, 0x92, 0x02, 0x12, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x93, 0x8d,
	0xe5, 0xba, 0x94, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x22, 0x94, 0x03, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02,
	0x0c, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x47, 0x12, 0x92, 0x02, 0x0f, 0xe9, 0x87, 0x8d,
	0xe5, 0xae, 0x9a, 0xe5, 0x90, 0x91, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x48, 0x00, 0x52, 0x08,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe7, 0xbb, 0x84, 0xe4,
	0xbb, 0xb6, 0x48, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x4f, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x15, 0xba, 0x47, 0x12, 0x92, 0x02, 0x0f, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe5,
	0x85, 0x83, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0x48, 0x02, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x15, 0xba, 0x47, 0x12, 0x92, 0x02, 0x0f, 0xe5, 0xad, 0x90, 0xe8, 0xb7,
	0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xc2, 0x13, 0x0a, 0x10, 0x4d, 0x65, 0x6e,
	0x75, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0xba, 0x47, 0x1b, 0x92, 0x02, 0x18, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb,
	0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xef, 0xbc, 0x88, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xef,
	0xbc, 0x89, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x89, 0x01, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x63, 0xba, 0x47, 0x60, 0x92, 0x02,
	0x5d, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0xe7, 0x9a, 0x84,
	0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x89, 0xe6, 0x97, 0xb6, 0xe5,
	0x80, 0x99, 0xe4, 0xb8, 0x8d, 0xe6, 0x83, 0xb3, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0xe7, 0x8e,
	0xb0, 0xe6, 0x9c, 0x89, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xef, 0xbc, 0x8c, 0xe9, 0x9c, 0x80,
	0xe8, 0xa6, 0x81, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0xe7, 0x88, 0xb6, 0xe7, 0xba, 0xa7, 0xe8,
	0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe6, 0x97, 0xb6, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x48, 0x01,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x09, 0x61, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x61, 0x62, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x1b, 0xba, 0x47, 0x18, 0x92, 0x02, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6,
	0xe5, 0x9b, 0xba, 0xe5, 0xae, 0x9a, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe9, 0xa1, 0xb5, 0x48,
	0x02, 0x52, 0x08, 0x61, 0x66, 0x66, 0x69, 0x78, 0x54, 0x61, 0x62, 0x88, 0x01, 0x01, 0x12, 0x4b,
	0x0a, 0x0f, 0x61, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1e, 0xba, 0x47, 0x1b, 0x92, 0x02, 0x18, 0xe5,
	0x9b, 0xba, 0xe5, 0xae, 0x9a, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe9, 0xa1, 0xb5, 0xe7, 0x9a,
	0x84, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0x48, 0x03, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69, 0x78,
	0x54, 0x61, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x30,
	0xba, 0x47, 0x2d, 0x92, 0x02, 0x2a, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0xe7, 0x89, 0xb9, 0xe5,
	0xae, 0x9a, 0xe7, 0x9a, 0x84, 0xe8, 0xa7, 0x92, 0xe8, 0x89, 0xb2, 0xe6, 0xa0, 0x87, 0xe8, 0xaf,
	0x86, 0xe6, 0x89, 0x8d, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae,
	0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x47, 0x09, 0x92,
	0x02, 0x06, 0xe5, 0xbe, 0xbd, 0xe6, 0xa0, 0x87, 0x48, 0x04, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0a, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xba, 0x47, 0x20, 0x92, 0x02, 0x1d,
	0xe5, 0xbe, 0xbd, 0xe6, 0xa0, 0x87, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x20, 0x27, 0x64, 0x6f,
	0x74, 0x27, 0x20, 0x7c, 0x20, 0x27, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x27, 0x48, 0x05, 0x52,
	0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x84, 0x01,
	0x0a, 0x0e, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0xba, 0x47, 0x55, 0x92, 0x02, 0x52, 0xe5, 0xbe,
	0xbd, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x9c, 0xe8, 0x89, 0xb2, 0x20, 0x7c, 0x20, 0x27, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x27, 0x7c, 0x20, 0x27, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x27, 0x7c, 0x20, 0x27, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x27,
	0x7c, 0x20, 0x27, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x27, 0x7c, 0x20, 0x27, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x27, 0x20, 0x7c, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
	0x48, 0x06, 0x52, 0x0d, 0x62, 0x61, 0x64, 0x67, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x0d, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x34, 0xba, 0x47, 0x31,
	0x92, 0x02, 0x2e, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe7, 0x9a, 0x84, 0xe5, 0xae, 0x8c, 0xe6,
	0x95, 0xb4, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0xe4, 0xbd, 0x9c, 0xe4, 0xb8, 0xba, 0x6b, 0x65,
	0x79, 0xef, 0xbc, 0x88, 0xe9, 0xbb, 0x98, 0xe8, 0xae, 0xa4, 0x74, 0x72, 0x75, 0x65, 0xef, 0xbc,
	0x89, 0x48, 0x07, 0x52, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x4b, 0x65, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x68, 0x0a, 0x15, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x30, 0xba, 0x47, 0x2d, 0x92, 0x02, 0x2a, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d,
	0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x90, 0xe7, 0xba, 0xa7, 0xe5,
	0x9c, 0xa8, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xad, 0xe4, 0xb8, 0x8d, 0xe5, 0xb1,
	0x95, 0xe7, 0x8e, 0xb0, 0x48, 0x08, 0x52, 0x12, 0x68, 0x69, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a,
	0x12, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x64, 0x63, 0x72,
	0x75, 0x6d, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2a, 0xba, 0x47, 0x27, 0x92, 0x02,
	0x24, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x9c, 0xa8,
	0xe9, 0x9d, 0xa2, 0xe5, 0x8c, 0x85, 0xe5, 0xb1, 0x91, 0xe4, 0xb8, 0xad, 0xe4, 0xb8, 0x8d, 0xe5,
	0xb1, 0x95, 0xe7, 0x8e, 0xb0, 0x48, 0x09, 0x52, 0x10, 0x68, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x42,
	0x72, 0x65, 0x61, 0x64, 0x63, 0x72, 0x75, 0x6d, 0x62, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0c,
	0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x27, 0xba, 0x47, 0x24, 0x92, 0x02, 0x21, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d,
	0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x9c, 0xa8, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe4,
	0xb8, 0xad, 0xe4, 0xb8, 0x8d, 0xe5, 0xb1, 0x95, 0xe7, 0x8e, 0xb0, 0x48, 0x0a, 0x52, 0x0a, 0x68,
	0x69, 0x64, 0x65, 0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0b,
	0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x27, 0xba, 0x47, 0x24, 0x92, 0x02, 0x21, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe8,
	0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x9c, 0xa8, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe9, 0xa1,
	0xb5, 0xe4, 0xb8, 0x8d, 0xe5, 0xb1, 0x95, 0xe7, 0x8e, 0xb0, 0x48, 0x0b, 0x52, 0x09, 0x68, 0x69,
	0x64, 0x65, 0x49, 0x6e, 0x54, 0x61, 0x62, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xba, 0x47, 0x19, 0x92, 0x02, 0x16,
	0xe5, 0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xef, 0xbc, 0x88, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0x2f,
	0x74, 0x61, 0x62, 0xef, 0xbc, 0x89, 0x48, 0x0c, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x0a, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x72, 0x63, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba, 0x47, 0x10, 0x92, 0x02, 0x0d, 0x69, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x20, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x48, 0x0d, 0x52, 0x09, 0x69, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x53, 0x72, 0x63, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0d, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x27, 0xba, 0x47, 0x24, 0x92, 0x02, 0x21, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe6,
	0x9d, 0x83, 0xe9, 0x99, 0x90, 0xef, 0xbc, 0x8c, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f,
	0xaf, 0xe4, 0xbb, 0xa5, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0x48, 0x0e, 0x52, 0x0c, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x1b, 0xba, 0x47, 0x18, 0x92, 0x02, 0x15, 0xe5, 0xbc, 0x80, 0xe5, 0x90, 0xaf, 0x4b,
	0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0xe7, 0xbc, 0x93, 0xe5, 0xad, 0x98, 0x48, 0x0f,
	0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x47,
	0x16, 0x92, 0x02, 0x13, 0xe5, 0xa4, 0x96, 0xe9, 0x93, 0xbe, 0x2d, 0xe8, 0xb7, 0xb3, 0xe8, 0xbd,
	0xac, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x48, 0x10, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x21, 0xba, 0x47, 0x1e, 0x92, 0x02, 0x1b, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1,
	0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb7, 0xb2, 0xe7, 0xbb, 0x8f, 0xe5, 0x8a, 0xa0, 0xe8,
	0xbd, 0xbd, 0xe8, 0xbf, 0x87, 0x48, 0x11, 0x52, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x54, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x21, 0xba, 0x47, 0x1e, 0x92, 0x02, 0x1b, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe9, 0xa1, 0xb5,
	0xe6, 0x9c, 0x80, 0xe5, 0xa4, 0xa7, 0xe6, 0x89, 0x93, 0xe5, 0xbc, 0x80, 0xe6, 0x95, 0xb0, 0xe9,
	0x87, 0x8f, 0x48, 0x12, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x4f, 0x70,
	0x65, 0x6e, 0x54, 0x61, 0x62, 0x88, 0x01, 0x01, 0x12, 0x80, 0x01, 0x0a, 0x1b, 0x6d, 0x65, 0x6e,
	0x75, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x66,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3c,
	0xba, 0x47, 0x39, 0x92, 0x02, 0x36, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe5, 0x8f, 0xaf, 0xe4,
	0xbb, 0xa5, 0xe7, 0x9c, 0x8b, 0xe5, 0x88, 0xb0, 0xef, 0xbc, 0x8c, 0xe4, 0xbd, 0x86, 0xe6, 0x98,
	0xaf, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbc, 0x9a, 0xe8, 0xa2, 0xab, 0xe9, 0x87, 0x8d,
	0xe5, 0xae, 0x9a, 0xe5, 0x90, 0x91, 0xe5, 0x88, 0xb0, 0x34, 0x30, 0x33, 0x48, 0x13, 0x52, 0x18,
	0x6d, 0x65, 0x6e, 0x75, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x6c, 0x0a, 0x0f, 0x6e,
	0x6f, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x3f, 0xba, 0x47, 0x3c, 0x92, 0x02, 0x39, 0xe5, 0xbd, 0x93, 0xe5,
	0x89, 0x8d, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe4, 0xb8, 0x8d, 0xe4, 0xbd, 0xbf, 0xe7, 0x94,
	0xa8, 0xe5, 0x9f, 0xba, 0xe7, 0xa1, 0x80, 0xe5, 0xb8, 0x83, 0xe5, 0xb1, 0x80, 0xef, 0xbc, 0x88,
	0xe4, 0xbb, 0x85, 0xe5, 0x9c, 0xa8, 0xe9, 0xa1, 0xb6, 0xe7, 0xba, 0xa7, 0xe7, 0x94, 0x9f, 0xe6,
	0x95, 0x88, 0xef, 0xbc, 0x89, 0x48, 0x14, 0x52, 0x0d, 0x6e, 0x6f, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x12, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0xba, 0x47, 0x15, 0x92, 0x02, 0x12, 0xe5, 0x9c, 0xa8,
	0xe6, 0x96, 0xb0, 0xe7, 0xaa, 0x97, 0xe5, 0x8f, 0xa3, 0xe6, 0x89, 0x93, 0xe5, 0xbc, 0x80, 0x48,
	0x15, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x4e, 0x65, 0x77, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x20, 0xba, 0x47, 0x1d, 0x92, 0x02, 0x1a, 0xe7, 0x94, 0xa8, 0xe4,
	0xba, 0x8e, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x2d, 0x3e, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95,
	0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x48, 0x16, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0xba, 0x47, 0x1b, 0x92, 0x02, 0x18, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe6,
	0x89, 0x80, 0xe6, 0x90, 0xba, 0xe5, 0xb8, 0xa6, 0xe7, 0x9a, 0x84, 0xe5, 0x8f, 0x82, 0xe6, 0x95,
	0xb0, 0x48, 0x17, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0x47,
	0x0f, 0x92, 0x02, 0x0c, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x98, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x66, 0x66, 0x69,
	0x78, 0x5f, 0x74, 0x61, 0x62, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x78, 0x5f,
	0x74, 0x61, 0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x61,
	0x64, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x68, 0x69, 0x64, 0x65,
	0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e,
	0x75, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x72,
	0x65, 0x61, 0x64, 0x63, 0x72, 0x75, 0x6d, 0x62, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x68, 0x69, 0x64,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x69,
	0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x72,
	0x63, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x42, 0x1e,
	0x0a, 0x1c, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x6e, 0x6f, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x6e,
	0x65, 0x77, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2a, 0x55, 0x0a,
	0x09, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x52,
	0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x41, 0x4e, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x47, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x10, 0x02, 0x2a, 0x52, 0x0a, 0x09, 0x42, 0x61, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x42, 0x41, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x54, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x41, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0xbf, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x64,
	0x67, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x41,
	0x44, 0x47, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41,
	0x44, 0x47, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x53, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x41, 0x44, 0x47, 0x45, 0x5f,
	0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x55, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41, 0x44, 0x47, 0x45, 0x5f,
	0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41, 0x44, 0x47, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x49,
	0x41, 0x4e, 0x54, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x1a,
	0x0a, 0x16, 0x42, 0x41, 0x44, 0x47, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x53,
	0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x32, 0xd1, 0x0c, 0x0a, 0x0b, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x0d, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x61,
	0x76, 0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x76, 0x6d, 0x63,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0xba, 0x47, 0x4e, 0x0a, 0x0c, 0xe8,
	0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x12, 0x12, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0x1a,
	0x2a, 0xe9, 0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x90, 0x8d,
	0xe5, 0x92, 0x8c, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe8,
	0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x3a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x1d, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0xc6, 0x01, 0x0a, 0x09, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x2e, 0x61, 0x76, 0x6d, 0x63, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x7e, 0xba, 0x47, 0x54, 0x0a, 0x0c, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81,
	0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x12, 0x15, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe9, 0xaa,
	0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0x1a, 0x2d, 0xe9,
	0x80, 0x9a, 0xe8, 0xbf, 0x87, 0xe6, 0x89, 0x8b, 0xe6, 0x9c, 0xba, 0xe5, 0x8f, 0xb7, 0xe5, 0x92,
	0x8c, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe7, 0xa0, 0x81, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95,
	0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x21, 0x3a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x19, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0xde, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x2e, 0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x76, 0x6d, 0x63, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01,
	0xba, 0x47, 0x5a, 0x0a, 0x0c, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a,
	0xa1, 0x12, 0x0c, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0x1a,
	0x2a, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4,
	0xe7, 0x89, 0x8c, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0xe8,
	0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0x5a, 0x10, 0x0a, 0x0e, 0x0a,
	0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x2d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xbb, 0x01, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12,
	0x1c, 0x2e, 0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0xba, 0x47,
	0x51, 0x0a, 0x0c, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x12,
	0x0c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0x99, 0xbb, 0xe5, 0x87, 0xba, 0x1a, 0x21, 0xe9,
	0x80, 0x80, 0xe5, 0x87, 0xba, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe5, 0xb9, 0xb6, 0xe5, 0xa4,
	0xb1, 0xe6, 0x95, 0x88, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c,
	0x5a, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x12, 0xbf, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d,
	0x2e, 0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0xba,
	0x47, 0x54, 0x0a, 0x0c, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1,
	0x12, 0x18, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0xae,
	0x80, 0xe4, 0xbb, 0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x18, 0xe7, 0x99, 0xbb, 0xe5,
	0xbd, 0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0xae, 0x80, 0xe4, 0xbb, 0x8b, 0xe4, 0xbf,
	0xa1, 0xe6, 0x81, 0xaf, 0x5a, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0xd9, 0x01, 0x0a, 0x0b, 0x56, 0x62, 0x65, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x62, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x62, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0xba, 0x47,
	0x5c, 0x0a, 0x0c, 0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x12,
	0x1c, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x56, 0x62, 0x65,
	0x6e, 0xe7, 0xae, 0x80, 0xe4, 0xbb, 0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x1c, 0xe7,
	0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x56, 0x62, 0x65, 0x6e, 0xe7,
	0xae, 0x80, 0xe4, 0xbb, 0x8b, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x5a, 0x10, 0x0a, 0x0e, 0x0a,
	0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x76, 0x62, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0xb1, 0x01, 0x0a, 0x05, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x76, 0x6d,
	0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0xba, 0x47, 0x4e, 0x0a, 0x0c, 0xe8, 0xae, 0xa4, 0xe8,
	0xaf, 0x81, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x12, 0x15, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x9d, 0x83, 0xe9, 0x99, 0x90, 0xe7, 0xa0, 0x81, 0x1a,
	0x15, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0xe7, 0xa0, 0x81, 0x5a, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x05, 0x4d, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x1b,
	0x2e, 0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x6e, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x76,
	0x6d, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0xba, 0x47, 0x54, 0x0a, 0x0c,
	0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x12, 0x18, 0xe7, 0x99,
	0xbb, 0xe5, 0xbd, 0x95, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x1a, 0x18, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x5a, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x42, 0xae,
	0x04, 0xba, 0x47, 0x8f, 0x03, 0x12, 0x81, 0x02, 0x0a, 0x13, 0x41, 0x56, 0x4d, 0x43, 0x20, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x20, 0x41, 0x75, 0x74, 0x68, 0x20, 0x41, 0x50, 0x49, 0x12, 0x2d, 0x41,
	0x56, 0x4d, 0x43, 0x20, 0xe5, 0x90, 0x8e, 0xe5, 0x8f, 0xb0, 0xe7, 0xae, 0xa1, 0xe7, 0x90, 0x86,
	0xe8, 0x84, 0x9a, 0xe6, 0x89, 0x8b, 0xe6, 0x9e, 0xb6, 0xe7, 0xb3, 0xbb, 0xe7, 0xbb, 0x9f, 0x2d,
	0xe8, 0xae, 0xa4, 0xe8, 0xaf, 0x81, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x22, 0x54, 0x0a, 0x10,
	0x41, 0x56, 0x4d, 0x43, 0x20, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0xe6, 0x9e, 0xb6, 0xe6, 0x9e, 0x84,
	0x12, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x1a, 0x10, 0x37, 0x33, 0x37, 0x30, 0x34, 0x33, 0x39, 0x38, 0x30, 0x40, 0x71, 0x71, 0x2e, 0x63,
	0x6f, 0x6d, 0x2a, 0x5e, 0x0a, 0x14, 0x42, 0x53, 0x44, 0x20, 0x33, 0x2d, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2d, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x2e, 0x74,
	0x78, 0x74, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x1a, 0x2f, 0x0a, 0x1a, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x31, 0x12, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2a, 0x58, 0x3a, 0x56, 0x0a, 0x54,
	0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x44,
	0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x2f, 0x4a, 0x57, 0x54, 0x20, 0x42, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x2e, 0x2e, 0x2a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x32,
	0x03, 0x4a, 0x57, 0x54, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x76, 0x6d, 0x63, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x49, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x76, 0x6d, 0x63, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x41,
	0x58, 0xaa, 0x02, 0x0d, 0x41, 0x76, 0x6d, 0x63, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x0d, 0x41, 0x76, 0x6d, 0x63, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x19, 0x41, 0x76, 0x6d, 0x63, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f,
	0x41, 0x76, 0x6d, 0x63, 0x3a, 0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_avmc_admin_v1_i_auth_proto_rawDescOnce sync.Once
	file_avmc_admin_v1_i_auth_proto_rawDescData []byte
)

func file_avmc_admin_v1_i_auth_proto_rawDescGZIP() []byte {
	file_avmc_admin_v1_i_auth_proto_rawDescOnce.Do(func() {
		file_avmc_admin_v1_i_auth_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_avmc_admin_v1_i_auth_proto_rawDesc), len(file_avmc_admin_v1_i_auth_proto_rawDesc)))
	})
	return file_avmc_admin_v1_i_auth_proto_rawDescData
}

var file_avmc_admin_v1_i_auth_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_avmc_admin_v1_i_auth_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_avmc_admin_v1_i_auth_proto_goTypes = []any{
	(GrandType)(0),               // 0: avmc.admin.v1.GrandType
	(BadgeType)(0),               // 1: avmc.admin.v1.BadgeType
	(BadgeVariants)(0),           // 2: avmc.admin.v1.BadgeVariants
	(*Auth)(nil),                 // 3: avmc.admin.v1.Auth
	(*LoginPassword)(nil),        // 4: avmc.admin.v1.LoginPassword
	(*LoginCode)(nil),            // 5: avmc.admin.v1.LoginCode
	(*LoginRequest)(nil),         // 6: avmc.admin.v1.LoginRequest
	(*LoginResponse)(nil),        // 7: avmc.admin.v1.LoginResponse
	(*RefreshTokenRequest)(nil),  // 8: avmc.admin.v1.RefreshTokenRequest
	(*RefreshTokenResponse)(nil), // 9: avmc.admin.v1.RefreshTokenResponse
	(*LogoutRequest)(nil),        // 10: avmc.admin.v1.LogoutRequest
	(*LogoutResponse)(nil),       // 11: avmc.admin.v1.LogoutResponse
	(*ProfileRequest)(nil),       // 12: avmc.admin.v1.ProfileRequest
	(*ProfileResponse)(nil),      // 13: avmc.admin.v1.ProfileResponse
	(*VbenProfileRequest)(nil),   // 14: avmc.admin.v1.VbenProfileRequest
	(*VbenProfileResponse)(nil),  // 15: avmc.admin.v1.VbenProfileResponse
	(*CodesRequest)(nil),         // 16: avmc.admin.v1.CodesRequest
	(*CodesResponse)(nil),        // 17: avmc.admin.v1.CodesResponse
	(*MenusRequest)(nil),         // 18: avmc.admin.v1.MenusRequest
	(*MenusResponse)(nil),        // 19: avmc.admin.v1.MenusResponse
	(*RouteResponse)(nil),        // 20: avmc.admin.v1.RouteResponse
	(*MenuMetaResponse)(nil),     // 21: avmc.admin.v1.MenuMetaResponse
	(*v1.User)(nil),              // 22: core.service.v1.User
	(*v1.Role)(nil),              // 23: core.service.v1.Role
}
var file_avmc_admin_v1_i_auth_proto_depIdxs = []int32{
	4,  // 0: avmc.admin.v1.LoginRequest.password:type_name -> avmc.admin.v1.LoginPassword
	5,  // 1: avmc.admin.v1.LoginRequest.code:type_name -> avmc.admin.v1.LoginCode
	0,  // 2: avmc.admin.v1.LoginRequest.grand_type:type_name -> avmc.admin.v1.GrandType
	22, // 3: avmc.admin.v1.ProfileResponse.user:type_name -> core.service.v1.User
	23, // 4: avmc.admin.v1.ProfileResponse.role:type_name -> core.service.v1.Role
	23, // 5: avmc.admin.v1.VbenProfileResponse.role:type_name -> core.service.v1.Role
	20, // 6: avmc.admin.v1.MenusResponse.routes:type_name -> avmc.admin.v1.RouteResponse
	21, // 7: avmc.admin.v1.RouteResponse.meta:type_name -> avmc.admin.v1.MenuMetaResponse
	20, // 8: avmc.admin.v1.RouteResponse.children:type_name -> avmc.admin.v1.RouteResponse
	6,  // 9: avmc.admin.v1.AuthService.LoginPassword:input_type -> avmc.admin.v1.LoginRequest
	6,  // 10: avmc.admin.v1.AuthService.LoginCode:input_type -> avmc.admin.v1.LoginRequest
	8,  // 11: avmc.admin.v1.AuthService.RefreshToken:input_type -> avmc.admin.v1.RefreshTokenRequest
	10, // 12: avmc.admin.v1.AuthService.Logout:input_type -> avmc.admin.v1.LogoutRequest
	12, // 13: avmc.admin.v1.AuthService.Profile:input_type -> avmc.admin.v1.ProfileRequest
	14, // 14: avmc.admin.v1.AuthService.VbenProfile:input_type -> avmc.admin.v1.VbenProfileRequest
	16, // 15: avmc.admin.v1.AuthService.Codes:input_type -> avmc.admin.v1.CodesRequest
	18, // 16: avmc.admin.v1.AuthService.Menus:input_type -> avmc.admin.v1.MenusRequest
	7,  // 17: avmc.admin.v1.AuthService.LoginPassword:output_type -> avmc.admin.v1.LoginResponse
	7,  // 18: avmc.admin.v1.AuthService.LoginCode:output_type -> avmc.admin.v1.LoginResponse
	9,  // 19: avmc.admin.v1.AuthService.RefreshToken:output_type -> avmc.admin.v1.RefreshTokenResponse
	11, // 20: avmc.admin.v1.AuthService.Logout:output_type -> avmc.admin.v1.LogoutResponse
	13, // 21: avmc.admin.v1.AuthService.Profile:output_type -> avmc.admin.v1.ProfileResponse
	15, // 22: avmc.admin.v1.AuthService.VbenProfile:output_type -> avmc.admin.v1.VbenProfileResponse
	17, // 23: avmc.admin.v1.AuthService.Codes:output_type -> avmc.admin.v1.CodesResponse
	19, // 24: avmc.admin.v1.AuthService.Menus:output_type -> avmc.admin.v1.MenusResponse
	17, // [17:25] is the sub-list for method output_type
	9,  // [9:17] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_avmc_admin_v1_i_auth_proto_init() }
func file_avmc_admin_v1_i_auth_proto_init() {
	if File_avmc_admin_v1_i_auth_proto != nil {
		return
	}
	file_avmc_admin_v1_i_auth_proto_msgTypes[3].OneofWrappers = []any{}
	file_avmc_admin_v1_i_auth_proto_msgTypes[4].OneofWrappers = []any{}
	file_avmc_admin_v1_i_auth_proto_msgTypes[6].OneofWrappers = []any{}
	file_avmc_admin_v1_i_auth_proto_msgTypes[10].OneofWrappers = []any{}
	file_avmc_admin_v1_i_auth_proto_msgTypes[12].OneofWrappers = []any{}
	file_avmc_admin_v1_i_auth_proto_msgTypes[17].OneofWrappers = []any{}
	file_avmc_admin_v1_i_auth_proto_msgTypes[18].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_avmc_admin_v1_i_auth_proto_rawDesc), len(file_avmc_admin_v1_i_auth_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_avmc_admin_v1_i_auth_proto_goTypes,
		DependencyIndexes: file_avmc_admin_v1_i_auth_proto_depIdxs,
		EnumInfos:         file_avmc_admin_v1_i_auth_proto_enumTypes,
		MessageInfos:      file_avmc_admin_v1_i_auth_proto_msgTypes,
	}.Build()
	File_avmc_admin_v1_i_auth_proto = out.File
	file_avmc_admin_v1_i_auth_proto_goTypes = nil
	file_avmc_admin_v1_i_auth_proto_depIdxs = nil
}
