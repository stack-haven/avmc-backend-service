// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: avmc/admin/v1/i_auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Auth with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Auth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Auth with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AuthMultiError, or nil if none found.
func (m *Auth) ValidateAll() error {
	return m.validate(true)
}

func (m *Auth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for UserId

	// no validation rules for DomainId

	if len(errors) > 0 {
		return AuthMultiError(errors)
	}

	return nil
}

// AuthMultiError is an error wrapping multiple validation errors returned by
// Auth.ValidateAll() if the designated constraints aren't met.
type AuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthMultiError) AllErrors() []error { return m }

// AuthValidationError is the validation error returned by Auth.Validate if the
// designated constraints aren't met.
type AuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthValidationError) ErrorName() string { return "AuthValidationError" }

// Error satisfies the builtin error interface
func (e AuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthValidationError{}

// Validate checks the field values on LoginPassword with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginPassword) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginPassword with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginPasswordMultiError, or
// nil if none found.
func (m *LoginPassword) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginPassword) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginPasswordMultiError(errors)
	}

	return nil
}

// LoginPasswordMultiError is an error wrapping multiple validation errors
// returned by LoginPassword.ValidateAll() if the designated constraints
// aren't met.
type LoginPasswordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginPasswordMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginPasswordMultiError) AllErrors() []error { return m }

// LoginPasswordValidationError is the validation error returned by
// LoginPassword.Validate if the designated constraints aren't met.
type LoginPasswordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginPasswordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginPasswordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginPasswordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginPasswordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginPasswordValidationError) ErrorName() string { return "LoginPasswordValidationError" }

// Error satisfies the builtin error interface
func (e LoginPasswordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginPassword.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginPasswordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginPasswordValidationError{}

// Validate checks the field values on LoginCode with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginCode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginCode with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginCodeMultiError, or nil
// if none found.
func (m *LoginCode) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginCode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Code

	if len(errors) > 0 {
		return LoginCodeMultiError(errors)
	}

	return nil
}

// LoginCodeMultiError is an error wrapping multiple validation errors returned
// by LoginCode.ValidateAll() if the designated constraints aren't met.
type LoginCodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginCodeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginCodeMultiError) AllErrors() []error { return m }

// LoginCodeValidationError is the validation error returned by
// LoginCode.Validate if the designated constraints aren't met.
type LoginCodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginCodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginCodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginCodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginCodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginCodeValidationError) ErrorName() string { return "LoginCodeValidationError" }

// Error satisfies the builtin error interface
func (e LoginCodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginCode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginCodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginCodeValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPassword()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "Password",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "Password",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPassword()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginRequestValidationError{
				field:  "Password",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "Code",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginRequestValidationError{
					field:  "Code",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginRequestValidationError{
				field:  "Code",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.DomainId != nil {
		// no validation rules for DomainId
	}

	if m.GrandType != nil {
		// no validation rules for GrandType
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.TokenType != nil {
		// no validation rules for TokenType
	}

	if m.ExpiresIn != nil {
		// no validation rules for ExpiresIn
	}

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenRequestMultiError, or nil if none found.
func (m *RefreshTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return RefreshTokenRequestMultiError(errors)
	}

	return nil
}

// RefreshTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenRequestMultiError) AllErrors() []error { return m }

// RefreshTokenRequestValidationError is the validation error returned by
// RefreshTokenRequest.Validate if the designated constraints aren't met.
type RefreshTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenRequestValidationError) ErrorName() string {
	return "RefreshTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenRequestValidationError{}

// Validate checks the field values on RefreshTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenResponseMultiError, or nil if none found.
func (m *RefreshTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if m.ExpiresIn != nil {
		// no validation rules for ExpiresIn
	}

	if len(errors) > 0 {
		return RefreshTokenResponseMultiError(errors)
	}

	return nil
}

// RefreshTokenResponseMultiError is an error wrapping multiple validation
// errors returned by RefreshTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type RefreshTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenResponseMultiError) AllErrors() []error { return m }

// RefreshTokenResponseValidationError is the validation error returned by
// RefreshTokenResponse.Validate if the designated constraints aren't met.
type RefreshTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenResponseValidationError) ErrorName() string {
	return "RefreshTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenResponseValidationError{}

// Validate checks the field values on LogoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRequestMultiError, or
// nil if none found.
func (m *LogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutRequestMultiError(errors)
	}

	return nil
}

// LogoutRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRequestMultiError) AllErrors() []error { return m }

// LogoutRequestValidationError is the validation error returned by
// LogoutRequest.Validate if the designated constraints aren't met.
type LogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRequestValidationError) ErrorName() string { return "LogoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRequestValidationError{}

// Validate checks the field values on LogoutResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutResponseMultiError,
// or nil if none found.
func (m *LogoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutResponseMultiError(errors)
	}

	return nil
}

// LogoutResponseMultiError is an error wrapping multiple validation errors
// returned by LogoutResponse.ValidateAll() if the designated constraints
// aren't met.
type LogoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutResponseMultiError) AllErrors() []error { return m }

// LogoutResponseValidationError is the validation error returned by
// LogoutResponse.Validate if the designated constraints aren't met.
type LogoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutResponseValidationError) ErrorName() string { return "LogoutResponseValidationError" }

// Error satisfies the builtin error interface
func (e LogoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutResponseValidationError{}

// Validate checks the field values on ProfileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProfileRequestMultiError,
// or nil if none found.
func (m *ProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProfileRequestMultiError(errors)
	}

	return nil
}

// ProfileRequestMultiError is an error wrapping multiple validation errors
// returned by ProfileRequest.ValidateAll() if the designated constraints
// aren't met.
type ProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileRequestMultiError) AllErrors() []error { return m }

// ProfileRequestValidationError is the validation error returned by
// ProfileRequest.Validate if the designated constraints aren't met.
type ProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileRequestValidationError) ErrorName() string { return "ProfileRequestValidationError" }

// Error satisfies the builtin error interface
func (e ProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileRequestValidationError{}

// Validate checks the field values on ProfileResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileResponseMultiError, or nil if none found.
func (m *ProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Role != nil {

		if all {
			switch v := interface{}(m.GetRole()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProfileResponseValidationError{
						field:  "Role",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProfileResponseValidationError{
						field:  "Role",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProfileResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProfileResponseMultiError(errors)
	}

	return nil
}

// ProfileResponseMultiError is an error wrapping multiple validation errors
// returned by ProfileResponse.ValidateAll() if the designated constraints
// aren't met.
type ProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileResponseMultiError) AllErrors() []error { return m }

// ProfileResponseValidationError is the validation error returned by
// ProfileResponse.Validate if the designated constraints aren't met.
type ProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileResponseValidationError) ErrorName() string { return "ProfileResponseValidationError" }

// Error satisfies the builtin error interface
func (e ProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileResponseValidationError{}

// Validate checks the field values on VbenProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VbenProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VbenProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VbenProfileRequestMultiError, or nil if none found.
func (m *VbenProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VbenProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VbenProfileRequestMultiError(errors)
	}

	return nil
}

// VbenProfileRequestMultiError is an error wrapping multiple validation errors
// returned by VbenProfileRequest.ValidateAll() if the designated constraints
// aren't met.
type VbenProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VbenProfileRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VbenProfileRequestMultiError) AllErrors() []error { return m }

// VbenProfileRequestValidationError is the validation error returned by
// VbenProfileRequest.Validate if the designated constraints aren't met.
type VbenProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VbenProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VbenProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VbenProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VbenProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VbenProfileRequestValidationError) ErrorName() string {
	return "VbenProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VbenProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVbenProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VbenProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VbenProfileRequestValidationError{}

// Validate checks the field values on VbenProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VbenProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VbenProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VbenProfileResponseMultiError, or nil if none found.
func (m *VbenProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VbenProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.RealName != nil {
		// no validation rules for RealName
	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.HomePath != nil {
		// no validation rules for HomePath
	}

	if m.Desc != nil {
		// no validation rules for Desc
	}

	if m.Role != nil {

		if all {
			switch v := interface{}(m.GetRole()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VbenProfileResponseValidationError{
						field:  "Role",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VbenProfileResponseValidationError{
						field:  "Role",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VbenProfileResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VbenProfileResponseMultiError(errors)
	}

	return nil
}

// VbenProfileResponseMultiError is an error wrapping multiple validation
// errors returned by VbenProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type VbenProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VbenProfileResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VbenProfileResponseMultiError) AllErrors() []error { return m }

// VbenProfileResponseValidationError is the validation error returned by
// VbenProfileResponse.Validate if the designated constraints aren't met.
type VbenProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VbenProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VbenProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VbenProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VbenProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VbenProfileResponseValidationError) ErrorName() string {
	return "VbenProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VbenProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVbenProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VbenProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VbenProfileResponseValidationError{}

// Validate checks the field values on CodesRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CodesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CodesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CodesRequestMultiError, or
// nil if none found.
func (m *CodesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CodesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CodesRequestMultiError(errors)
	}

	return nil
}

// CodesRequestMultiError is an error wrapping multiple validation errors
// returned by CodesRequest.ValidateAll() if the designated constraints aren't met.
type CodesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CodesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CodesRequestMultiError) AllErrors() []error { return m }

// CodesRequestValidationError is the validation error returned by
// CodesRequest.Validate if the designated constraints aren't met.
type CodesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CodesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CodesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CodesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CodesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CodesRequestValidationError) ErrorName() string { return "CodesRequestValidationError" }

// Error satisfies the builtin error interface
func (e CodesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCodesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CodesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CodesRequestValidationError{}

// Validate checks the field values on CodesResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CodesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CodesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CodesResponseMultiError, or
// nil if none found.
func (m *CodesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CodesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CodesResponseMultiError(errors)
	}

	return nil
}

// CodesResponseMultiError is an error wrapping multiple validation errors
// returned by CodesResponse.ValidateAll() if the designated constraints
// aren't met.
type CodesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CodesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CodesResponseMultiError) AllErrors() []error { return m }

// CodesResponseValidationError is the validation error returned by
// CodesResponse.Validate if the designated constraints aren't met.
type CodesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CodesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CodesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CodesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CodesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CodesResponseValidationError) ErrorName() string { return "CodesResponseValidationError" }

// Error satisfies the builtin error interface
func (e CodesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCodesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CodesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CodesResponseValidationError{}

// Validate checks the field values on MenusRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MenusRequestMultiError, or
// nil if none found.
func (m *MenusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MenusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MenusRequestMultiError(errors)
	}

	return nil
}

// MenusRequestMultiError is an error wrapping multiple validation errors
// returned by MenusRequest.ValidateAll() if the designated constraints aren't met.
type MenusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenusRequestMultiError) AllErrors() []error { return m }

// MenusRequestValidationError is the validation error returned by
// MenusRequest.Validate if the designated constraints aren't met.
type MenusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenusRequestValidationError) ErrorName() string { return "MenusRequestValidationError" }

// Error satisfies the builtin error interface
func (e MenusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenusRequestValidationError{}

// Validate checks the field values on MenusResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenusResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MenusResponseMultiError, or
// nil if none found.
func (m *MenusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MenusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoutes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MenusResponseValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MenusResponseValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MenusResponseValidationError{
					field:  fmt.Sprintf("Routes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MenusResponseMultiError(errors)
	}

	return nil
}

// MenusResponseMultiError is an error wrapping multiple validation errors
// returned by MenusResponse.ValidateAll() if the designated constraints
// aren't met.
type MenusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenusResponseMultiError) AllErrors() []error { return m }

// MenusResponseValidationError is the validation error returned by
// MenusResponse.Validate if the designated constraints aren't met.
type MenusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenusResponseValidationError) ErrorName() string { return "MenusResponseValidationError" }

// Error satisfies the builtin error interface
func (e MenusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenusResponseValidationError{}

// Validate checks the field values on RouteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RouteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RouteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RouteResponseMultiError, or
// nil if none found.
func (m *RouteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RouteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Path

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RouteResponseValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RouteResponseValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RouteResponseValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Redirect != nil {
		// no validation rules for Redirect
	}

	if m.Component != nil {
		// no validation rules for Component
	}

	if m.Meta != nil {

		if all {
			switch v := interface{}(m.GetMeta()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RouteResponseValidationError{
						field:  "Meta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RouteResponseValidationError{
						field:  "Meta",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RouteResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RouteResponseMultiError(errors)
	}

	return nil
}

// RouteResponseMultiError is an error wrapping multiple validation errors
// returned by RouteResponse.ValidateAll() if the designated constraints
// aren't met.
type RouteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouteResponseMultiError) AllErrors() []error { return m }

// RouteResponseValidationError is the validation error returned by
// RouteResponse.Validate if the designated constraints aren't met.
type RouteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteResponseValidationError) ErrorName() string { return "RouteResponseValidationError" }

// Error satisfies the builtin error interface
func (e RouteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRouteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteResponseValidationError{}

// Validate checks the field values on MenuMetaResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MenuMetaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuMetaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MenuMetaResponseMultiError, or nil if none found.
func (m *MenuMetaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuMetaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	if m.ActiveIcon != nil {
		// no validation rules for ActiveIcon
	}

	if m.ActivePath != nil {
		// no validation rules for ActivePath
	}

	if m.AffixTab != nil {
		// no validation rules for AffixTab
	}

	if m.AffixTabOrder != nil {
		// no validation rules for AffixTabOrder
	}

	if m.Badge != nil {
		// no validation rules for Badge
	}

	if m.BadgeType != nil {
		// no validation rules for BadgeType
	}

	if m.BadgeVariants != nil {
		// no validation rules for BadgeVariants
	}

	if m.FullPathKey != nil {
		// no validation rules for FullPathKey
	}

	if m.HideChildrenInMenu != nil {
		// no validation rules for HideChildrenInMenu
	}

	if m.HideInBreadcrumb != nil {
		// no validation rules for HideInBreadcrumb
	}

	if m.HideInMenu != nil {
		// no validation rules for HideInMenu
	}

	if m.HideInTab != nil {
		// no validation rules for HideInTab
	}

	if m.Icon != nil {
		// no validation rules for Icon
	}

	if m.IframeSrc != nil {
		// no validation rules for IframeSrc
	}

	if m.IgnoreAccess != nil {
		// no validation rules for IgnoreAccess
	}

	if m.KeepAlive != nil {
		// no validation rules for KeepAlive
	}

	if m.Link != nil {
		// no validation rules for Link
	}

	if m.Loaded != nil {
		// no validation rules for Loaded
	}

	if m.MaxNumOfOpenTab != nil {
		// no validation rules for MaxNumOfOpenTab
	}

	if m.MenuVisibleWithForbidden != nil {
		// no validation rules for MenuVisibleWithForbidden
	}

	if m.NoBasicLayout != nil {
		// no validation rules for NoBasicLayout
	}

	if m.OpenInNewWindow != nil {
		// no validation rules for OpenInNewWindow
	}

	if m.Order != nil {
		// no validation rules for Order
	}

	if m.Query != nil {
		// no validation rules for Query
	}

	if len(errors) > 0 {
		return MenuMetaResponseMultiError(errors)
	}

	return nil
}

// MenuMetaResponseMultiError is an error wrapping multiple validation errors
// returned by MenuMetaResponse.ValidateAll() if the designated constraints
// aren't met.
type MenuMetaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuMetaResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuMetaResponseMultiError) AllErrors() []error { return m }

// MenuMetaResponseValidationError is the validation error returned by
// MenuMetaResponse.Validate if the designated constraints aren't met.
type MenuMetaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuMetaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuMetaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuMetaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuMetaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuMetaResponseValidationError) ErrorName() string { return "MenuMetaResponseValidationError" }

// Error satisfies the builtin error interface
func (e MenuMetaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuMetaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuMetaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuMetaResponseValidationError{}
