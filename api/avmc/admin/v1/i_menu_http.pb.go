// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: avmc/admin/v1/i_menu.proto

package v1

import (
	pagination "backend-service/api/common/pagination"
	v1 "backend-service/api/core/service/v1"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMenuServiceCreateMenu = "/avmc.admin.v1.MenuService/CreateMenu"
const OperationMenuServiceDeleteMenu = "/avmc.admin.v1.MenuService/DeleteMenu"
const OperationMenuServiceExistMenuByName = "/avmc.admin.v1.MenuService/ExistMenuByName"
const OperationMenuServiceExistMenuByPath = "/avmc.admin.v1.MenuService/ExistMenuByPath"
const OperationMenuServiceGetMenu = "/avmc.admin.v1.MenuService/GetMenu"
const OperationMenuServiceListMenu = "/avmc.admin.v1.MenuService/ListMenu"
const OperationMenuServiceListMenuAll = "/avmc.admin.v1.MenuService/ListMenuAll"
const OperationMenuServiceListMenuTree = "/avmc.admin.v1.MenuService/ListMenuTree"
const OperationMenuServiceUpdateMenu = "/avmc.admin.v1.MenuService/UpdateMenu"

type MenuServiceHTTPServer interface {
	// CreateMenu 创建菜单
	CreateMenu(context.Context, *v1.CreateMenuRequest) (*v1.CreateMenuResponse, error)
	// DeleteMenu 删除菜单
	DeleteMenu(context.Context, *v1.DeleteMenuRequest) (*v1.DeleteMenuResponse, error)
	// ExistMenuByName 判断菜单名是否存在
	ExistMenuByName(context.Context, *v1.ExistMenuByNameRequest) (*v1.ExistMenuByNameResponse, error)
	// ExistMenuByPath 判断菜单路径是否存在
	ExistMenuByPath(context.Context, *v1.ExistMenuByPathRequest) (*v1.ExistMenuByPathResponse, error)
	// GetMenu 获取菜单数据
	GetMenu(context.Context, *v1.GetMenuRequest) (*v1.Menu, error)
	// ListMenu 获取菜单列表
	ListMenu(context.Context, *pagination.PagingRequest) (*v1.ListMenuResponse, error)
	// ListMenuAll 获取所有菜单
	ListMenuAll(context.Context, *emptypb.Empty) (*v1.ListMenuResponse, error)
	// ListMenuTree 获取菜单树
	ListMenuTree(context.Context, *v1.ListMenuTreeRequest) (*v1.ListMenuTreeResponse, error)
	// UpdateMenu 更新菜单
	UpdateMenu(context.Context, *v1.UpdateMenuRequest) (*v1.UpdateMenuResponse, error)
}

func RegisterMenuServiceHTTPServer(s *http.Server, srv MenuServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/menus/all", _MenuService_ListMenuAll0_HTTP_Handler(srv))
	r.GET("/admin/v1/menus/tree", _MenuService_ListMenuTree0_HTTP_Handler(srv))
	r.GET("/admin/v1/menus/tree/{pid}", _MenuService_ListMenuTree1_HTTP_Handler(srv))
	r.GET("/admin/v1/menus", _MenuService_ListMenu0_HTTP_Handler(srv))
	r.GET("/admin/v1/menus/{id}", _MenuService_GetMenu0_HTTP_Handler(srv))
	r.POST("/admin/v1/menus", _MenuService_CreateMenu0_HTTP_Handler(srv))
	r.PUT("/admin/v1/menus/{id}", _MenuService_UpdateMenu0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/menus/{id}", _MenuService_DeleteMenu0_HTTP_Handler(srv))
	r.GET("/admin/v1/menus/path-exists/{path}", _MenuService_ExistMenuByPath0_HTTP_Handler(srv))
	r.GET("/admin/v1/menus/path-exists", _MenuService_ExistMenuByPath1_HTTP_Handler(srv))
	r.GET("/admin/v1/menus/name-exists/{name}", _MenuService_ExistMenuByName0_HTTP_Handler(srv))
	r.GET("/admin/v1/menus/name-exists", _MenuService_ExistMenuByName1_HTTP_Handler(srv))
}

func _MenuService_ListMenuAll0_HTTP_Handler(srv MenuServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMenuServiceListMenuAll)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMenuAll(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListMenuResponse)
		return ctx.Result(200, reply)
	}
}

func _MenuService_ListMenuTree0_HTTP_Handler(srv MenuServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListMenuTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMenuServiceListMenuTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMenuTree(ctx, req.(*v1.ListMenuTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListMenuTreeResponse)
		return ctx.Result(200, reply)
	}
}

func _MenuService_ListMenuTree1_HTTP_Handler(srv MenuServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListMenuTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMenuServiceListMenuTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMenuTree(ctx, req.(*v1.ListMenuTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListMenuTreeResponse)
		return ctx.Result(200, reply)
	}
}

func _MenuService_ListMenu0_HTTP_Handler(srv MenuServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in pagination.PagingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMenuServiceListMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMenu(ctx, req.(*pagination.PagingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListMenuResponse)
		return ctx.Result(200, reply)
	}
}

func _MenuService_GetMenu0_HTTP_Handler(srv MenuServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMenuServiceGetMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMenu(ctx, req.(*v1.GetMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.Menu)
		return ctx.Result(200, reply)
	}
}

func _MenuService_CreateMenu0_HTTP_Handler(srv MenuServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.CreateMenuRequest
		if err := ctx.Bind(&in.Menu); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMenuServiceCreateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMenu(ctx, req.(*v1.CreateMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.CreateMenuResponse)
		return ctx.Result(200, reply)
	}
}

func _MenuService_UpdateMenu0_HTTP_Handler(srv MenuServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.UpdateMenuRequest
		if err := ctx.Bind(&in.Menu); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMenuServiceUpdateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMenu(ctx, req.(*v1.UpdateMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateMenuResponse)
		return ctx.Result(200, reply)
	}
}

func _MenuService_DeleteMenu0_HTTP_Handler(srv MenuServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.DeleteMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMenuServiceDeleteMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMenu(ctx, req.(*v1.DeleteMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteMenuResponse)
		return ctx.Result(200, reply)
	}
}

func _MenuService_ExistMenuByPath0_HTTP_Handler(srv MenuServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ExistMenuByPathRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMenuServiceExistMenuByPath)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExistMenuByPath(ctx, req.(*v1.ExistMenuByPathRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ExistMenuByPathResponse)
		return ctx.Result(200, reply)
	}
}

func _MenuService_ExistMenuByPath1_HTTP_Handler(srv MenuServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ExistMenuByPathRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMenuServiceExistMenuByPath)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExistMenuByPath(ctx, req.(*v1.ExistMenuByPathRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ExistMenuByPathResponse)
		return ctx.Result(200, reply)
	}
}

func _MenuService_ExistMenuByName0_HTTP_Handler(srv MenuServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ExistMenuByNameRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMenuServiceExistMenuByName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExistMenuByName(ctx, req.(*v1.ExistMenuByNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ExistMenuByNameResponse)
		return ctx.Result(200, reply)
	}
}

func _MenuService_ExistMenuByName1_HTTP_Handler(srv MenuServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ExistMenuByNameRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMenuServiceExistMenuByName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExistMenuByName(ctx, req.(*v1.ExistMenuByNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ExistMenuByNameResponse)
		return ctx.Result(200, reply)
	}
}

type MenuServiceHTTPClient interface {
	CreateMenu(ctx context.Context, req *v1.CreateMenuRequest, opts ...http.CallOption) (rsp *v1.CreateMenuResponse, err error)
	DeleteMenu(ctx context.Context, req *v1.DeleteMenuRequest, opts ...http.CallOption) (rsp *v1.DeleteMenuResponse, err error)
	ExistMenuByName(ctx context.Context, req *v1.ExistMenuByNameRequest, opts ...http.CallOption) (rsp *v1.ExistMenuByNameResponse, err error)
	ExistMenuByPath(ctx context.Context, req *v1.ExistMenuByPathRequest, opts ...http.CallOption) (rsp *v1.ExistMenuByPathResponse, err error)
	GetMenu(ctx context.Context, req *v1.GetMenuRequest, opts ...http.CallOption) (rsp *v1.Menu, err error)
	ListMenu(ctx context.Context, req *pagination.PagingRequest, opts ...http.CallOption) (rsp *v1.ListMenuResponse, err error)
	ListMenuAll(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *v1.ListMenuResponse, err error)
	ListMenuTree(ctx context.Context, req *v1.ListMenuTreeRequest, opts ...http.CallOption) (rsp *v1.ListMenuTreeResponse, err error)
	UpdateMenu(ctx context.Context, req *v1.UpdateMenuRequest, opts ...http.CallOption) (rsp *v1.UpdateMenuResponse, err error)
}

type MenuServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewMenuServiceHTTPClient(client *http.Client) MenuServiceHTTPClient {
	return &MenuServiceHTTPClientImpl{client}
}

func (c *MenuServiceHTTPClientImpl) CreateMenu(ctx context.Context, in *v1.CreateMenuRequest, opts ...http.CallOption) (*v1.CreateMenuResponse, error) {
	var out v1.CreateMenuResponse
	pattern := "/admin/v1/menus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMenuServiceCreateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Menu, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MenuServiceHTTPClientImpl) DeleteMenu(ctx context.Context, in *v1.DeleteMenuRequest, opts ...http.CallOption) (*v1.DeleteMenuResponse, error) {
	var out v1.DeleteMenuResponse
	pattern := "/admin/v1/menus/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMenuServiceDeleteMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MenuServiceHTTPClientImpl) ExistMenuByName(ctx context.Context, in *v1.ExistMenuByNameRequest, opts ...http.CallOption) (*v1.ExistMenuByNameResponse, error) {
	var out v1.ExistMenuByNameResponse
	pattern := "/admin/v1/menus/name-exists"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMenuServiceExistMenuByName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MenuServiceHTTPClientImpl) ExistMenuByPath(ctx context.Context, in *v1.ExistMenuByPathRequest, opts ...http.CallOption) (*v1.ExistMenuByPathResponse, error) {
	var out v1.ExistMenuByPathResponse
	pattern := "/admin/v1/menus/path-exists"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMenuServiceExistMenuByPath))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MenuServiceHTTPClientImpl) GetMenu(ctx context.Context, in *v1.GetMenuRequest, opts ...http.CallOption) (*v1.Menu, error) {
	var out v1.Menu
	pattern := "/admin/v1/menus/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMenuServiceGetMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MenuServiceHTTPClientImpl) ListMenu(ctx context.Context, in *pagination.PagingRequest, opts ...http.CallOption) (*v1.ListMenuResponse, error) {
	var out v1.ListMenuResponse
	pattern := "/admin/v1/menus"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMenuServiceListMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MenuServiceHTTPClientImpl) ListMenuAll(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*v1.ListMenuResponse, error) {
	var out v1.ListMenuResponse
	pattern := "/admin/v1/menus/all"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMenuServiceListMenuAll))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MenuServiceHTTPClientImpl) ListMenuTree(ctx context.Context, in *v1.ListMenuTreeRequest, opts ...http.CallOption) (*v1.ListMenuTreeResponse, error) {
	var out v1.ListMenuTreeResponse
	pattern := "/admin/v1/menus/tree/{pid}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMenuServiceListMenuTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MenuServiceHTTPClientImpl) UpdateMenu(ctx context.Context, in *v1.UpdateMenuRequest, opts ...http.CallOption) (*v1.UpdateMenuResponse, error) {
	var out v1.UpdateMenuResponse
	pattern := "/admin/v1/menus/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMenuServiceUpdateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Menu, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
