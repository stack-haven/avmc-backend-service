syntax = "proto3";

package core.service.v1;

import "gnostic/openapi/v3/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/field_mask.proto";
import "validate/validate.proto";
import "buf/validate/validate.proto";

import "common/pagination/pagination.proto";
import "common/enum/enum.proto";

option go_package = "backend-service/api/core/service/v1;v1";
// option go_package = "corev1";
// option java_multiple_files = true;
// option java_package = "com.foo.v1";

service UserService {
  // 创建用户
	rpc CreateUser (CreateUserRequest) returns (CreateUserResponse);
  // 更新用户
	rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse);
  // 删除用户
	rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse);
  // 获取用户
	rpc GetUser (GetUserRequest) returns (GetUserResponse);
  // 分页查询用户
	rpc ListUser (pagination.PagingRequest) returns (ListUserResponse);
  // 查询用户详情
  rpc GetUserByName (GetUserByNameRequest) returns (GetUserResponse);
  // 根据手机号查询用户详情
  rpc GetUserByPhone (GetUserByPhoneRequest) returns (GetUserResponse);
  // 验证密码
  rpc VerifyPassword (VerifyPasswordRequest) returns (VerifyPasswordResponse);
  // 用户是否存在
  rpc UserExists (UserExistsRequest) returns (UserExistsResponse);
}

// 验证密码结果码
enum VerifyPassword {
  VERIFY_PASSWORD_UNSPECIFIED = 0; 
  VERIFY_PASSWORD_SUCCESS = 1;  // 验证成功
  VERIFY_PASSWORD_ACCOUNT_NOT_EXISTS = 2; // 账号不存在
  VERIFY_PASSWORD_WRONG_PASSWORD = 3;// 密码错误
  VERIFY_PASSWORD_FREEZE = 4;// 已冻结
  VERIFY_PASSWORD_DELETED = 5;// 已删除
}
// 用户权限
enum Authority {
  AUTHORITY_UNSPECIFIED = 0; 
  AUTHORITY_SYS_ADMIN = 1;  // 系统超级用户
  AUTHORITY_CUSTOMER_USER = 2;  // 普通用户
  AUTHORITY_GUEST_USER = 3;  // 游客
}

message User {
  uint32 id = 1;
  optional string name = 2 [
    (validate.rules).string = {min_len: 1, max_len: 10}, 
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 10,
    (gnostic.openapi.v3.property) = {description: "用户名"}
  ];
  optional string password = 3 [
    (validate.rules).string = {min_len: 6, max_len: 28}, 
    (buf.validate.field).string.min_len = 6,
    (buf.validate.field).string.max_len = 28,
    (gnostic.openapi.v3.property) = {description: "密码"}
  ];
  optional string nickname = 4 [
    (validate.rules).string = {min_len: 1, max_len: 10}, 
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 10,
    (gnostic.openapi.v3.property) = {description: "昵称"}
  ];
  optional string realname = 5 [
    (validate.rules).string = {min_len: 2, max_len: 10}, 
    (buf.validate.field).string.min_len = 2,
    (buf.validate.field).string.max_len = 10,
    (gnostic.openapi.v3.property) = {description: "真实姓名"}
  ];
  optional string birthday = 6 [
    (validate.rules).string.pattern = "^(([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29)$",
    (buf.validate.field).string.pattern = "^(([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))-02-29)$",
    (gnostic.openapi.v3.property) = {description: "生日"}
  ];
  // optional int32 gender = 7 [(validate.rules).int32.gte = 0,(gnostic.openapi.v3.property) = {description: "性别 0 未知 1 男 2 女"}]; 
  optional enum.Gender gender = 7 [
    (validate.rules).enum.defined_only = true,
    (buf.validate.field).enum.defined_only = true,
    (gnostic.openapi.v3.property) = {description: "性别 0 未知 1 男 2 女"}
  ]; 
  optional string phone = 8 [
    (validate.rules).string.pattern = "^1[0-9]{10}$", 
    (buf.validate.field).string.pattern = "^1[0-9]{10}$",
    (buf.validate.field).string.len = 11,
    (gnostic.openapi.v3.property) = {description: "手机号"}
  ];
  optional string email = 9 [
    (validate.rules).string.email = true,
    (buf.validate.field).string.email = true,
    (gnostic.openapi.v3.property) = {description: "电子邮箱"}
  ];
  optional string avatar = 10 [
    (gnostic.openapi.v3.property) = {description: "头像"}
  ];
  optional enum.Status status = 11 [
    (validate.rules).enum.defined_only = true,
    (buf.validate.field).enum.defined_only = true,
    (gnostic.openapi.v3.property) = {description: "状态 0 未知 1 启用 2 禁用"}
  ];
  optional string created_at = 12 [
    (gnostic.openapi.v3.property) = {description: "创建时间"}
  ];
  optional string updated_at = 13 [
    (gnostic.openapi.v3.property) = {description: "更新时间"}
  ];
  optional string description = 14 [
    (gnostic.openapi.v3.property) = {description: "个人说明"}
  ]; // 个人说明
}

message CreateUserRequest {
  User user = 1;
  uint32 operator_id = 2;
}
message CreateUserResponse {
}

message UpdateUserRequest {
  uint32 id = 1;
  User user = 2;
  uint32 operator_id = 3;
}
message UpdateUserResponse {
}

message DeleteUserRequest {
  uint32 id = 1;
  uint32 operator_id = 2;
}
message DeleteUserResponse {}

message GetUserRequest {
  uint32 id = 1;
}

message GetUserByNameRequest {
  string name = 1;
}

message GetUserByPhoneRequest {
  string phone = 1;
}

message GetUserResponse {
  User user = 1;
}

message ListUserResponse {
  repeated User items = 1;
  int32 total = 2;
}
// 验证密码 - 请求
message VerifyPasswordRequest {
  string name = 1;
  string password = 2;
}

// 验证密码 - 回应
message VerifyPasswordResponse {
  VerifyPassword result = 1;
}

// 用户是否存在 - 请求
message UserExistsRequest {
  string name = 1;
}
// 用户是否存在 - 回应
message UserExistsResponse {
  bool exist = 1;
}