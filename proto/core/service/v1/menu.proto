syntax = "proto3";

package core.service.v1;

import "buf/validate/validate.proto";
import "common/enum/enum.proto";
import "common/pagination/pagination.proto";
import "gnostic/openapi/v3/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

option go_package = "backend-service/api/core/service/v1;v1";

service MenuService {
  // 创建菜单
  rpc CreateMenu(CreateMenuRequest) returns (CreateMenuResponse);
  // 更新菜单
  rpc UpdateMenu(UpdateMenuRequest) returns (UpdateMenuResponse);
  // 删除菜单
  rpc DeleteMenu(DeleteMenuRequest) returns (DeleteMenuResponse);
  // 获取菜单
  rpc GetMenu(GetMenuRequest) returns (GetMenuResponse);
  // 分页查询菜单
  rpc ListMenu(pagination.PagingRequest) returns (ListMenuResponse);
  // 获取菜单树
  rpc ListMenuTree(ListMenuTreeRequest) returns (ListMenuTreeResponse);
}

enum MenuType {
  MENU_TYPE_UNSPECIFIED = 0;
  // 目录
  MENU_TYPE_DIR = 1;
  // 菜单
  MENU_TYPE_MENU = 2;
  // 按钮·
  MENU_TYPE_BUTTON = 3;
}

message Menu {
  // 菜单ID
  uint32 id = 1 [
    (buf.validate.field).uint32.gt = 0,
    (gnostic.openapi.v3.property) = {description: "菜单ID"}
  ];
  // 菜单名称
  string name = 2 [
    (buf.validate.field).string.max_len = 20,
    (gnostic.openapi.v3.property) = {description: "菜单名称"}
  ];
  // 路由路径
  optional string path = 3 [
    (buf.validate.field).string.max_len = 200,
    (gnostic.openapi.v3.property) = {description: "路由路径"}
  ];
  // 后端权限标识
  optional string auth_code = 4 [
    (buf.validate.field).string.max_len = 20,
    (gnostic.openapi.v3.property) = {description: "权限标识"}
  ];
  // 菜单元数据
  optional MenuMeta meta = 5 [(gnostic.openapi.v3.property) = {description: "菜单元数据"}];
  // 子级
  repeated Menu children = 6 [(gnostic.openapi.v3.property) = {description: "子级"}];
  // 组件
  optional string component = 7 [
    (buf.validate.field).string.max_len = 200,
    (gnostic.openapi.v3.property) = {description: "组件"}
  ];
  // 父级ID
  uint32 pid = 8 [
    (buf.validate.field).uint32.gte = 0,
    (gnostic.openapi.v3.property) = {description: "父级ID"}
  ];
  // 重定向
  optional string redirect = 9 [
    (buf.validate.field).string.max_len = 200,
    (gnostic.openapi.v3.property) = {description: "重定向"}
  ];
  // 菜单类型
  int32 type = 10 [(gnostic.openapi.v3.property) = {
    description: "菜单类型"
    default: {number: 1}
  }];
  // 菜单状态 1 启用 2 禁用
  optional enum.Status status = 11 [
    (buf.validate.field).enum.defined_only = true,
    (gnostic.openapi.v3.property) = {
      description: "菜单状态 1 启用 2 禁用"
      default: {number: 1}
    }
  ];
  // 创建时间
  optional string created_at = 12 [(gnostic.openapi.v3.property) = {description: "创建时间"}];
  // 更新时间
  optional string updated_at = 13 [(gnostic.openapi.v3.property) = {description: "更新时间"}];
}

// 菜单元数据
message MenuMeta {
  // 激活时显示的图标
  optional string active_icon = 1 [
    (buf.validate.field).string.max_len = 50,
    (gnostic.openapi.v3.property) = {description: "激活时显示的图标"}
  ];
  // 作为路由时，需要激活的菜单的Path
  optional string active_path = 2 [
    (buf.validate.field).string.max_len = 200,
    (gnostic.openapi.v3.property) = {description: "作为路由时，需要激活的菜单的Path"}
  ];
  // 固定在标签栏
  optional bool affix_tab = 3 [(gnostic.openapi.v3.property) = {description: "固定在标签栏"}];
  // 在标签栏固定的顺序
  optional int32 affix_tab_order = 4 [(gnostic.openapi.v3.property) = {description: "在标签栏固定的顺序"}];
  // 徽标内容(当徽标类型为normal时有效)
  optional string badge = 5 [
    (buf.validate.field).string.max_len = 20,
    (gnostic.openapi.v3.property) = {description: "徽标内容(当徽标类型为normal时有效)"}
  ];
  // 徽标类型
  optional int32 badge_type = 6 [(gnostic.openapi.v3.property) = {description: "徽标类型"}];
  // 徽标颜色
  optional int32 badge_variants = 7 [(gnostic.openapi.v3.property) = {description: "徽标颜色"}];
  // 在菜单中隐藏下级
  optional bool hide_children_in_menu = 8 [(gnostic.openapi.v3.property) = {description: "在菜单中隐藏下级"}];
  // 在面包屑中隐藏
  optional bool hide_in_breadcrumb = 9 [(gnostic.openapi.v3.property) = {description: "在面包屑中隐藏"}];
  // 在菜单中隐藏
  optional bool hide_in_menu = 10 [(gnostic.openapi.v3.property) = {description: "在菜单中隐藏"}];
  // 在标签栏中隐藏
  optional bool hide_in_tab = 11 [(gnostic.openapi.v3.property) = {description: "在标签栏中隐藏"}];
  // 菜单图标
  optional string icon = 12 [
    (buf.validate.field).string.max_len = 50,
    (gnostic.openapi.v3.property) = {description: "菜单图标"}
  ];
  // 内嵌Iframe的URL
  optional string iframe_src = 13 [
    (buf.validate.field).string.max_len = 200,
    (gnostic.openapi.v3.property) = {description: "内嵌Iframe的URL"}
  ];
  // 是否缓存页面
  optional bool keep_alive = 14 [(gnostic.openapi.v3.property) = {description: "是否缓存页面"}];
  // 外链页面的URL
  optional string link = 15 [
    (buf.validate.field).string.max_len = 200,
    (gnostic.openapi.v3.property) = {description: "外链页面的URL"}
  ];
  // 同一个路由最大打开的标签数
  optional int32 max_num_of_open_tab = 16 [(gnostic.openapi.v3.property) = {description: "同一个路由最大打开的标签数"}];
  // 无需基础布局
  optional bool no_basic_layout = 17 [(gnostic.openapi.v3.property) = {description: "无需基础布局"}];
  // 是否在新窗口打开
  optional bool open_in_new_window = 18 [(gnostic.openapi.v3.property) = {description: "是否在新窗口打开"}];
  // 菜单排序
  optional int32 order = 19 [(gnostic.openapi.v3.property) = {
    description: "菜单排序"
    default: {number: 10}
  }];
  // 额外的路由参数
  optional string query = 20 [
    (buf.validate.field).string.max_len = 200,
    (gnostic.openapi.v3.property) = {description: "额外的路由参数"}
  ];
  // 菜单标题
  optional string title = 21 [
    (buf.validate.field).string.max_len = 20,
    (gnostic.openapi.v3.property) = {description: "菜单标题"}
  ];
}

// 创建菜单请求
message CreateMenuRequest {
  Menu menu = 1 [
    (buf.validate.field).required = true,
    (gnostic.openapi.v3.property) = {description: "菜单"}
  ];
  uint32 operator_id = 2 [
    (buf.validate.field).uint32.gt = 0,
    (gnostic.openapi.v3.property) = {description: "操作人ID"}
  ];
}

// 创建菜单响应
message CreateMenuResponse {}

// 更新菜单请求
message UpdateMenuRequest {
  uint32 id = 1 [(buf.validate.field).uint32.gt = 0];
  Menu menu = 2 [(buf.validate.field).required = true];
  uint32 operator_id = 3 [(buf.validate.field).uint32.gt = 0];
}

// 更新菜单响应
message UpdateMenuResponse {}

// 删除菜单请求
message DeleteMenuRequest {
  uint32 id = 1 [(buf.validate.field).uint32.gt = 0];
  uint32 operator_id = 2 [(buf.validate.field).uint32.gt = 0];
}

// 删除菜单响应
message DeleteMenuResponse {}

// 获取菜单请求
message GetMenuRequest {
  uint32 id = 1 [(buf.validate.field).uint32.gt = 0];
}

// 获取菜单响应
message GetMenuResponse {
  Menu menu = 1;
}

// 分页查询菜单请求
message ListMenuRequest {
  pagination.PagingRequest pagination = 1 [(buf.validate.field).required = true];
  optional string name = 2 [(buf.validate.field).string.max_len = 20];
  optional int32 type = 3;
  optional int32 state = 4;
}

// 分页查询菜单响应
message ListMenuResponse {
  repeated Menu items = 1;
  int32 total = 2;
}

// 获取菜单树请求
message ListMenuTreeRequest {
  uint32 pid = 1 [
    (buf.validate.field).uint32.gte = 0,
    (gnostic.openapi.v3.property) = {description: "父级ID"}
  ];
}

// 获取菜单树响应
message ListMenuTreeResponse {
  repeated Menu items = 1 [(gnostic.openapi.v3.property) = {description: "菜单树"}];
}
