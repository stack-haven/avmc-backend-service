syntax = "proto3";

package avmc.admin.v1;

import "gnostic/openapi/v3/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "validate/validate.proto";
import "buf/validate/validate.proto";

import "core/service/v1/auth.proto";
import "core/service/v1/user.proto";
import "core/service/v1/role.proto";

option go_package = "backend-service/api/avmc/admin/v1;v1";

option (gnostic.openapi.v3.document) = {
  info: {
    title: "AVMC Admin Auth API";
    description: "AVMC 后台管理脚手架系统-认证服务";
    version: "1.0.0";
		contact: {
			name: "AVMC Admin架构";
			url: "https://github.com/grpc-ecosystem/grpc-gateway";
			email: "737043980@qq.com";
		};
		license: {
			name: "BSD 3-Clause License";
			url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt";
		};
  };
  servers: [
    {
      url: "https://api.example.com/v1";
      description: "Production server";
    }
  ];
  components: {
    security_schemes: {
      additional_properties: [
        {
          name: "BearerAuth";
          value: {
            security_scheme: {
              type: "http";
              scheme: "bearer";
              bearer_format: "JWT";
              description: "JWT Bearer token for authenticating requests...";
            }
          }
        }
      ]
    }
  }
};

// The greeting service definition.
service AuthService {
  rpc LoginPassword (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/admin/v1/auth/login/password"
      body: "password"
    };
    option (gnostic.openapi.v3.operation) = {
      // operation_id: "LoginUser"
      summary: "用户密码登录"
      description: "通过用户名和密码登录认证服务"
      tags: ["认证服务"]
    };
  }
  
  rpc LoginCode (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/admin/v1/auth/login/code"
      body: "code"
    };
    option (gnostic.openapi.v3.operation) = {
      // operation_id: "LoginUser"
      summary: "用户验证码登录"
      description: "通过手机号和验证码登录认证服务"
      tags: ["认证服务"]
    };
  }
  // 刷新令牌
  // @param RefreshTokenRequest 请求参数，包含刷新令牌
  // @return RefreshTokenResponse 响应结果，包含新的访问令牌和刷新令牌
  rpc RefreshToken (RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/admin/v1/auth/refresh-token"
      body: "*"
    };
    option (gnostic.openapi.v3.operation) = {
      summary: "刷新令牌";
      description: "使用刷新令牌获取新的访问令牌";
      tags: ["认证服务"];
      security: [{additional_properties: [{name: "BearerAuth"; value: {}}]}]
    };
  }

  // 后台登出
  rpc Logout (LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/admin/v1/auth/logout"
      body: "*"
    };
    option (gnostic.openapi.v3.operation) = {
      summary: "用户登出";
      description: "退出登录并失效当前令牌";
      tags: ["认证服务"];
      security: [
        {
          additional_properties: [
            {
              name: "BearerAuth";
              value: {}
            }
          ]
        }
      ]
    };
  }
  
  // 登录用户信息
  rpc Profile (ProfileRequest) returns (ProfileResponse) {
    option (google.api.http) = {
      get: "/admin/v1/auth/profile"
    };
    option (gnostic.openapi.v3.operation) = {
      summary: "登录用户简介信息";
      description: "登录用户简介信息";
      tags: ["认证服务"];
      security: [
        {
          additional_properties: [
            {
              name: "BearerAuth";
              value: {}
            }
          ]
        }
      ]
    };
  }


  // 登录用户权限码
  rpc Codes (CodesRequest) returns (CodesResponse) {
    option (google.api.http) = {
      get: "/admin/v1/auth/codes"
    };
    option (gnostic.openapi.v3.operation) = {
      summary: "登录用户权限码";
      description: "登录用户权限码";
      tags: ["认证服务"];
      security: [
        {
          additional_properties: [
            {
              name: "BearerAuth";
              value: {}
            }
          ]
        }
      ]
    };
  }
}

// 授权类型
enum GrandType {
  GRAND_TYPE_UNSPECIFIED = 0; // 未指定
  GRAND_TYPE_PASSWORD = 1; // 密码
  GRAND_TYPE_CODE = 2; // 验证码
}

message Auth {
  string username = 1 [
    (gnostic.openapi.v3.property) = {description: "认证名称"}
  ]; // 认证名称
  uint32 user_id = 2 [
    (gnostic.openapi.v3.property) = {description: "用户ID"}
  ]; // 用户ID
  uint32 domain_id = 3 [
    (gnostic.openapi.v3.property) = {description: "域ID"}
  ]; // 域ID
  repeated string roles = 4 [
    (gnostic.openapi.v3.property) = {description: "角色"}
  ]; // 角色
  repeated string permissions = 5 [
    (gnostic.openapi.v3.property) = {description: "权限"}
  ]; // 权限
}

// 登录密码
message LoginPassword {
  string username = 1 [
    (buf.validate.field).string = {min_len: 1, max_len: 10},
    (gnostic.openapi.v3.property) = {description: "登录用户名"}
  ]; // 用户名
  string password = 2 [
    (buf.validate.field).string = {min_len: 6, max_len: 25},
    (gnostic.openapi.v3.property) = {description: "登录密码"}
  ]; // 密码
}

// 登录验证码
message LoginCode {
  string phone = 1 [
    (buf.validate.field).string = {min_len: 1, max_len: 10},
    (gnostic.openapi.v3.property) = {description: "登录手机号"}
  ]; // 手机号
  string code = 2 [
    (buf.validate.field).string = {min_len: 1, max_len: 10},
    (gnostic.openapi.v3.property) = {description: "登录验证码"}
  ]; // 验证码
}

// 用户后台登陆 - 请求
message LoginRequest {
  LoginPassword password = 1;
  LoginCode code = 2;
  optional uint32 domain_id = 3 [
    (buf.validate.field).uint32.gte = 0,
    (gnostic.openapi.v3.property) = {description: "租户/域ID"}
  ]; // 域ID
  optional GrandType grand_type = 4 [
    (gnostic.openapi.v3.property) = {description: "授权类型"}
  ]; // 授权类型，一直为：password
}

// 用户后台登陆 - 回应
message LoginResponse {
  uint32 id = 1 [
    (gnostic.openapi.v3.property) = {description: "用户ID"}
  ]; // 用户ID
  optional string name = 2 [
    (gnostic.openapi.v3.property) = {description: "用户名"}
  ]; // 用户名
  optional string token_type = 3 [
    (gnostic.openapi.v3.property) = {description: "令牌类型"}
  ]; // 令牌类型
  string access_token = 4 [
    (gnostic.openapi.v3.property) = {description: "访问令牌"}
  ]; // 访问令牌
  string refresh_token = 5 [
    (gnostic.openapi.v3.property) = {description: "刷新令牌"}
  ]; // 刷新令牌
  optional string expires_in = 6 [
    (gnostic.openapi.v3.property) = {description: "访问令牌过期时间"}
  ]; // 访问令牌过期时间
}

// 请求 - 刷新令牌
message RefreshTokenRequest {
  string refresh_token = 1 [
    (gnostic.openapi.v3.property) = {description: "刷新令牌"}
  ]; // 刷新令牌
}

// 回应 - 刷新令牌
message RefreshTokenResponse {
  string access_token = 1 [
    (gnostic.openapi.v3.property) = {description: "新的访问令牌"}
  ]; // 新的访问令牌
  string refresh_token = 2 [
    (gnostic.openapi.v3.property) = {description: "新的刷新令牌"}
  ]; // 新的刷新令牌
  optional string expires_in = 3 [
    (gnostic.openapi.v3.property) = {description: "访问令牌过期时间"}
  ]; // 访问令牌过期时间
}

// 用户后台登出 - 请求
message LogoutRequest {}

// 用户后台登出 - 回应
message LogoutResponse {}

// 登录用户简介信息 - 请求
message ProfileRequest {}

// 登录用户简介信息 - 回应
message ProfileResponse {
  core.service.v1.User user = 1 [
    (gnostic.openapi.v3.property) = {description: "登录用户简介信息"}
  ]; // 登录用户简介信息
  optional core.service.v1.Role role = 2 [
    (gnostic.openapi.v3.property) = {description: "登录用户角色信息"}
  ]; // 登录用户角色信息  
  repeated string permissions = 3 [
    (gnostic.openapi.v3.property) = {description: "登录用户权限信息"}
  ]; // 登录用户权限信息
  repeated string menus = 4 [
    (gnostic.openapi.v3.property) = {description: "登录用户菜单信息"}
  ]; // 登录用户菜单信息
}

// 登录用户权限码 - 请求
message CodesRequest {}

// 登录用户权限码 - 回应
message CodesResponse {
  repeated string codes = 1 [
    (gnostic.openapi.v3.property) = {description: "登录用户权限码"}
  ]; // 登录用户权限码
}
